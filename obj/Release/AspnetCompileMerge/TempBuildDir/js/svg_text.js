var swatches = [];
//var TotalLayerCount = 0;  //7/2/2019
var KitSwatches = {
    "kit_0": JSON.parse(JSON.stringify(swatches)),
    "kit_1": JSON.parse(JSON.stringify(swatches)),
    "kit_2": JSON.parse(JSON.stringify(swatches)),
    "kit_3": JSON.parse(JSON.stringify(swatches)),
    "kit_4": JSON.parse(JSON.stringify(swatches))
}
var KitbbScale = 0;
var KitScale = {
    "kit_0": JSON.parse(JSON.stringify(KitbbScale)),
    "kit_1": JSON.parse(JSON.stringify(KitbbScale)),
    "kit_2": JSON.parse(JSON.stringify(KitbbScale)),
    "kit_3": JSON.parse(JSON.stringify(KitbbScale)),
    "kit_4": JSON.parse(JSON.stringify(KitbbScale))
}
var svgText = {
    bbScale: 1, //the scale of the bounding box ui vs the svg object
    moveCounter: 0,
    offset_x_change: 0,
    offset_x_change_kit: 0,
    ImageWidth: 0,
    ImageHeight: 0,
    CanvasfontFmaily: "",
    offset_y_change: 0,
    offset_y_change_kit: 0,
    offset_logox_change: 0,
    offset_logoy_change: 0,
    offset_logox_change_kit: 0,
    offset_logoy_change_kit: 0,
    currentView: '_Front',
    shiftKey: false,
    shiftCheck: function () {
        document.onkeydown = function (e) {
            e = e || window.event;
            if (e.keyCode == 16) svgText.shiftKey = true;
        };
        document.onkeyup = function (e) {
            e = e || window.event;
            if (e.keyCode == 16) svgText.shiftKey = false;
        };
    },
    layerObjects: {
        '_Front': [],
        '_Back': [],
        '_Left': [],
        '_Right': []
    },
    layerKit_0_Objects: {
        '_Front_0': [],
        '_Back_0': [],
        '_Left_0': [],
        '_Right_0': [],
    },
    layerKit_1_Objects: {
        '_Front_1': [],
        '_Back_1': [],
        '_Left_1': [],
        '_Right_1': [],
    },
    layerKit_2_Objects: {
        '_Front_2': [],
        '_Back_2': [],
        '_Left_2': [],
        '_Right_2': [],
    },
    layerKit_3_Objects: {
        '_Front_3': [],
        '_Back_3': [],
        '_Left_3': [],
        '_Right_3': [],
    },
    layerKit_4_Objects: {
        '_Front_4': [],
        '_Back_4': [],
        '_Left_4': [],
        '_Right_4': [],
    },
    layerKitObjects: {
        '_Front_0': [],
        '_Back_0': [],
        '_Left_0': [],
        '_Right_0': [],

        '_Front_1': [],
        '_Back_1': [],
        '_Left_1': [],
        '_Right_1': [],

        '_Front_2': [],
        '_Back_2': [],
        '_Left_2': [],
        '_Right_2': [],

        '_Front_3': [],
        '_Back_3': [],
        '_Left_3': [],
        '_Right_3': [],

        '_Front_4': [],
        '_Back_4': [],
        '_Left_4': [],
        '_Right_4': []
    },

    settings: {
        toparc: "M0,50 C50,0 150,0 200,50",
        bottomarc: "M0,0 C50,50 150,50 200,0",
        straightline: "M0,25 200,25"
    },
    makeSwatches: function ($selector) {
        console.log('svg: makeSwatches');
        var html = '';
        for (var i = 0; i < swatches.length; i++) {
            html += '<span class="swatch" style="background:' + swatches[i].color + ';" data-code="' + swatches[i].code + '" data-color="' + swatches[i].color + '"><span class="title"><span class="title_inner">' + swatches[i].title + '</span></span></span>';
        }
        $selector.html(html);
    },
    makeKitSwatches: function ($selector, currentIndex, kitNo) {
        console.log('svg:KitmakeSwatches');

        var html = '';
        console.log('swatch length ', swatches.length, KitSwatches['kit_' + kitNo].length);
        for (var i = 0; i < KitSwatches['kit_' + kitNo].length; i++) {
            html += '<span class="swatch" style="background:' + KitSwatches['kit_' + kitNo][i].color + ';" data-code="' + KitSwatches['kit_' + kitNo][i].code + '" data-color="' + KitSwatches['kit_' + kitNo][i].color + '"><span class="title"><span class="title_inner">' + KitSwatches['kit_' + kitNo][i].title + '</span></span></span>';
        }
        $selector.empty();
        $selector.html(html);
    },
    reIndexLayers: function () {
        console.log('svg: reIndexLayers');
        Builder.hasChanged("reIndexLayers");
        $("#text_palette" + svgText.currentView + " > div").each(function (index) {
            var revindex = $("#text_palette" + svgText.currentView + " > div").length - index - 1;
            $(this).attr('id', 'paletteLayer' + svgText.currentView + revindex).attr("data-index", revindex);
        });
        $("#CUSTOM" + svgText.currentView + " >g").each(function (index) {
            //default type is text
            $(this).find("defs g").attr('id', 'textPathGroup' + svgText.currentView + index);
            $(this).find("defs path").attr('id', 'myTextPath' + svgText.currentView + index);

            $(this).attr('id', 'layer_g' + svgText.currentView + index).attr("data-index", index);
            $(this).find(">svg").attr('id', 'layer_svg' + svgText.currentView + index).attr("data-index", index);
        });
    },
    reIndexKitLayers: function (kitNo) {
        console.log('svg:Kit reIndexLayers');
        Builder.hasChanged("Kit reIndexLayers");
        $("#text_palette_" + kitNo + svgText.currentView + " > div").each(function (index) {
            var revindex = $("#text_palette_" + kitNo + svgText.currentView + " > div").length - index - 1;
            $(this).attr('id', 'paletteLayer' + svgText.currentView + revindex).attr("data-index", revindex);
        });
        $("#CUSTOM" + svgText.currentView + " >g").each(function (index) {
            //default type is text
            $(this).find("defs g").attr('id', 'textPathGroup' + svgText.currentView + index);
            $(this).find("defs path").attr('id', 'myTextPath' + svgText.currentView + index);

            $(this).attr('id', 'layer_g' + svgText.currentView + index).attr("data-index", index);
            $(this).find(">svg").attr('id', 'layer_svg' + svgText.currentView + index).attr("data-index", index);
        });
    },
    init: function () {
        console.log('svg: init');
        for (var i in Product.textColors) {
            var title_str = Product.textColors[i]["name"];
            var color_str = Product.textColors[i]["hex"];
            var code_str = Product.textColors[i]["code"];
            var colorObj = { color: "#" + color_str, title: title_str, code: code_str };
            swatches.push(colorObj);
        }
        //interactive page elements
        $(".preview-nav.single a").each(function () {
            var view = $(this).attr("data-view");
            var splithide = $(this).attr("class");
            var ret = splithide.split(" ");
            var str1 = ret[0];
            var str2 = ret[1];
            svgText.loadSavedToArray(view, Cust.text[view]);
            //if (str2 != "hide") {
            //    svgText.setView(view);
            //    svgText.clearActiveLayer();
            //}
            $(this).click(function (e) {
                e.preventDefault();
                svgText.setView(view);
                svgText.clearActiveLayer();
            });
        });

        svgText.pricing.getCustomPanels();

        setTimeout(function () {
            if (Builder.viewsToLoad == 1) {
                $(".preview-nav a:eq(0)").trigger("click");
            }
            else if (Builder.viewsToLoad == 2) {
                $(".preview-nav a:eq(1)").trigger("click");
                $(".preview-nav a:eq(0)").trigger("click");
            }
            else {
                $(".preview-nav a:eq(3)").trigger("click");
                $(".preview-nav a:eq(2)").trigger("click");
                $(".preview-nav a:eq(1)").trigger("click");
                $(".preview-nav a:eq(0)").trigger("click");
            }
            if ($('body').hasClass('view-only')) {


            }
            //if ($('body').hasClass('review')) {
            //$(".preview-nav a:eq(1)").trigger("click");
            // $(".preview-nav a:eq(2)").trigger("click");
            // $(".preview-nav a:eq(3)").trigger("click");
            //  }
            if (Builder.step == 4) {
                //$(".preview-nav a:eq(1)").trigger("click");
                if (!$(".preview-nav a:eq(1)").hasClass('hide')) {
                    $(".preview-nav a:eq(1)").trigger("click");
                }
                if (!$(".preview-nav a:eq(2)").hasClass('hide')) {
                    $(".preview-nav a:eq(2)").trigger("click");
                }
                if (!$(".preview-nav a:eq(3)").hasClass('hide')) {
                    $(".preview-nav a:eq(3)").trigger("click");
                }
            }
        }, 10);


        $("#thebutton").click(function (e) {
            e.preventDefault();

            var thetext = $('#thetext').val();
            //validators!
            if (thetext.length < 1 || $.trim(thetext) == '') {
                //alert("Text must not be blank!")
                CK.alert(106)
            }
            else {
                svgText.makeNewText(thetext);
            }
        });
        $(".add-image").click(function () {
            svgText.makeNewImage();
        });
        $("#boundingbox_deselect").click(function (e) {
            svgText.clearActiveLayer();
        });
        svgText.shiftCheck();
    },


    //Changes for Text Shape using Canvas 30_11_2018......................

    loadCanvasText: function () {
        var currentTextIndex = svgText.currentLayer;
        var presentView = svgText.currentView;
        var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
        var imageNameAr = svgText.layerObjects[svgText.currentView][currentTextIndex].image_url.split("/");
        var imageNameText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
        var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
        var TextNametoDisplay = imageNameText;
        var fontfamily = svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily;
        //palette layer
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + imageNameText + "</i></strong>");

        svgText.setActiveLayer(currentTextIndex);

        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');

        $("#CUSTOM" + svgText.currentView).append($image);

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");

        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
            var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
            var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
            var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
            var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
            var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
            var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
            var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
            var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
            $("#layer_g" + svgText.currentView + thisTextIndex).remove();

            if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
            }
            else if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
            }
            else {
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
            }

        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                            if (TextNametoDisplay.length >= 15) {
                                svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            }
                            else {
                                svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            }
                            $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active  .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                            svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        }
                        else if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {

                            svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active  .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                            svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        }
                        else {
                            svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily);
                            $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active  .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                            svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        }

                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                            if (TextNametoDisplay >= 15) {
                                svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            }
                            else {
                                svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            }
                            $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                            svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        }
                        else if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                            svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                            svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        }
                        else {
                            svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, linewidth, fontfamily);
                            $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                            svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        }
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });


        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                    if (TextNametoDisplay >= 15) {
                        svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    }
                    else {
                        svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                }
                else if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                    svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                }
                else {
                    svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomPanelsForCanvasSvg();

                }

            }


        });
        newLayer.find(".stroke-down").click(function (e) {

            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                    if (TextNametoDisplay >= 15) {
                        if (strokewidth == 0) {
                            svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth);
                        }
                        else {
                            svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                        }

                    }
                    else {
                        if (strokewidth == 0) {
                            svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth);
                        }
                        else {
                            svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                        }
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                }
                else if (svgText.layerObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                    svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                }
                else {
                    svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                }
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    vgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    vgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
            }
            //End
        });
        var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
            if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                alert('broken image!');
            } else {


                var aspect_ratio = 100 / this.naturalWidth;
                var this_nat_width = this.naturalWidth * aspect_ratio;
                var this_nat_height = this.naturalHeight * aspect_ratio;
                svgText.ImageHeight = this_nat_height;
                svgText.ImageWidth = this_nat_width;
                //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                //presentView used instead of svgText.currentView becouse of response time 
                if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                    var this_width = this_nat_width;
                    var this_height = this_nat_height;

                    svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                    svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                }
                else {
                    var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                    var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                }
                var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                var this_image = $image;
                $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                });
                var image_inner = $('#loaded_image' + view_index);
                image_inner.attr('width', this_nat_width);
                image_inner.attr('height', this_nat_height);
                if (svgText.layerObjects[presentView][currentTextIndex].Transform != "") {
                    image_inner.attr('transform', svgText.layerObjects[presentView][currentTextIndex].Transform);
                }

                image_inner.attr("id", "");
                this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                this_image.attr('data-orig-w', this_nat_width);
                this_image.attr('data-orig-h', this_nat_height);
                var revScale = 1 / svgText.bbScale;
                // alert(this_width * revScale);
                this_image.attr('width', this_width);
                this_image.attr('height', this_height);
                this_image.attr('data-scale-x', 1);
                this_image.attr('data-scale-y', 1);
                var container = $(".canvas-wrapper.active > .svg > svg ");
                if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                    this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                        .attr('y', ((container.height() * revScale - (this_height)) / 2))

                    svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                    svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                }
                else {
                    this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                    this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                }
                if (currentTextIndex == svgText.currentLayer)
                    svgText.setActiveLayer(currentTextIndex);
                svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);
            }
        });
        svgText.pricing.getCustomPanelsForCanvasSvg();
        Builder.hasChanged("load image");
    },
    loadKitCanvasText: function (kitIndex) {
        var currentTextIndex = svgText.currentLayer;
        var currentTextIndex = svgText.currentLayer;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var presentView = svgText.currentView;
        var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
        var imageNameAr = svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url.split("/");
        var imageNameText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
        var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
        var TextNametoDisplay = imageNameText;
        var fontfamily = svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily;
        //palette layer
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + imageNameText + "</i></strong>");

        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        //layer buttons     
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" visibility="hidden"></image></svg>');

        $("#CUSTOM" + svgText.currentView).append($image);

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });

            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }
        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
            //recenter here
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            $(".resize-handle").css({ 'opacity': '0' });
            $(".bbhandles").css({ 'opacity': '0' });
            $(".bblines ").css({ 'opacity': '0' });
            $(".resize-handle_kit").css({ 'opacity': '0' });
            $(".bbhandles_kit").css({ 'opacity': '0' });
            $(".bblines_kit ").css({ 'opacity': '0' });
            $(".lds-wrapper-canvas").show();
            var thisTextIndex = svgText.currentLayer;
            var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
            var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
            var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
            var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
            var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
            var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
            var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
            var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
            var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
            $("#layer_g" + svgText.currentView + thisTextIndex).remove();
            if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }

        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;

                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                            svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily, linewidth, kitIndex);
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active  .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        }
                        else if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                            svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily, linewidth, kitIndex);
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active  .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        }
                        else {
                            svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily, linewidth, kitIndex);
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active  .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        }

                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                            svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily, linewidth, kitIndex);
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        }
                        else if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                            svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily, linewidth, kitIndex);
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        }
                        else {
                            svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontfamily, linewidth, kitIndex);
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                            $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                            svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        }
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });


        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                }
                else if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                }
                else {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

                }

            }


        });
        newLayer.find(".stroke-down").click(function (e) {

            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "verticalarch") {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                }
                else if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout == "bowtie") {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                }
                else {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                }
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();        

            switch (layout) {
                case 'bridge':
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    svgText.loadKitText(ActiveText, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    Builder.hasChanged("kit layout changed");
                    break;
            }
            //End
        });
        var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
            if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                alert('broken image!');
            } else {


                var aspect_ratio = 100 / this.naturalWidth;
                var this_nat_width = this.naturalWidth * aspect_ratio;
                var this_nat_height = this.naturalHeight * aspect_ratio;
                svgText.ImageHeight = this_nat_height;
                svgText.ImageWidth = this_nat_width;
                //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                //presentView used instead of svgText.currentView becouse of response time 
                if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                    var this_width = this_nat_width;
                    var this_height = this_nat_height;

                    svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                    svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                }
                else {
                    var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                    var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                }

                var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                var this_image = $image;
                $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                    Builder.doubleKit = kitIndex;
                    if (kitIndex == 2 || kitIndex == 4) {
                        //  var view = svgText.currentView;
                        var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                        var currentView = view.split('_');
                        presentView = '_' + currentView[1] + '_' + kitIndex;
                        svgText.currentView = presentView;
                        // svgText.currentView = '_Front_' + kitNo;
                    }
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                });
                var image_inner = $('#loaded_image' + view_index);
                image_inner.attr('width', this_nat_width);
                image_inner.attr('height', this_nat_height);
                if (svgText.layerKitObjects[presentView][currentTextIndex].Transform != "") {
                    image_inner.attr('transform', svgText.layerKitObjects[presentView][currentTextIndex].Transform);
                }

                image_inner.attr("id", "");
                this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                this_image.attr('data-orig-w', this_nat_width);
                this_image.attr('data-orig-h', this_nat_height);
                var revScale = 1 / svgText.bbScale;
                // alert(this_width * revScale);
                this_image.attr('width', this_width);
                this_image.attr('height', this_height);
                this_image.attr('data-scale-x', 1);
                this_image.attr('data-scale-y', 1);
                var container = $(".canvas-wrapper.active > .svg > svg ");
                if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                    this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                        .attr('y', ((container.height() * revScale - (this_height)) / 2))

                    svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                    svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                }
                else {
                    this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                    this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                }
                if (currentTextIndex == svgText.currentLayer)
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                $(".Image" + presentView + currentTextIndex).removeAttr("visibility");
                $(".resize-handle").css({ 'opacity': '1' });
                $(".bbhandles").css({ 'opacity': '1' });
                $(".bblines ").css({ 'opacity': '1' });
                $(".resize-handle_kit").css({ 'opacity': '1' });
                $(".bbhandles_kit").css({ 'opacity': '1' });
                $(".bblines_kit ").css({ 'opacity': '1' });
                $(".lds-wrapper-canvas").hide();
                ////////////////Masking Code//////////////////
                var thisTextIndex = svgText.currentLayer;
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                    "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                //recenter here

                svgText.placeKitTextCentered(kitIndex);
                svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                /////////////////////End////////////////////////
                svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
            }
        });
        svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
        Builder.hasChanged("load image");
    },
    GetCanvasBridgeText: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily) {
        var c = document.getElementById("demo");
        var ctx = demo.getContext('2d'),
            font = '100px' + ' ' + fontfmaily,
            w = demo.width,
            h = demo.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurve.value, 10);
        offsetY = parseInt(iOffset.value, 10);
        textHeight = parseInt(iHeight.value, 10);
        bottom = parseInt(iBottom.value, 10);
        vCurve.innerHTML = curve;
        vOffset.innerHTML = offsetY;
        vHeight.innerHTML = textHeight;
        vBottom.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);
        }
        svgText.ConvertCanvasIntoImage(thistextCanvas, fontfmaily, layout, width, height, textX, textY);
    },
    GetCanvasBowtieText: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily) {
        var c = document.getElementById("demobowtie");
        var ctx = demobowtie.getContext('2d'),
            font = '105px' + ' ' + fontfmaily,
            w = demobowtie.width,
            h = demobowtie.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforBowtie.value, 10);
        offsetY = parseInt(iOffsetforBowtie.value, 10);
        textHeight = parseInt(iHeightforBowtie.value, 10);
        bottom = parseInt(iBottomforBowtie.value, 10);
        vCurveforBowtie.innerHTML = curve;
        vOffsetforBowtie.innerHTML = offsetY;
        vHeightforBowtie.innerHTML = textHeight;
        vBottomforBowtie.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);

        }
        svgText.ConvertCanvasIntoImageForBowtie(thistextCanvas, fontfmaily, layout, width, height, textX, textY);
    },
    GetCanvasPennantText: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth) {
        var c = document.getElementById("demoforPennant");
        var ctx = demoforPennant.getContext('2d'),
            font = '60px impact',
            w = demoforPennant.width,
            h = demoforPennant.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 200 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforPennant.value, 10);
        offsetY = parseInt(iOffsetforPennant.value, 10);
        textHeight = parseInt(iHeightforPennant.value, 10);
        bottom = parseInt(iBottomforPennant.value, 10);
        vCurveforPennant.innerHTML = curve;
        vOffsetforPennant.innerHTML = offsetY;
        vHeightforPennant.innerHTML = textHeight;
        vBottomforPennant.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {


            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);



        }
        svgText.ConvertCanvasIntoImageForPennant(thistextCanvas, font, layout, width, height, textX, textY);
    },
    GetCanvasVerticalText: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily) {
        var c = document.getElementById("demoforVertical");
        var ctx = demoforVertical.getContext('2d'),
            font = '70px' + ' ' + fontfmaily,
            w = demoforVertical.width,
            h = demoforVertical.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVertical.value, 10);
        offsetY = parseInt(iOffsetforVertical.value, 10);
        textHeight = parseInt(iHeightforVertical.value, 10);
        bottom = parseInt(iBottomforVertical.value, 10);
        iCurveforVertical.innerHTML = curve;
        vOffsetforVertical.innerHTML = offsetY;
        vHeightforVertical.innerHTML = textHeight;
        vBottomforVertical.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }

        svgText.ConvertCanvasIntoImageForVertical(thistextCanvas, fontfmaily, layout, width, height, textX, textY);
    },
    GetCanvasVerticalTextforlargetext: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily) {
        var c = document.getElementById("demoforVerticalforlargetext");
        var ctx = demoforVerticalforlargetext.getContext('2d'),
            font = '70px' + ' ' + fontfmaily,
            w = demoforVerticalforlargetext.width,
            h = demoforVerticalforlargetext.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVerticalforlargetext.value, 10);
        offsetY = parseInt(iOffsetforVerticalforlargetext.value, 10);
        textHeight = parseInt(iHeightforVerticalforlargetext.value, 10);
        bottom = parseInt(iBottomforVerticalforlargetext.value, 10);
        iCurveforVerticalforlargetext.innerHTML = curve;
        vOffsetforVerticalforlargetext.innerHTML = offsetY;
        vHeightforVerticalforlargetext.innerHTML = textHeight;
        vBottomforVerticalforlargetext.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }

        svgText.ConvertCanvasIntoImageForVertical(thistextCanvas, fontfmaily, layout, width, height, textX, textY);
    },
    ConvertCanvasIntoImage: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        svgText.ImageHeight = 0;
        svgText.ImageWidth = 0;
        var canvas = document.getElementById('demo');
        var trimmedCanvas = svgText.trimCanvas(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });

        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily);
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].currentLayer;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }

        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;

                        //svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily);
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();

                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBridgeTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily);
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .text-color .swatch').removeClass("selected");
                        $('.palette_view .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });


        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });

        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;
            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }

            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            svgText.ImageHeight = textheight;
            svgText.ImageWidth = textwidth;
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                    svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    svgText.ImageHeight = this_nat_height;
                    svgText.ImageWidth = this_nat_width;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                    svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    ConvertCanvasIntoImageForBowtie: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        svgText.ImageHeight = 0;
        svgText.ImageWidth = 0;
        var canvas = document.getElementById('demobowtie');
        var trimmedCanvas = svgText.trimCanvasforBowtie(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });

        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBowtieTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily);
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active  .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active  .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBowtieTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily);
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active  .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active  .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });


        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });

        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;
            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            svgText.ImageWidth = textwidth;
            svgText.ImageHeight = textheight;

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                    svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    svgText.ImageWidth = this_nat_width;
                    svgText.ImageHeight = this_nat_height;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                    svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    ConvertCanvasIntoImageForPennant: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        var canvas = document.getElementById('demoforPennant');
        var trimmedCanvas = svgText.trimCanvasforPennant(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });

        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.clearActiveLayer();
                $(this).parent().remove();
                svgText.reIndexLayers();
                svgText.GetCanvasTextFontFamily(imageNameAr, '100px' + ' ' + $(this).val());
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("font family changed");
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasPennantTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasPennantTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 6) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.reIndexLayers();
                svgText.GetCanvasPennantText(TextNametoDisplay, layout, "", width, height, x, y, "", strokewidth);

            }
            svgText.pricing.getCustomPanelsForCanvasSvg();

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
            }
            svgText.pricing.getCustomPanelsForCanvasSvg();

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    console.log('calling resizeSvgText');

                    break;

            }
            //End



        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");


            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object

        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    ConvertCanvasIntoImageForVertical: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        if (textName.length >= 15) {
            var canvas = document.getElementById('demoforVerticalforlargetext');
        }
        else {
            var canvas = document.getElementById('demoforVertical');
        }
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        //var currentTextIndex = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });

        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {

            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }

        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                        if (TextNametoDisplay.length >= 15) {
                            svgText.GetCanvasVerticalTextOnTextColorChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily);
                        }
                        else {

                            svgText.GetCanvasVerticalTextOnTextColorChange(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily);

                        }
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        //svgText.reIndexLayers();
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        if (TextNametoDisplay.length >= 15) {
                            svgText.GetCanvasVerticalTextOnTextColorChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily);
                        }
                        else {
                            svgText.GetCanvasVerticalTextOnTextColorChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily);
                        }
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }
        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });

        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;
            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            svgText.ImageHeight = textheight;
            svgText.ImageWidth = textwidth;
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    svgText.ImageHeight = this_height;
                    svgText.ImageWidth = this_width;
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                    svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);

                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    svgText.ImageHeight = this_nat_height;
                    svgText.ImageWidth = this_nat_width;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                    svgText.placeImageCentered(svgText.ImageHeight, svgText.ImageWidth);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    trimCanvas: function (c) {
        var ctx = c.getContext('2d'),
            copy = document.createElement('canvas').getContext('2d'),
            pixels = ctx.getImageData(0, 0, c.width, c.height),
            l = pixels.data.length,
            i,
            bound = {
                top: null,
                left: null,
                right: null,
                bottom: null
            },
            x, y;

        // Iterate over every pixel to find the highest
        // and where it ends on every axis ()
        for (i = 0; i < l; i += 4) {
            if (pixels.data[i + 3] !== 0) {
                x = (i / 4) % c.width;
                y = ~~((i / 4) / c.width);

                if (bound.top === null) {
                    bound.top = y - 15;
                }

                if (bound.left === null) {
                    bound.left = x - 20;
                } else if (x < bound.left) {
                    bound.left = x - 20;
                }

                if (bound.right === null) {
                    bound.right = x + 35;
                } else if (bound.right < x) {
                    bound.right = x + 35;
                }

                if (bound.bottom === null) {
                    bound.bottom = y + 22;
                } else if (bound.bottom < y) {
                    bound.bottom = y + 22;
                }
            }
        }

        // Calculate the height and width of the content
        var trimHeight = (bound.bottom) - (bound.top),
            trimWidth = (bound.right) - (bound.left),
            trimmed = ctx.getImageData(bound.left, bound.top, trimWidth, trimHeight);

        copy.canvas.width = trimWidth;
        copy.canvas.height = trimHeight;
        copy.putImageData(trimmed, 0, 0);

        // Return trimmed canvas
        return copy.canvas;
    },
    trimCanvasforBowtie: function (c) {
        var ctx = c.getContext('2d'),
            copy = document.createElement('canvas').getContext('2d'),
            pixels = ctx.getImageData(0, 0, c.width, c.height),
            l = pixels.data.length,
            i,
            bound = {
                top: null,
                left: null,
                right: null,
                bottom: null
            },
            x, y;

        // Iterate over every pixel to find the highest
        // and where it ends on every axis ()
        for (i = 0; i < l; i += 4) {
            if (pixels.data[i + 3] !== 0) {
                x = (i / 4) % c.width;
                y = ~~((i / 4) / c.width);

                if (bound.top === null) {
                    bound.top = y - 15;
                }

                if (bound.left === null) {
                    bound.left = x - 20;
                } else if (x < bound.left) {
                    bound.left = x - 20;
                }

                if (bound.right === null) {
                    bound.right = x + 40;
                } else if (bound.right < x) {
                    bound.right = x + 40;
                }

                if (bound.bottom === null) {
                    bound.bottom = y + 22;
                } else if (bound.bottom < y) {
                    bound.bottom = y + 22;
                }
            }
        }

        // Calculate the height and width of the content
        var trimHeight = (bound.bottom) - (bound.top),
            trimWidth = (bound.right) - (bound.left),
            trimmed = ctx.getImageData(bound.left, bound.top, trimWidth, trimHeight);

        copy.canvas.width = trimWidth;
        copy.canvas.height = trimHeight;
        copy.putImageData(trimmed, 0, 0);

        // Return trimmed canvas
        return copy.canvas;
    },
    trimCanvasforPennant: function (c) {
        var ctx = c.getContext('2d'),
            copy = document.createElement('canvas').getContext('2d'),
            pixels = ctx.getImageData(0, 0, c.width, c.height),
            l = pixels.data.length,
            i,
            bound = {
                top: null,
                left: null,
                right: null,
                bottom: null
            },
            x, y;

        // Iterate over every pixel to find the highest
        // and where it ends on every axis ()
        for (i = 0; i < l; i += 4) {
            if (pixels.data[i + 3] !== 0) {
                x = (i / 4) % c.width;
                y = ~~((i / 4) / c.width);

                if (bound.top === null) {
                    bound.top = y - 15;
                }

                if (bound.left === null) {
                    bound.left = x - 20;
                } else if (x < bound.left) {
                    bound.left = x - 20;
                }

                if (bound.right === null) {
                    bound.right = x + 22;
                } else if (bound.right < x) {
                    bound.right = x + 22;
                }

                if (bound.bottom === null) {
                    bound.bottom = y + 22;
                } else if (bound.bottom < y) {
                    bound.bottom = y + 22;
                }
            }
        }

        // Calculate the height and width of the content
        var trimHeight = (bound.bottom) - (bound.top),
            trimWidth = (bound.right) - (bound.left),
            trimmed = ctx.getImageData(bound.left, bound.top, trimWidth, trimHeight);

        copy.canvas.width = trimWidth;
        copy.canvas.height = trimHeight;
        copy.putImageData(trimmed, 0, 0);

        // Return trimmed canvas
        return copy.canvas;
    },
    trimCanvasforVertical: function (c) {
        var ctx = c.getContext('2d'),
            copy = document.createElement('canvas').getContext('2d'),
            pixels = ctx.getImageData(0, 0, c.width, c.height),
            l = pixels.data.length,
            i,
            bound = {
                top: null,
                left: null,
                right: null,
                bottom: null
            },
            x, y;

        // Iterate over every pixel to find the highest
        // and where it ends on every axis ()
        for (i = 0; i < l; i += 4) {
            if (pixels.data[i + 3] !== 0) {
                x = (i / 4) % c.width;
                y = ~~((i / 4) / c.width);

                if (bound.top === null) {
                    bound.top = y - 20;
                }

                if (bound.left === null) {
                    bound.left = x - 28;
                } else if (x < bound.left) {
                    bound.left = x - 28;
                }

                if (bound.right === null) {
                    bound.right = x + 45;
                } else if (bound.right < x) {
                    bound.right = x + 45;
                }

                if (bound.bottom === null) {
                    bound.bottom = y + 45;
                } else if (bound.bottom < y) {
                    bound.bottom = y + 45;
                }
            }
        }

        // Calculate the height and width of the content
        var trimHeight = (bound.bottom) - (bound.top),
            trimWidth = (bound.right) - (bound.left),
            trimmed = ctx.getImageData(bound.left, bound.top, trimWidth, trimHeight);

        copy.canvas.width = trimWidth;
        copy.canvas.height = trimHeight;
        copy.putImageData(trimmed, 0, 0);

        // Return trimmed canvas
        return copy.canvas;
    },
    //vertical-Arch
    GetCanvasVerticalTextOnTextColorChange: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily) {
        var c = document.getElementById("demoforVertical");
        var ctx = demoforVertical.getContext('2d'),
            font = '70px' + ' ' + CanvasFontFamily,
            w = demoforVertical.width,
            h = demoforVertical.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVertical.value, 10);
        offsetY = parseInt(iOffsetforVertical.value, 10);
        textHeight = parseInt(iHeightforVertical.value, 10);
        bottom = parseInt(iBottomforVertical.value, 10);
        iCurveforVertical.innerHTML = curve;
        vOffsetforVertical.innerHTML = offsetY;
        vHeightforVertical.innerHTML = textHeight;
        vBottomforVertical.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }
        svgText.ConvertCanvasIntoImageForVerticalOnTextColorChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY);
    },
    GetCanvasVerticalTextOnTextColorChangeforlargetext: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily) {
        var c = document.getElementById("demoforVerticalforlargetext");
        var ctx = demoforVerticalforlargetext.getContext('2d'),
            font = '70px' + ' ' + CanvasFontFamily,
            w = demoforVerticalforlargetext.width,
            h = demoforVerticalforlargetext.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVerticalforlargetext.value, 10);
        offsetY = parseInt(iOffsetforVerticalforlargetext.value, 10);
        textHeight = parseInt(iHeightforVerticalforlargetext.value, 10);
        bottom = parseInt(iBottomforVerticalforlargetext.value, 10);
        iCurveforVerticalforlargetext.innerHTML = curve;
        vOffsetforVerticalforlargetext.innerHTML = offsetY;
        vHeightforVerticalforlargetext.innerHTML = textHeight;
        vBottomforVerticalforlargetext.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            //octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }
        svgText.ConvertCanvasIntoImageForVerticalOnTextColorChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY);
    },
    ConvertCanvasIntoImageForVerticalOnTextColorChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        if (textName.length >= 15) {
            var canvas = document.getElementById('demoforVerticalforlargetext');
        }
        else {
            var canvas = document.getElementById('demoforVertical');
        }
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        if (TextNametoDisplay.length >= 15) {
                            svgText.GetCanvasVerticalTextOnTextColorChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        }
                        else {
                            svgText.GetCanvasVerticalTextOnTextColorChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        }
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        if (TextNametoDisplay.length >= 15) {
                            svgText.GetCanvasVerticalTextOnTextColorChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        }
                        else {
                            svgText.GetCanvasVerticalTextOnTextColorChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        }
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;
                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });
                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    //Bridge
    GetCanvasBridgeTextOnColorChanges: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily) {
        var c = document.getElementById("demo");
        var ctx = demo.getContext('2d'),
            font = '105px' + ' ' + CanvasFontFamily,
            w = demo.width,
            h = demo.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurve.value, 10);
        offsetY = parseInt(iOffset.value, 10);
        textHeight = parseInt(iHeight.value, 10);
        bottom = parseInt(iBottom.value, 10);
        vCurve.innerHTML = curve;
        vOffset.innerHTML = offsetY;
        vHeight.innerHTML = textHeight;
        vBottom.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            //octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);
        }
        svgText.ConvertCanvasIntoImageForBridgeOnColorChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY);
    },
    ConvertCanvasIntoImageForBridgeOnColorChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        var canvas = document.getElementById('demo');
        var trimmedCanvas = svgText.trimCanvas(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');

                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    //Bowtie
    GetCanvasBowtieTextOnColorChanges: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily) {
        var c = document.getElementById("demobowtie");
        var ctx = demobowtie.getContext('2d'),
            font = '110px' + ' ' + CanvasFontFamily,
            w = demobowtie.width,
            h = demobowtie.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforBowtie.value, 10);
        offsetY = parseInt(iOffsetforBowtie.value, 10);
        textHeight = parseInt(iHeightforBowtie.value, 10);
        bottom = parseInt(iBottomforBowtie.value, 10);
        vCurveforBowtie.innerHTML = curve;
        vOffsetforBowtie.innerHTML = offsetY;
        vHeightforBowtie.innerHTML = textHeight;
        vBottomforBowtie.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            //octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);

        }
        svgText.ConvertCanvasIntoImageForBowtieOnColorChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY);
    },
    ConvertCanvasIntoImageForBowtieOnColorChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        var canvas = document.getElementById('demobowtie');
        var trimmedCanvas = svgText.trimCanvasforBowtie(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }

            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    //Pennant
    GetCanvasPennantTextOnColorChanges: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth) {
        var c = document.getElementById("demoforPennant");
        var ctx = demoforPennant.getContext('2d'),
            font = '60px impact',
            w = demoforPennant.width,
            h = demoforPennant.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 200 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforPennant.value, 10);
        offsetY = parseInt(iOffsetforPennant.value, 10);
        textHeight = parseInt(iHeightforPennant.value, 10);
        bottom = parseInt(iBottomforPennant.value, 10);
        vCurveforPennant.innerHTML = curve;
        vOffsetforPennant.innerHTML = offsetY;
        vHeightforPennant.innerHTML = textHeight;
        vBottomforPennant.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            //octx.lineWidth = 0;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {


            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);



        }
        svgText.ConvertCanvasIntoImageForPennantOnColorChange(thistextCanvas, font, layout, width, height, textX, textY);
    },
    ConvertCanvasIntoImageForPennantOnColorChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY) {
        var canvas = document.getElementById('demoforPennant');
        var trimmedCanvas = svgText.trimCanvasforPennant(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.clearActiveLayer();
                $(this).parent().remove();
                svgText.reIndexLayers();
                svgText.GetCanvasTextFontFamily(imageNameAr, '100px' + ' ' + $(this).val());
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("font family changed");
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        svgText.GetCanvasPennantTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasPennantTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 6) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.reIndexLayers();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasVerticalText(TextNametoDisplay, layout, "", width, height, x, y, "", strokewidth, svgText.CanvasfontFmaily);

            }
            svgText.pricing.getCustomPanelsForCanvasSvg();

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
            }
            svgText.pricing.getCustomPanelsForCanvasSvg();

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    //Size change for all shapes....
    //Vertical..............
    GetCanvasVerticalSizeChange: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth) {
        var c = document.getElementById("demoforVertical");
        var ctx = demoforVertical.getContext('2d'),
            font = '70px' + ' ' + CanvasFontFamily,
            w = demoforVertical.width,
            h = demoforVertical.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVertical.value, 10);
        offsetY = parseInt(iOffsetforVertical.value, 10);
        textHeight = parseInt(iHeightforVertical.value, 10);
        bottom = parseInt(iBottomforVertical.value, 10);
        iCurveforVertical.innerHTML = curve;
        vOffsetforVertical.innerHTML = offsetY;
        vHeightforVertical.innerHTML = textHeight;
        vBottomforVertical.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }
        svgText.ConvertCanvasIntoImageForVerticalSizeChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth);
    },
    GetCanvasVerticalSizeChangeforlargetext: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth) {
        var c = document.getElementById("demoforVerticalforlargetext");
        var ctx = demoforVerticalforlargetext.getContext('2d'),
            font = '70px' + ' ' + CanvasFontFamily,
            w = demoforVerticalforlargetext.width,
            h = demoforVerticalforlargetext.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVerticalforlargetext.value, 10);
        offsetY = parseInt(iOffsetforVerticalforlargetext.value, 10);
        textHeight = parseInt(iHeightforVerticalforlargetext.value, 10);
        bottom = parseInt(iBottomforVerticalforlargetext.value, 10);
        iCurveforVerticalforlargetext.innerHTML = curve;
        vOffsetforVerticalforlargetext.innerHTML = offsetY;
        vHeightforVerticalforlargetext.innerHTML = textHeight;
        vBottomforVerticalforlargetext.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }
        svgText.ConvertCanvasIntoImageForVerticalSizeChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth);
    },


    ConvertCanvasIntoImageForVerticalSizeChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, linewidth) {
        if (textName.length >= 15) {
            var canvas = document.getElementById('demoforVerticalforlargetext');
        }
        else {
            var canvas = document.getElementById('demoforVertical');
        }
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                }
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        if (TextNametoDisplay.length >= 15) {
                            svgText.GetCanvasVerticalTextOnTextColorChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        }
                        else {
                            svgText.GetCanvasVerticalTextOnTextColorChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        }
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        if (TextNametoDisplay.length >= 15) {
                            svgText.GetCanvasVerticalTextOnTextColorChangeforlargetext(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        }
                        else {
                            svgText.GetCanvasVerticalTextOnTextColorChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        }
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (TextNametoDisplay.length >= 15) {
                    svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomPanelsForCanvasSvg();

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (TextNametoDisplay.length >= 15) {
                    if (strokewidth == 0) {
                        svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth);
                    }
                    else {
                        svgText.GetCanvasVerticalSizeChangeforlargetext(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    }

                }
                else {
                    if (strokewidth == 0) {
                        svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth);
                    }
                    else {
                        svgText.GetCanvasVerticalSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                    }

                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomPanelsForCanvasSvg();

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;

                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    //Bridge................
    GetCanvasBridgeSizeChange: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth) {
        var c = document.getElementById("demo");
        var ctx = demo.getContext('2d'),
            font = '100px' + ' ' + CanvasFontFamily,
            w = demo.width,
            h = demo.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurve.value, 10);
        offsetY = parseInt(iOffset.value, 10);
        textHeight = parseInt(iHeight.value, 10);
        bottom = parseInt(iBottom.value, 10);
        vCurve.innerHTML = curve;
        vOffset.innerHTML = offsetY;
        vHeight.innerHTML = textHeight;
        vBottom.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);
        }
        svgText.ConvertCanvasIntoImageForBridgeSizeChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth);
    },
    ConvertCanvasIntoImageForBridgeSizeChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, linewidth) {
        var canvas = document.getElementById('demo');
        var trimmedCanvas = svgText.trimCanvas(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasBridgeSizeChange(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();

                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');

                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }

            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    //Bowtie................
    GetCanvasBowtieTextSizeChanges: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth) {
        var c = document.getElementById("demobowtie");
        var ctx = demobowtie.getContext('2d'),
            font = '105px' + ' ' + CanvasFontFamily,
            w = demobowtie.width,
            h = demobowtie.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforBowtie.value, 10);
        offsetY = parseInt(iOffsetforBowtie.value, 10);
        textHeight = parseInt(iHeightforBowtie.value, 10);
        bottom = parseInt(iBottomforBowtie.value, 10);
        vCurveforBowtie.innerHTML = curve;
        vOffsetforBowtie.innerHTML = offsetY;
        vHeightforBowtie.innerHTML = textHeight;
        vBottomforBowtie.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);

        }
        svgText.ConvertCanvasIntoImageForBowtieSizeChange(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth);
    },
    ConvertCanvasIntoImageForBowtieSizeChange: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, linewidth) {
        var canvas = document.getElementById('demobowtie');
        var trimmedCanvas = svgText.trimCanvasforBowtie(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var currentTextIndex = $("#text_palette" + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette" + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth);
                svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily);
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChanges(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily);
                        $('.palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                var strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth);
                }
                else {
                    svgText.GetCanvasBowtieTextSizeChanges(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth);
                }

                svgText.pricing.getCustomPanelsForCanvasSvg();
                svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomPanelsForCanvasSvg();
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    svgText.loadText(ActiveText);
                    svgText.placeTextCentered();
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');

                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setActiveLayer(currentTextIndex);
        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" class="Image' + view_index + '" ></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
            "url(#mask-" + mask + svgText.currentView + ")");
        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
                svgText.pricing.getCustomPanelsForCanvasSvg();
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setActiveLayer(thisTextIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setActiveLayer(currentTextIndex);
                }
            });
            svgText.pricing.getCustomPanelsForCanvasSvg();
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },
    //Size down for all shapes....

    //Changes on kits are from here ....Date 24 Dec 2018
    GetCanvasBridgeTextonKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily, kitIndex) {
        var c = document.getElementById("demo");
        var ctx = demo.getContext('2d'),
            font = '100px' + ' ' + fontfmaily,
            w = demo.width,
            h = demo.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurve.value, 10);
        offsetY = parseInt(iOffset.value, 10);
        textHeight = parseInt(iHeight.value, 10);
        bottom = parseInt(iBottom.value, 10);
        vCurve.innerHTML = curve;
        vOffset.innerHTML = offsetY;
        vHeight.innerHTML = textHeight;
        vBottom.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        //if (strokecolor != "") {
        //    octx.strokeStyle = strokecolor;
        //    octx.lineWidth = 1;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        //if (strokewidth != "") {
        //    octx.strokeStyle = "Orange"
        //    octx.lineWidth = strokewidth;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);
        }
        svgText.ConvertCanvasIntoImageOnKit(thistextCanvas, fontfmaily, layout, width, height, textX, textY, kitIndex);
    },
    ConvertCanvasIntoImageOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, kitIndex) {
        svgText.ImageHeight = 0;
        svgText.ImageWidth = 0;
        var canvas = document.getElementById('demo');
        var trimmedCanvas = svgText.trimCanvas(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        console.log('svg: loadKitText');
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = svgText.layerKitObjects[svgText.currentView].length;
        svgText.layerKitObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].name,
            mask_name: ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].display //Product.masks[svgText.currentView.substr(1)][0].name
        });
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();

        //palette layer
        //Important--Enter Text then logo and then change the shape of the text the ciruclar loader appeares
        //Start
        $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").remove(); //18 Sep 2019 Changes.............
        // $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        //End

        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBridgeTextOnColorChangesOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBridgeTextOnColorChangesOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    //Important--Dropdown not working when we change "Shapes" to "BRIDGE"
                    $('.layout-change').click(function (event) {
                        event.stopPropagation();
                    });
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');

                    //Important--Enter Text then logo and then change the shape of the text the ciruclar loader appeares
                    //Start
                    var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
                    svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask = selectedMaskVal;
                    //End

                    //svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    // $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanels(kitIndex);
                    console.log('calling resizeSvgText');
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    break;
            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(currentTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            svgText.ImageHeight = textheight;
            svgText.ImageWidth = textwidth;
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });
                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        //Remove disorted Text.............
                        $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    //End....
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    svgText.ImageHeight = this_nat_height;
                    svgText.ImageWidth = this_nat_width;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        //Remove disorted Text.............
                        $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    //End....
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }
    },

    GetCanvasBowtieTextonKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily, kitIndex) {
        var c = document.getElementById("demobowtie");
        var ctx = demobowtie.getContext('2d'),
            font = '105px' + ' ' + fontfmaily,
            w = demobowtie.width,
            h = demobowtie.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforBowtie.value, 10);
        offsetY = parseInt(iOffsetforBowtie.value, 10);
        textHeight = parseInt(iHeightforBowtie.value, 10);
        bottom = parseInt(iBottomforBowtie.value, 10);
        vCurveforBowtie.innerHTML = curve;
        vOffsetforBowtie.innerHTML = offsetY;
        vHeightforBowtie.innerHTML = textHeight;
        vBottomforBowtie.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        //if (strokecolor != "") {
        //    octx.strokeStyle = strokecolor;
        //    octx.lineWidth = 1;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        //if (strokewidth != "") {
        //    octx.strokeStyle = "Orange"
        //    octx.lineWidth = strokewidth;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);

        }
        svgText.ConvertCanvasIntoImageForBowtieOnKit(thistextCanvas, fontfmaily, layout, width, height, textX, textY, kitIndex);
    },
    ConvertCanvasIntoImageForBowtieOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, kitIndex) {
        svgText.ImageHeight = 0;
        svgText.ImageWidth = 0;
        var canvas = document.getElementById('demobowtie');
        var trimmedCanvas = svgText.trimCanvas(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        console.log('svg: loadKitText');
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = svgText.layerKitObjects[svgText.currentView].length;
        svgText.layerKitObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].name,
            mask_name: ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].display
            //Product.masks[svgText.currentView.substr(1)][0].name
        });

        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        //$("#paletteLayer" + svgText.currentView + currentTextIndex).remove();


        //Important--Enter Text then logo and then change the shape of the text the ciruclar loader appeares
        //Start
        $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").remove(); //18 Sep 2019 Changes.............
        // $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        //End


        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            $(".resize-handle").css({ 'opacity': '0' });
            $(".bbhandles").css({ 'opacity': '0' });
            $(".bblines ").css({ 'opacity': '0' });
            $(".resize-handle_kit").css({ 'opacity': '0' });
            $(".bbhandles_kit").css({ 'opacity': '0' });
            $(".bblines_kit ").css({ 'opacity': '0' });
            $(".lds-wrapper-canvas").show();
            var thisTextIndex = svgText.currentLayer;
            var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
            var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
            var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
            var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
            var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
            var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
            var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
            var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
            var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
            svgText.CanvasfontFmaily = "";
            svgText.CanvasfontFmaily = $(this).val();
            svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
            $("#layer_g" + svgText.currentView + thisTextIndex).remove();
            svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
            $("select.font-fam").val($(this).val());
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBowtieTextOnColorChangesOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasBowtieTextOnColorChangesOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }

                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            }

        });

        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
         

            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();                 
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "","", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    //Important--Dropdown not working when we change "Shapes" to "BOWTIE"
                    $('.layout-change').click(function (event) {
                        event.stopPropagation();
                    });
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');

                    //Important--Enter Text then logo and then change the shape of the text the ciruclar loader appeares
                    //Start
                    var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
                    svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask = selectedMaskVal;
                    //End

                    // svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    //$("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    var this_text = $('#layer_svg' + svgText.currentView + thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = selectedtextcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = selectedtextcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    Builder.hasChanged("kit layout changed");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    break;
            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        debugger;
        width = textwidth;
        height = textheight;
        x = textX;
        y = textY;

        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(currentTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            svgText.ImageHeight = textheight;
            svgText.ImageWidth = textwidth;
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);                    
                    //this_image.attr('width', this_width);
                    //this_image.attr('height', this_height);

                    //123456789
                    this_image.attr('width', textwidth);
                    this_image.attr('height', textheight);

                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    //Important-Commented code
                    //Start
                    //if (textX == -1) {
                    //    this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                    //        .attr('y', ((container.height() * revScale - (this_height)) / 2))

                    //    svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                    //    svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    //}
                    //else {
                    //    this_image.attr('x', textX)
                    //    this_image.attr('y', textY)
                    //}
                    //End

                    //123456789
                    //Important-Increase Size of "STRAIGHT" shape and then click on "BOWTIE" then the location of text will not be change bease we have set x and y postion of text
                    //Start
                    if (textX == -1) {
                        this_image.attr('x', textX)
                            .attr('y', textY);

                        svgText.layerKitObjects[presentView][currentTextIndex].x = textX;
                        svgText.layerKitObjects[presentView][currentTextIndex].y = textY;
                    }
                    else {
                        this_image.attr('x', textX);
                        this_image.attr('y', textY);
                    }
                    //End
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////

                    //End....

                    svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    svgText.ImageHeight = this_nat_height;
                    svgText.ImageWidth = this_nat_width;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....
                    svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }
    },

    GetCanvasVerticalTextonKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, fontfmaily, kitIndex) {
        var c = document.getElementById("demoforVertical");
        var ctx = demoforVertical.getContext('2d'),
            font = '70px' + ' ' + fontfmaily,
            w = demoforVertical.width,
            h = demoforVertical.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVertical.value, 10);
        offsetY = parseInt(iOffsetforVertical.value, 10);
        textHeight = parseInt(iHeightforVertical.value, 10);
        bottom = parseInt(iBottomforVertical.value, 10);
        iCurveforVertical.innerHTML = curve;
        vOffsetforVertical.innerHTML = offsetY;
        vHeightforVertical.innerHTML = textHeight;
        vBottomforVertical.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        //if (strokecolor != "") {
        //    octx.strokeStyle = strokecolor;
        //    octx.lineWidth = 1;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        //if (strokewidth != "") {
        //    octx.strokeStyle = "Orange"
        //    octx.lineWidth = strokewidth;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }

        svgText.ConvertCanvasIntoImageForVerticalOnKit(thistextCanvas, fontfmaily, layout, width, height, textX, textY, kitIndex);
    },
    ConvertCanvasIntoImageForVerticalOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, kitIndex) {
        svgText.ImageHeight = 0;
        svgText.ImageWidth = 0;
        var canvas = document.getElementById('demoforVertical');
        var trimmedCanvas = svgText.trimCanvas(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        console.log('svg: loadKitText');
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = svgText.layerKitObjects[svgText.currentView].length;
        svgText.layerKitObjects[svgText.currentView].push({
            type: 'canvaslayer',
            x: -1,
            text: textName,
            layout: layout,
            y: -1,
            image_url: dataUrl,
            fontfamily: fontFmaily,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            radius: 250, //default 200?
            spacing: 0,
            Transform: 0,
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].name,
            mask_name: ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].display
            //Product.masks[svgText.currentView.substr(1)][0].name
        });

        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();

        //Important--Enter Text then logo and then change the shape of the text the ciruclar loader appeares
        //Start
        $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").remove(); //18 Sep 2019 Changes.............
        // $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        //End

        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily);
        newLayer.find("select.font-fam").change(function (e) {

            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }

        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasVerticalTextOnTextColorChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        svgText.CanvasfontFmaily = "";
                        svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                        svgText.GetCanvasVerticalTextOnTextColorChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", svgText.CanvasfontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }

                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            }

        });

        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    //Important--Dropdown not working when we change "Shapes" to "VERTICAL ARCH"
                    $('.layout-change').click(function (event) {
                        event.stopPropagation();
                    });
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');

                    //Important--Enter Text then logo and then change the shape of the text the ciruclar loader appeares
                    //Start
                    var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
                    svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask = selectedMaskVal;
                    //End

                    //svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    // $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    Builder.hasChanged("kit layout changed");
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    break;
            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });

            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }

            svgText.placeKitTextCentered(kitIndex);
            //svgText.setKitActiveLayer(currentTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            svgText.ImageHeight = textheight;
            svgText.ImageWidth = textwidth;
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    //End....
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    svgText.ImageHeight = this_nat_height;
                    svgText.ImageWidth = this_nat_width;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    //End....
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////

                    svgText.placeKitImageCentered(svgText.ImageHeight, svgText.ImageWidth, kitIndex);
                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }
    },

    //vertical-Arch
    GetCanvasVerticalTextOnTextColorChangeOnKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, kitIndex) {
        var c = document.getElementById("demoforVertical");
        var ctx = demoforVertical.getContext('2d'),
            font = '70px' + ' ' + CanvasFontFamily,
            w = demoforVertical.width,
            h = demoforVertical.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVertical.value, 10);
        offsetY = parseInt(iOffsetforVertical.value, 10);
        textHeight = parseInt(iHeightforVertical.value, 10);
        bottom = parseInt(iBottomforVertical.value, 10);
        iCurveforVertical.innerHTML = curve;
        vOffsetforVertical.innerHTML = offsetY;
        vHeightforVertical.innerHTML = textHeight;
        vBottomforVertical.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        //if (strokecolor != "") {
        //    octx.strokeStyle = strokecolor;
        //    octx.lineWidth = 1;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        //if (strokewidth != "") {
        //    octx.strokeStyle = "Orange"
        //    octx.lineWidth = strokewidth;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }
        svgText.ConvertCanvasIntoImageForVerticalOnTextColorChangeOnKit(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, kitIndex);
    },
    ConvertCanvasIntoImageForVerticalOnTextColorChangeOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, kitIndex) {
        var canvas = document.getElementById('demoforVertical');
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var kitCount = svgText.currentView.split("_").length - 1;
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").data("index");
        svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        var thisTextIndex = svgText.currentLayer;
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        svgText.reIndexLayers();
                        svgText.GetCanvasVerticalTextOnTextColorChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        //svgText.reIndexLayers();
                        svgText.GetCanvasVerticalTextOnTextColorChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }

                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date24/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    svgText.CanvasfontFmaily = "";
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
            }
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }


        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);

            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object

        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {
                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;
                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    this_image.attr('visibility', 'none');
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....
                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {
                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////

                    //End....

                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    GetCanvasBridgeTextOnColorChangesOnKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, kitIndex) {
        var c = document.getElementById("demo");
        var ctx = demo.getContext('2d'),
            font = '105px' + ' ' + CanvasFontFamily,
            w = demo.width,
            h = demo.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurve.value, 10);
        offsetY = parseInt(iOffset.value, 10);
        textHeight = parseInt(iHeight.value, 10);
        bottom = parseInt(iBottom.value, 10);
        vCurve.innerHTML = curve;
        vOffset.innerHTML = offsetY;
        vHeight.innerHTML = textHeight;
        vBottom.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        //if (strokecolor != "") {
        //    octx.strokeStyle = strokecolor;
        //    octx.lineWidth = 1;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        //if (strokewidth != "") {
        //    octx.strokeStyle = "Orange"
        //    octx.lineWidth = strokewidth;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);
        }
        svgText.ConvertCanvasIntoImageForBridgeColorChangeOnKit(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, kitIndex);
    },
    ConvertCanvasIntoImageForBridgeColorChangeOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, kitIndex) {
        var canvas = document.getElementById('demo');
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChangesOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChangesOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }

                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date24/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
            }
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);
        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }

            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);

            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        //Remove disorted Text.............
                        $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////

                    //End....
                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    GetCanvasBowtieTextOnColorChangesOnKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, kitIndex) {
        var c = document.getElementById("demobowtie");
        var ctx = demobowtie.getContext('2d'),
            font = '110px' + ' ' + CanvasFontFamily,
            w = demobowtie.width,
            h = demobowtie.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforBowtie.value, 10);
        offsetY = parseInt(iOffsetforBowtie.value, 10);
        textHeight = parseInt(iHeightforBowtie.value, 10);
        bottom = parseInt(iBottomforBowtie.value, 10);
        vCurveforBowtie.innerHTML = curve;
        vOffsetforBowtie.innerHTML = offsetY;
        vHeightforBowtie.innerHTML = textHeight;
        vBottomforBowtie.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        //if (strokecolor != "") {
        //    octx.strokeStyle = strokecolor;
        //    octx.lineWidth = 1;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        //if (strokewidth != "") {
        //    octx.strokeStyle = "Orange"
        //    octx.lineWidth = strokewidth;
        //    octx.strokeText(thistextCanvas, w * 0.5, 0);
        //}
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);

        }
        svgText.ConvertCanvasIntoImageForBowtieOnColorChangeOnKit(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, kitIndex);
    },
    ConvertCanvasIntoImageForBowtieOnColorChangeOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, kitIndex) {
        var canvas = document.getElementById('demobowtie');
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChangesOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChangesOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }

                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;
            }

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date24/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
            }
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);

            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {

                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....


                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....

                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    GetCanvasVerticalSizeChangeOnKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth, kitIndex) {
        var c = document.getElementById("demoforVertical");
        var ctx = demoforVertical.getContext('2d'),
            font = '70px' + ' ' + CanvasFontFamily,
            w = demoforVertical.width,
            h = demoforVertical.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforVertical.value, 10);
        offsetY = parseInt(iOffsetforVertical.value, 10);
        textHeight = parseInt(iHeightforVertical.value, 10);
        bottom = parseInt(iBottomforVertical.value, 10);
        iCurveforVertical.innerHTML = curve;
        vOffsetforVertical.innerHTML = offsetY;
        vHeightforVertical.innerHTML = textHeight;
        vBottomforVertical.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        /// slide and dice
        i = w;
        while (i--) {
            y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight, 1, y);
        }
        svgText.ConvertCanvasIntoImageForVerticalSizeChangeOnKit(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth, kitIndex);
    },
    ConvertCanvasIntoImageForVerticalSizeChangeOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, linewidth, kitIndex) {
        var canvas = document.getElementById('demoforVertical');
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        svgText.reIndexLayers();
                        svgText.GetCanvasVerticalTextOnTextColorChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        //svgText.reIndexLayers();
                        svgText.GetCanvasVerticalTextOnTextColorChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasVerticalSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }
        newTextOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {
                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);


                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....
                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////

                    //End....
                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    GetCanvasBridgeSizeChangeOnKit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth, kitIndex) {
        var c = document.getElementById("demo");
        var ctx = demo.getContext('2d'),
            font = '100px' + ' ' + CanvasFontFamily,
            w = demo.width,
            h = demo.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurve.value, 10);
        offsetY = parseInt(iOffset.value, 10);
        textHeight = parseInt(iHeight.value, 10);
        bottom = parseInt(iBottom.value, 10);
        vCurve.innerHTML = curve;
        vOffset.innerHTML = offsetY;
        vHeight.innerHTML = textHeight;
        vBottom.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }

            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);
        }
        svgText.ConvertCanvasIntoImageForBridgeSizeChangeOnKit(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth, kitIndex);
    },
    ConvertCanvasIntoImageForBridgeSizeChangeOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, linewidth, kitIndex) {
        var canvas = document.getElementById('demo');
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChangesOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        //svgText.reIndexLayers();
                        svgText.GetCanvasBridgeTextOnColorChangesOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasBridgeSizeChangeOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }
            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object


        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {
                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....


                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////

                    //End....

                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    GetCanvasBowtieSizeChangesOnkit: function (thistextCanvas, layout, newcolor, width, height, textX, textY, strokecolor, strokewidth, CanvasFontFamily, linewidth, kitIndex) {
        var c = document.getElementById("demobowtie");
        var ctx = demobowtie.getContext('2d'),
            font = '105px' + ' ' + CanvasFontFamily,
            w = demobowtie.width,
            h = demobowtie.height,
            curve,
            offsetY,
            bottom,
            textHeight,
            isTri = false,
            dltY,
            angleSteps = 180 / w,
            i = w,
            y,
            os = document.createElement('canvas'),
            octx = os.getContext('2d');
        os.width = w;
        os.height = h;
        octx.font = font;
        octx.textBaseline = 'top';
        octx.textAlign = 'center';
        curve = parseInt(iCurveforBowtie.value, 10);
        offsetY = parseInt(iOffsetforBowtie.value, 10);
        textHeight = parseInt(iHeightforBowtie.value, 10);
        bottom = parseInt(iBottomforBowtie.value, 10);
        vCurveforBowtie.innerHTML = curve;
        vOffsetforBowtie.innerHTML = offsetY;
        vHeightforBowtie.innerHTML = textHeight;
        vBottomforBowtie.innerHTML = bottom;
        if (newcolor != "") {
            octx.fillStyle = newcolor;
        }
        else {
            octx.fillStyle = "white";
        }
        octx.clearRect(0, 0, w, h);
        ctx.clearRect(0, 0, w, h);
        if (strokecolor != "") {
            octx.strokeStyle = strokecolor;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (strokewidth != "") {
            octx.strokeStyle = "Orange"
            octx.lineWidth = strokewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        if (linewidth != 0) {
            octx.lineWidth = linewidth;
            octx.strokeText(thistextCanvas, w * 0.5, 0);
        }
        octx.fillText(thistextCanvas, w * 0.5, 0);
        /// slide and dice
        i = w;
        while (i--) {
            if (isTri) {
                /// bounce delta value mid-way for triangle
                y += dltY;
                if (i === (h * 0.5) | 0) dltY = -dltY;

            } else {
                /// calc length based on radius+angle for curve
                y = bottom - curve * Math.sin(i * angleSteps * Math.PI / 180);
            }
            ctx.drawImage(os, i, 0, 1, textHeight,
                i, h * 0.5 - offsetY / textHeight * y, 1, y);

        }
        svgText.ConvertCanvasIntoImageForBowtieSizeChangeOnKit(thistextCanvas, CanvasFontFamily, layout, width, height, textX, textY, linewidth, kitIndex);
    },
    ConvertCanvasIntoImageForBowtieSizeChangeOnKit: function (textName, fontFmaily, layout, textwidth, textheight, textX, textY, linewidth, kitIndex) {
        var canvas = document.getElementById('demobowtie');
        var trimmedCanvas = svgText.trimCanvasforVertical(canvas);
        dataUrl = trimmedCanvas.toDataURL("image/png");
        var ctx = canvas.getContext("2d");
        imageFoo = document.createElement('img');
        imageFoo.src = dataUrl;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        var currentTextIndex = $("#text_palette_" + kitIndex + svgText.currentView + " " + ".palette_active").data("index")
        svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url = dataUrl;
        var presentView = svgText.currentView;
        var TextNametoDisplay = textName;
        //palette layer
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        $("#paletteLayer" + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#CanvasLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Text: <strong><i>" + TextNametoDisplay + "</i></strong>");
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            if (layout === "verticalarch" || layout === "bowtie" || layout === "pennant") {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var thisTextIndex = svgText.currentLayer;
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var selectedstrokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedstrokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                var linewidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = $(this).val();
                svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, selectedstrokecolor, "", svgText.CanvasfontFmaily, linewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily = $(this).val();
                $("select.font-fam").val($(this).val());
            }
            else {
                thisTextIndex = svgText.currentLayer;
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('Kit calling resizeSvgText 1');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("kit font family changed");
            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                var selectedColor = $(this).attr("data-color");
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        //svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                        svgText.reIndexLayers();
                        svgText.GetCanvasBowtieTextOnColorChangesOnKit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("text color changed");
                });
            });
        });
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        $(".resize-handle").css({ 'opacity': '0' });
                        $(".bbhandles").css({ 'opacity': '0' });
                        $(".bblines ").css({ 'opacity': '0' });
                        $(".resize-handle_kit").css({ 'opacity': '0' });
                        $(".bbhandles_kit").css({ 'opacity': '0' });
                        $(".bblines_kit ").css({ 'opacity': '0' });
                        $(".lds-wrapper-canvas").show();
                        var thisTextIndex = svgText.currentLayer;
                        var strokecolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                        var thisTextIndex = svgText.currentLayer;
                        var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                        var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                        svgText.GetCanvasBowtieTextOnColorChangesOnKit(TextNametoDisplay, layout, selectedtextcolor, width, height, x, y, strokecolor, "", fontFmaily, kitIndex);
                        $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                        $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + selectedcolorcode + "]").addClass("selected");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                    }
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 10) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                if (strokewidth == 0) {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                else {
                    svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                }
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $(".resize-handle").css({ 'opacity': '0' });
                $(".bbhandles").css({ 'opacity': '0' });
                $(".bblines ").css({ 'opacity': '0' });
                $(".resize-handle_kit").css({ 'opacity': '0' });
                $(".bbhandles_kit").css({ 'opacity': '0' });
                $(".bblines_kit ").css({ 'opacity': '0' });
                $(".lds-wrapper-canvas").show();
                var strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
                var thisTextIndex = svgText.currentLayer;
                var newcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
                var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
                var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
                var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
                var thisTextIndex = svgText.currentLayer;
                var selectedtextcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                var selectedcolorcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                svgText.CanvasfontFmaily = "";
                svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                svgText.GetCanvasBowtieSizeChangesOnkit(TextNametoDisplay, layout, newcolor, width, height, x, y, selectedtextcolor, "", svgText.CanvasfontFmaily, strokewidth, kitIndex);
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = strokewidth;

            }
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);

        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.loadKitText(ActiveText, kitIndex);
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    $("#paletteLayer" + svgText.currentView + thisTextIndex).remove();
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();
                    break;

            }
            //End
        });
        var width = $("#layer_svg" + presentView + currentTextIndex).attr("width");
        var height = $("#layer_svg" + presentView + currentTextIndex).attr("height");
        var x = $("#layer_svg" + presentView + currentTextIndex).attr("x");
        var y = $("#layer_svg" + presentView + currentTextIndex).attr("y");
        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0" width="' + textwidth + '" height="' + textheight + '" class="Image' + view_index + '" visibility="hidden"></image></svg>');
        $("#CUSTOM" + svgText.currentView).append($image);
        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }

        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
            //recenter here
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type !== "canvaslayer") {
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            }

            svgText.placeKitTextCentered(kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            Builder.hasChanged("mask panel changed");
        });
        //svg object
        if (textwidth != "" && textheight != "" && textX != "" && textY != "") {
            //svg object
            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {
                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;
                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (textwidth == -1 || textheight == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;

                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = textwidth;
                        var this_height = textheight;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width);
                    this_image.attr('height', this_height);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (textX == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', textX)
                        this_image.attr('y', textY)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....

                }
                svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
                $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
                $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("reindex?");
                });

            });
        }
        else {

            var image_load = $("<img />").attr('src', svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
                if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                    alert('broken image!');
                } else {


                    var aspect_ratio = 100 / this.naturalWidth;
                    var this_nat_width = this.naturalWidth * aspect_ratio;
                    var this_nat_height = this.naturalHeight * aspect_ratio;

                    //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                    //presentView used instead of svgText.currentView becouse of response time 
                    if (svgText.layerKitObjects[presentView][currentTextIndex].width == -1 || svgText.layerKitObjects[presentView][currentTextIndex].height == -1) {
                        var this_width = this_nat_width;
                        var this_height = this_nat_height;
                        svgText.layerKitObjects[presentView][currentTextIndex].width = this_nat_width;
                        svgText.layerKitObjects[presentView][currentTextIndex].height = this_nat_height;
                    }
                    else {
                        var this_width = svgText.layerKitObjects[presentView][currentTextIndex].width;
                        var this_height = svgText.layerKitObjects[presentView][currentTextIndex].height;
                    }
                    var svg = $(".kits.kit_" + kitIndex + " .canvas-wrapper.active .svg svg g[id^='BODY']");
                    var this_image = $image;
                    $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                        Builder.doubleKit = kitIndex;
                        if (kitIndex == 2 || kitIndex == 4) {
                            //  var view = svgText.currentView;
                            var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                            var currentView = view.split('_');
                            presentView = '_' + currentView[1] + '_' + kitIndex;
                            svgText.currentView = presentView;
                            // svgText.currentView = '_Front_' + kitNo;
                        }
                        var thisTextIndex = $(this).attr("data-index");
                        svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    });

                    var image_inner = $('#loaded_image' + view_index);
                    image_inner.attr('width', this_nat_width);
                    image_inner.attr('height', this_nat_height);
                    image_inner.attr("id", "");
                    this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                    this_image.attr('data-orig-w', this_nat_width);
                    this_image.attr('data-orig-h', this_nat_height);
                    var revScale = 1 / svgText.bbScale;
                    // alert(this_width * revScale);
                    this_image.attr('width', this_width * revScale);
                    this_image.attr('height', this_height * revScale);
                    this_image.attr('data-scale-x', 1);
                    this_image.attr('data-scale-y', 1);
                    var container = $(".canvas-wrapper.active > .svg > svg ");
                    if (svgText.layerKitObjects[presentView][currentTextIndex].x == -1) {
                        this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                            .attr('y', ((container.height() * revScale - (this_height)) / 2))

                        svgText.layerKitObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                        svgText.layerKitObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    }
                    else {
                        this_image.attr('x', svgText.layerKitObjects[presentView][currentTextIndex].x)
                        this_image.attr('y', svgText.layerKitObjects[presentView][currentTextIndex].y)
                    }
                    if (currentTextIndex == svgText.currentLayer)
                        svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    //Remove disorted Text.............
                    $(".Image" + svgText.currentView + currentTextIndex).removeAttr("visibility");
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    //svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
                    $(".lds-wrapper-canvas").hide();
                    ////////////////Masking Code//////////////////
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = selectedMaskVal;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
                    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
                        "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
                    //recenter here
                    svgText.placeKitTextCentered(kitIndex);
                    svgText.setKitActiveLayer(currentTextIndex, kitIndex);
                    /////////////////////End////////////////////////
                    //End....

                }
            });
            svgText.pricing.getCustomKitPanelsForSvgKit(kitIndex);
            $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
            $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                Builder.hasChanged("reindex?");
            });
        }

        //document.getElementsByClassName("svg")[0].appendChild(imageFoo);
    },

    //End of Shapes code. ..................................................


    loadFlag: false,
    loadSavedToArray: function (view, results) {
        console.log('svg: loadSavedToArray', view, results);
        try {
            console.log(results[0].width);
        }
        catch (e) { }

        if (typeof results != 'undefined') {
            for (var i = 0; i < results.length; i++) {

                svgText.layerObjects[view].push(results[i])
            }
            //svgText.pricing.getCustomPanels();
        }
    },
    loadSavedData: function (view, results) {
        console.log('svg: loadSavedData', view, results);
        try {
            console.log(results[0].width);
        }
        catch (e) { }

        //var results = data
        for (var i = 0; i < results.length; i++) {
            svgText.loadFlag = true;
            svgText.currentLayer = i;
            if (results[i].type == "textLayer") {
                svgText.loadText(true);
                svgText.placeLoadedSvgText();
            }
            else if (results[i].type == "imageLayer") {
                svgText.loadImage();
            }
            else if (results[i].type == "canvaslayer") {
                svgText.loadCanvasText();
            }
            else if (results[i].type == "logoLayer") {
                svgText.loadSVGLogo();
            }
            svgText.loadFlag = false;
        }
    },
    setView: function (view) {

        //4/3/2019
        sessionStorage.removeItem("CurrentPathOfImage")
        //21/2/2019
        $('.share').hide();

        //28/2/2019
        // IsImagePathGet = false

        console.log('svg: setView', view);

        //11/4/2019
        //   
        // By default remove it ,(Because It go to all views while loadind the product)
        //  $(".main .preview").removeClass("Kit0ForCenterBoundingBox");
        //var ProductnameAndView = Product.sku + view;
        //switch (ProductnameAndView) {
        //    case "SBDUS52_Back":
        //        $(".main .preview").addClass("Kit0ForCenterBoundingBox");
        //        break;
        //    case "SBDUS52_Front":
        //        $(".main .preview").removeClass("Kit0ForCenterBoundingBox");          
        //}
        //11/4/2019

        $('.option-set.content').removeClass('no-zones');
        if (Product.masks[view.substr(1)].length < 1)
            $('.option-set.content').addClass('no-zones');

        svgText.currentView = view;

        $(".palette_view").removeClass("active");
        var editable_area = $("#CUSTOM" + view);

        var len = $(".canvas-wrapper[data-view='" + view + "'] .svg > svg").length;
        //22/5/2019
        //Image cutting issue resolve by param sir for full size svgs
        if (len > 0) {

            var viewbox = $(".canvas-wrapper[data-view='" + view + "'] .svg > svg")[0].getAttribute("viewBox").split(' ');
            var viewboxbackground = $(".canvas-wrapper[data-view='" + view + "'] .svg > svg")[0].getAttribute("enable-background").split(' ');

            svgText.bbScale = $("#boundingbox_holder").height() / viewbox[3];
            //$(".canvas-wrapper[data-view='" + view + "'] .svg > svg").attr("width", viewboxbackground[3] + svgText.bbScale + 'px');
            var calculatedwidth = parseFloat(viewbox[2]) + viewbox[2] * svgText.bbScale;
            $(".canvas-wrapper[data-view='" + view + "'] .svg > svg").attr("width", calculatedwidth + 'px');


            var offset_y = (($("#boundingbox_holder").height() - viewbox[3]) / 2);
            var offset_x = 0;//($(".canvas-wrapper[data-view='"+view+"'] .svg").width() - $(".canvas-wrapper[data-view='"+view+"'] .svg > svg").width())/2 ;
            $("#boundingbox_holder").css({ 'margin': '0 0 0 ' + offset_x + 'px', 'width': viewbox[2] * svgText.bbScale, 'height': viewbox[3] * svgText.bbScale });
            //$("#boundingbox_holder").css({ 'margin': '0 0 0 ' + offset_x + 'px', 'width': viewboxbackground[3] + 'px', 'height': viewbox[3] * svgText.bbScale });
        }

        //if (len > 0) {

        //    var viewbox = $(".canvas-wrapper[data-view='" + view + "'] .svg > svg")[0].getAttribute("viewBox").split(' ');

        //    svgText.bbScale = $("#boundingbox_holder").height() / viewbox[3];

        //    $(".canvas-wrapper[data-view='" + view + "'] .svg > svg").attr("width", viewbox[2] * svgText.bbScale);

        //    var offset_y = (($("#boundingbox_holder").height() - viewbox[3]) / 2);
        //    var offset_x = 0;//($(".canvas-wrapper[data-view='"+view+"'] .svg").width() - $(".canvas-wrapper[data-view='"+view+"'] .svg > svg").width())/2 ;
        //    $("#boundingbox_holder").css({ 'margin': '0 0 0 ' + offset_x + 'px', 'width': viewbox[2] * svgText.bbScale, 'height': viewbox[3] * svgText.bbScale });
        //}
        //load stuff after the bb + canvas is is prepared

        if (!$("#text_palette" + view).hasClass("loaded")) svgText.loadSavedData(view, svgText.layerObjects[view]);

        $("#text_palette" + view).addClass("active").addClass("loaded");
        //$(".main .product-title").css("display", "block")
    },
    layerComponents: { //LOAD THESE AFTER "setActiveLayer" HAS BEEN CALLED. 
        //console.log('svg: layerComponents');

        deleteButton: function (newLayer) {
            newLayer.find(".delete").click(function (e) {
                e.stopPropagation();
                var thisTextIndex = $(this).parent().attr("data-index");
                svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.clearActiveLayer();
                $(this).parent().remove();
                svgText.reIndexLayers();
                svgText.pricing.getCustomPanels();
                svgText.pricing.getCustomPanelsForCanvasSvg();
                Builder.hasChanged("delete button clicked");
            });
        },
        KitdeleteButton: function (newLayer, kitNo) {
            newLayer.find(".delete").click(function (e) {
                console.log('KitdeleteButton:Remove Text Image and Image etc from svg in kit section')
                e.stopPropagation();
                //30/7/19
                //Important--delete ,text ,logo and images on OPTION 3 (Kit 2 and kit 4)
                //Start
                if (kitNo == 2) {
                    CurrentView = svgText.currentView;
                    switch (CurrentView) {
                        case "_Front":
                            svgText.currentView = "_Front_2";
                            break;
                        case "_Back":
                            svgText.currentView = "_Back_2";
                            break;
                        case "_Left":
                            svgText.currentView = "_Left_2";
                            break;
                        case "_Right":
                            svgText.currentView = "_Right_2";
                            break;
                        case "_Front_4":
                            svgText.currentView = "_Front_2";
                            break;
                        case "_Back_4":
                            svgText.currentView = "_Back_2";
                            break;
                        case "_Left_4":
                            svgText.currentView = "_Left_2";
                            break;
                        case "_Right_4":
                            svgText.currentView = "_Right_2";
                            break;
                        default:
                            console.log("Current View=" + CurrentView)
                    }
                }
                if (kitNo == 4) {
                    CurrentView = svgText.currentView;
                    switch (CurrentView) {
                        case "_Front":
                            svgText.currentView = "_Front_4";
                            break;
                        case "_Back":
                            svgText.currentView = "_Back_4";
                            break;
                        case "_Left":
                            svgText.currentView = "_Left_4";
                            break;
                        case "_Right":
                            svgText.currentView = "_Right_4";
                            break;
                        case "_Front_2":
                            svgText.currentView = "_Front_4";
                            break;
                        case "_Back_2":
                            svgText.currentView = "_Back_4";
                            break;
                        case "_Left_2":
                            svgText.currentView = "_Left_4";
                            break;
                        case "_Right_2":
                            svgText.currentView = "_Right_4";
                            break;
                        default:
                            console.log("Current View=" + CurrentView)
                    }
                }
                //Start
                var kitCount = svgText.currentView.split("_").length - 1
                if (kitCount < 2) {
                    svgText.currentView = svgText.currentView + "_" + kitNo;
                }
                var thisTextIndex = $(this).parent().attr("data-index");
                svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                svgText.clearKitActiveLayer(kitNo);
                $(this).parent().remove();
                svgText.reIndexKitLayers(kitNo);
                svgText.pricing.getCustomKitPanels(kitNo);
                Builder.hasChanged("Kit delete button clicked");
            });
        },
        moveUpButton: function (newLayer) {
            newLayer.find(".move_up").click(function (e) {
                e.stopPropagation();
                var thisTextIndex = parseFloat($(this).parent().attr("data-index"));
                //move element up one step
                var $tl = $("#paletteLayer" + svgText.currentView + thisTextIndex);
                if ($tl.is(':not(:first-child)')) {
                    $tl.prev().before($tl);
                    $('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')').next().after($('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')'));
                    //$("#layer_svg"+svgText.currentView +thisTextIndex).next().after($("#layer_svg"+svgText.currentView +thisTextIndex));
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex + 1, 0, svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)[0]);
                    svgText.reIndexLayers();
                    if (svgText.currentLayer != -1) svgText.setActiveLayer(thisTextIndex + 1);
                }
                Builder.hasChanged("move up clicked");
            });
        },
        KitmoveUpButton: function (newLayer, kitNo) {
            newLayer.find(".move_up").click(function (e) {
                e.stopPropagation();
                var thisTextIndex = parseFloat($(this).parent().attr("data-index"));
                //move element up one step
                var $tl = $("#paletteLayer" + svgText.currentView + thisTextIndex);
                if ($tl.is(':not(:first-child)')) {
                    $tl.prev().before($tl);
                    $('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')').next().after($('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')'));
                    //$("#layer_svg"+svgText.currentView +thisTextIndex).next().after($("#layer_svg"+svgText.currentView +thisTextIndex));
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex + 1, 0, svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)[0]);
                    svgText.reIndexKitLayers(kitNo);
                    if (svgText.currentLayer != -1) svgText.setKitActiveLayer(thisTextIndex + 1);
                }
                Builder.hasChanged("Kit move up clicked");
            });
        },
        moveDownButton: function (newLayer) {
            newLayer.find(".move_down").click(function (e) {
                e.stopPropagation();
                var thisTextIndex = parseFloat($(this).parent().attr("data-index"));
                //move element up one step
                var $tl = $("#paletteLayer" + svgText.currentView + thisTextIndex);
                if ($tl.is(':not(:last-child)')) {
                    $tl.next().after($tl);
                    $('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')').prev().before($('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')'));
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex - 1, 0, svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)[0]);
                    svgText.reIndexLayers();
                    if (svgText.currentLayer != -1) svgText.setActiveLayer(thisTextIndex - 1);
                }
                Builder.hasChanged("move down clicked");
            });
        },
        KitmoveDownButton: function (newLayer, kitNo) {
            newLayer.find(".move_down").click(function (e) {
                e.stopPropagation();
                var thisTextIndex = parseFloat($(this).parent().attr("data-index"));
                //move element up one step
                var $tl = $("#paletteLayer" + svgText.currentView + thisTextIndex);
                if ($tl.is(':not(:last-child)')) {
                    $tl.next().after($tl);
                    $('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')').prev().before($('#CUSTOM' + svgText.currentView + '>g:eq(' + thisTextIndex + ')'));
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex - 1, 0, svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)[0]);
                    svgText.reIndexKitLayers(kitNo);
                    if (svgText.currentLayer != -1) svgText.setKitActiveLayer(thisTextIndex - 1);
                }
                Builder.hasChanged("Kit move down clicked");
            });
        },
        flipArtButton: function (newLayer) {
            var thisTextIndex = svgText.currentLayer;
            newLayer.find(".art-flip").prop('checked', svgText.layerObjects[svgText.currentView][thisTextIndex].flip);

            newLayer.find(".art-flip").change(function (e) {
                var flip = $(this).prop('checked');
                e.stopPropagation();
                if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                    $("#layer_svg" + svgText.currentView + thisTextIndex).attr("data-flip", flip);
                    if (flip) $("#layer_svg" + svgText.currentView + thisTextIndex + " >g").attr('transform', 'translate(168, 0) scale(-1 1)');
                    else $("#layer_svg" + svgText.currentView + thisTextIndex + " >g").removeAttr('transform');
                    svgText.layerObjects[svgText.currentView][thisTextIndex].flip = flip;
                }
                Builder.hasChanged("art flip");
            });
        },
        KitflipArtButton: function (newLayer) {
            console.log(svgText.layerKitObjects);
            console.log(svgText.currentView);

            var thisTextIndex = svgText.currentLayer;
            newLayer.find(".art-flip").prop('checked', svgText.layerKitObjects[svgText.currentView][thisTextIndex].flip);

            newLayer.find(".art-flip").change(function (e) {
                var flip = $(this).prop('checked');
                e.stopPropagation();
                if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                    $("#layer_svg" + svgText.currentView + thisTextIndex).attr("data-flip", flip);
                    if (flip) $("#layer_svg" + svgText.currentView + thisTextIndex + " >g").attr('transform', 'translate(168, 0) scale(-1 1)');
                    else $("#layer_svg" + svgText.currentView + thisTextIndex + " >g").removeAttr('transform');
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].flip = flip;
                }
                Builder.hasChanged("Kit art flip");
            });
        },
        rotationSlider: function (newLayer) {
            // rotation stuff

            var thisTextIndex = svgText.currentLayer;
            noUiSlider.create(newLayer.find(".rotation-slider")[0], {
                start: svgText.layerObjects[svgText.currentView][thisTextIndex].rotation, step: 10, range: {
                    'min': -180,
                    'max': 180
                },
                format: {
                    'to': function (value) {
                        return Math.round(value);
                    },
                    'from': Number
                }
            });
            newLayer.find(".rotation-slider")[0].noUiSlider.on('update', function (values) {
                var thisTextIndex = svgText.currentLayer;
                if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                    var thisViewBox = $("#layer_svg" + svgText.currentView + thisTextIndex)[0].getAttribute("viewBox").split(' ');
                    var offset_x = $("#layer_svg" + svgText.currentView + thisTextIndex).attr('data-orig-w') / 2 + parseFloat(thisViewBox[0]);
                    var offset_y = $("#layer_svg" + svgText.currentView + thisTextIndex).attr('data-orig-h') / 2 + parseFloat(thisViewBox[1]);
                    $("#layer_svg" + svgText.currentView + thisTextIndex).attr("data-rotation", values[0]);
                    if (svgText.layerObjects[svgText.currentView][thisTextIndex].type == "imageLayer") {
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " image").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                        //localStorage.clear();
                        //localStorage.setItem("offset_image_change", offset_x);
                        //localStorage.setItem("offset_image_change", offset_y);
                    }

                    else if (svgText.layerObjects[svgText.currentView][thisTextIndex].type == "canvaslayer") {
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " image").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                    }
                    else if (svgText.layerObjects[svgText.currentView][thisTextIndex].type == "logoLayer") {
                        localStorage.removeItem('offset_logox_change');
                        localStorage.removeItem('offset_logoy_change');
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " >g>g").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                        localStorage.setItem("offset_logox_change", offset_x);
                        localStorage.setItem("offset_logoy_change", offset_y);
                    }
                    else {
                        //var svg_target_BoundingBox = $("#layer_svg" + svgText.currentView + thisTextIndex);
                        localStorage.removeItem('offset_x_change');
                        localStorage.removeItem('offset_y_change');
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " g[data-type='rotategroup']").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');

                        //$("#boundingbox").attr('style', '').css({ 'width': svg_target_BoundingBox.attr('width') * svgText.bbScale + 'px', 'height': svg_target_BoundingBox.attr('height') * svgText.bbScale + 'px' }).attr('data-x', svg_target_BoundingBox.attr('x') * svgText.bbScale).attr('data-y', svg_target_BoundingBox.attr('y') * svgText.bbScale).attr('transform', 'rotate(' + values[0] + ')');
                        //$("#boundingbox").css({ 'transform': 'rotate(' + values[0] + ')' });

                        localStorage.setItem("offset_x_change", offset_x);
                        localStorage.setItem("offset_y_change", offset_y);
                    }

                    svgText.layerObjects[svgText.currentView][thisTextIndex].rotation = values[0];
                    Builder.hasChanged("rotaiton slider slid");
                }
            });
            newLayer.find(".rotation-slider")[0].ondblclick = function () {
                this.noUiSlider.set(0);
                Builder.hasChanged("rotation slider reset");
            }
        },
        KitrotationSlider: function (newLayer) {
            // rotation stuff

            var thisTextIndex = svgText.currentLayer;
            noUiSlider.create(newLayer.find(".rotation-slider")[0], {
                start: svgText.layerKitObjects[svgText.currentView][thisTextIndex].rotation, step: 10, range: {
                    'min': -180,
                    'max': 180
                },
                format: {
                    'to': function (value) {
                        return Math.round(value);
                    },
                    'from': Number
                }
            });
            newLayer.find(".rotation-slider")[0].noUiSlider.on('update', function (values) {

                var thisTextIndex = svgText.currentLayer;
                if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                    var thisViewBox = $("#layer_svg" + svgText.currentView + thisTextIndex)[0].getAttribute("viewBox").split(' ');
                    var offset_x = $("#layer_svg" + svgText.currentView + thisTextIndex).attr('data-orig-w') / 2 + parseFloat(thisViewBox[0]);
                    var offset_y = $("#layer_svg" + svgText.currentView + thisTextIndex).attr('data-orig-h') / 2 + parseFloat(thisViewBox[1]);
                    $("#layer_svg" + svgText.currentView + thisTextIndex).attr("data-rotation", values[0]);
                    if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type == "imageLayer") {
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " image").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                    }
                    else if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type == "logoLayer") {
                        localStorage.removeItem('offset_logox_change_kit');
                        localStorage.removeItem('offset_logoy_change_kit');
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " >g>g").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                        localStorage.setItem("offset_logox_change_kit", offset_x);
                        localStorage.setItem("offset_logoy_change_kit", offset_y);
                    }
                    else if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].type == "canvaslayer") {
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " image").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                    }
                    else {
                        localStorage.removeItem('offset_x_change_kit');
                        localStorage.removeItem('offset_y_change_kit');
                        $("#layer_svg" + svgText.currentView + thisTextIndex + " g[data-type='rotategroup']").attr('transform', 'rotate(' + values[0] + ' ' + offset_x + ' ' + offset_y + ')');
                        localStorage.setItem("offset_x_change_kit", offset_x);
                        localStorage.setItem("offset_y_change_kit", offset_y);
                    }

                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].rotation = values[0];
                    Builder.hasChanged("Kit rotaiton slider slid");
                }
            });
            newLayer.find(".rotation-slider")[0].ondblclick = function () {
                this.noUiSlider.set(0);
                Builder.hasChanged("Kit rotation slider reset");
            }
        },
        opacitySlider: function (newLayer) {
            // // opacity stuff
            var thisTextIndex = svgText.currentLayer;
            noUiSlider.create(newLayer.find(".opacity-slider")[0], {
                start: svgText.layerObjects[svgText.currentView][thisTextIndex].opacity, connect: "lower", range: {
                    'min': 0,
                    'max': 1
                }
            });
            newLayer.find(".opacity-slider")[0].noUiSlider.on('update', function (values) {
                var thisTextIndex = svgText.currentLayer;
                if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0)
                    $("#layer_svg" + svgText.currentView + thisTextIndex).css({ 'opacity': values[0] });
                Builder.hasChanged("opacity slider slid");
                svgText.layerObjects[svgText.currentView][thisTextIndex].opacity = values[0];
            });
            newLayer.find(".opacity-slider")[0].ondblclick = function () {
                this.noUiSlider.set(1);
                Builder.hasChanged("opacity slider reset");
            }
        },
        KitopacitySlider: function (newLayer) {
            // // opacity stuff
            var thisTextIndex = svgText.currentLayer;
            noUiSlider.create(newLayer.find(".opacity-slider")[0], {
                start: svgText.layerKitObjects[svgText.currentView][thisTextIndex].opacity, connect: "lower", range: {
                    'min': 0,
                    'max': 1
                }
            });
            newLayer.find(".opacity-slider")[0].noUiSlider.on('update', function (values) {
                var thisTextIndex = svgText.currentLayer;
                if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0)
                    $("#layer_svg" + svgText.currentView + thisTextIndex).css({ 'opacity': values[0] });
                Builder.hasChanged("opacity slider slid");
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].opacity = values[0];
            });
            newLayer.find(".opacity-slider")[0].ondblclick = function () {
                this.noUiSlider.set(1);
                Builder.hasChanged("opacity slider reset");
            }
        }
    },
    makeNewImage: function (image_url) {
        //25/4/2019
        //Apply art on shorts Sleeves for full size product
        //if (Product.ApplyArtOnShortsSleeves) { 
        //    $("#boundingbox_holder").attr('style', 'max-width: 450px !important;width: 100% !important;');
        //}        
        console.log('svg: makeNewImage');
        //image creation is rolled into a single function because they don't need to be recreated on the fly like the text objects 
        //var image_url = '../images/Bulldog.png';
        svgText.currentLayer = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'imageLayer',
            x: -1,
            y: -1,
            image_url: image_url,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });
        svgText.loadImage();
        Builder.hasChanged("make new image");
    },
    makeNewKitImage: function (image_url, kitIndex) {
        console.log('svg:Kit makeNewImage');

        var kitNo = -1;
        ///Added for option 3 bottom
        if (kitIndex == 'undefined') {
            kitNo = $('.kit span.active').attr('data-count');
        }
        else {
            kitNo = kitIndex;
        }
        //9/2/2019
        //Important--If Kit no is 2 then and if kit No 4 then,Is also resolve also Image loading issue 
        if (kitIndex == 2) {
            svgText.currentView = "_Front_2";
        }
        //9/2/2019
        //Important--If Kit no is 2 then and if kit No 4 then,Is also resolve also Image loading issue 
        if (kitIndex == 4) {
            svgText.currentView = "_Front_4";
        }
        //var kitNo = $('.kit span.active').attr('data-count');
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitNo;
        }
        svgText.currentLayer = svgText.layerKitObjects[svgText.currentView].length;
        svgText.layerKitObjects[svgText.currentView].push({
            type: 'imageLayer',
            x: -1,
            y: -1,
            image_url: image_url,
            width: -1,
            height: -1,
            rotation: 0,
            opacity: 1,
            mask: ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].name,
            mask_name: ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].display
            // mask: Product.masks[svgText.currentView.substr(1)][0].name
        });
        svgText.loadKitImage(kitNo);
        Builder.hasChanged("make new kit image");
    },
    loadImage: function () {
        //21/2/2019
        $('.share').hide();

        //28/2/2019
        //IsImagePathGet = false

        console.log('svg: loadImage');
        var currentTextIndex = svgText.currentLayer;
        var presentView = svgText.currentView;
        var imageNameAr = svgText.layerObjects[svgText.currentView][currentTextIndex].image_url.split("/");
        //palette layer
        $("#text_palette" + svgText.currentView).prepend($("#imageLayerTemplate").html().replace(/paletteLayerImageIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Image: <strong><i>" + imageNameAr[imageNameAr.length - 1] + "</i></strong>");

        svgText.setActiveLayer(currentTextIndex);

        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0"></image></svg>');

        $("#CUSTOM" + svgText.currentView).append($image);

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
			"url(#mask-" + mask + svgText.currentView + ")");

        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });

        //svg object
        var image_load = $("<img />").attr('src', svgText.layerObjects[svgText.currentView][currentTextIndex].image_url).on('load', function () {
            if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                alert('broken image!');
            } else {


                var aspect_ratio = 100 / this.naturalWidth;
                var this_nat_width = this.naturalWidth * aspect_ratio;
                var this_nat_height = this.naturalHeight * aspect_ratio;

                //if (svgText.layerObjects[svgText.currentView][currentTextIndex].width == -1 || svgText.layerObjects[svgText.currentView][currentTextIndex].height == -1) {
                //presentView used instead of svgText.currentView becouse of response time 
                if (svgText.layerObjects[presentView][currentTextIndex].width == -1 || svgText.layerObjects[presentView][currentTextIndex].height == -1) {
                    var this_width = this_nat_width;
                    var this_height = this_nat_height;

                    svgText.layerObjects[presentView][currentTextIndex].width = this_nat_width;
                    svgText.layerObjects[presentView][currentTextIndex].height = this_nat_height;
                }
                else {
                    var this_width = svgText.layerObjects[presentView][currentTextIndex].width;
                    var this_height = svgText.layerObjects[presentView][currentTextIndex].height;
                }
                var svg = $(".canvas-wrapper.active .svg svg g[id^='BODY']");

                var this_image = $image;
                $("#paletteLayer" + presentView + currentTextIndex + ", #layer_svg" + presentView + currentTextIndex).click(function (e) {
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setActiveLayer(thisTextIndex);
                });

                var image_inner = $('#loaded_image' + view_index);
                image_inner.attr('width', this_nat_width);
                image_inner.attr('height', this_nat_height);
                image_inner.attr("id", "");
                this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                this_image.attr('data-orig-w', this_nat_width);
                this_image.attr('data-orig-h', this_nat_height);
                var revScale = 1 / svgText.bbScale;
                // alert(this_width * revScale);
                this_image.attr('width', this_width * revScale);
                this_image.attr('height', this_height * revScale);
                this_image.attr('data-scale-x', 1);
                this_image.attr('data-scale-y', 1);
                var container = $(".canvas-wrapper.active > .svg > svg ");
                if (svgText.layerObjects[presentView][currentTextIndex].x == -1) {
                    //23/5/2019
                    //Set Browse Image Width
                    var CurrentView = $(".preview-nav a.active").attr('data-view')
                    var ViewBox = $(".canvas-wrapper[data-view='" + CurrentView + "'] .svg > svg")[0].getAttribute("viewBox").split(' ');
                    var Width = container.width() - ViewBox[2];
                    this_image.attr('x', ((Width * revScale - (this_width)) / 2))
                           .attr('y', ((container.height() * revScale - (this_height)) / 2))
                    //this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
                    //		.attr('y', ((container.height() * revScale - (this_height)) / 2))
                    svgText.layerObjects[presentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                    svgText.layerObjects[presentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    // Important-Hide loader while uploading Browse image in Artwork

                    //4/3/2019
                    //sessionStorage.setItem("CurrentPathOfImage", Builder.svgtopng);
                    $(".lds-wrapper").hide();

                }
                else {
                    this_image.attr('x', svgText.layerObjects[presentView][currentTextIndex].x)
                    this_image.attr('y', svgText.layerObjects[presentView][currentTextIndex].y)
                }
                if (currentTextIndex == svgText.currentLayer)
                    svgText.setActiveLayer(currentTextIndex);
            }
        });
        Builder.hasChanged("load image");
    },

    //Canvas Load Text

    //End
    loadKitImage: function (kitNo) {
        //21/2/2019
        $('.share').hide();

        //28/2/2019
        //IsImagePathGet = false

        console.log('svg:kit loadImage');

        var currentTextIndex = svgText.currentLayer;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitNo;
        }
        var imageNameAr = svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url.split("/");
        //palette layer
        $("#text_palette_" + kitNo + svgText.currentView).prepend($("#imageLayerTemplate").html().replace(/paletteLayerImageIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var view_index = svgText.currentView + currentTextIndex;
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Image: <strong><i>" + imageNameAr[imageNameAr.length - 1] + "</i></strong>");

        svgText.setKitActiveLayer(currentTextIndex, kitNo);

        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitNo);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitNo);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitNo);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var $image = $('<svg id="layer_svg' + view_index + '" class="svgEmbedded svgEmbeddedImage" viewBox="0 0 100 100" preserveAspectRatio="none" data-index="' + currentTextIndex + '"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' + svgText.layerKitObjects[svgText.currentView][currentTextIndex].image_url + '" id="loaded_image' + view_index + '" x="0" y="0"></image></svg>');

        $("#CUSTOM" + svgText.currentView).append($image);

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById($image.parent().attr('id')).appendChild(nn);
        $image.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = ProductKit['kit_' + kitNo].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
			"url(#mask-" + mask + svgText.currentView + ")");

        var newImgOptionsMaskSelect = newLayer.find('.mask-panel');

        //$(Product.masks[svgText.currentView.substr(1)]).each(function () {
        $(ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
            //console.log(this);
            $(newImgOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newImgOptionsMaskSelect.change(function (e) {

            //console.log('svg: newImgOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            //recenter here
            svgText.placeKitTextCentered(kitNo);
            svgText.setKitActiveLayer(thisTextIndex, kitNo);

            svgText.pricing.getCustomKitPanels(kitNo);
            Builder.hasChanged("kit mask panel changed");
        });

        //svg object
        // var currentImgIndex = currentTextIndex;

        svgText.kitImageLoad(svgText.currentView, currentTextIndex, kitNo, $image, view_index);
        Builder.hasChanged("kit load image");
    },
    kitImageLoad: function (cView, currentImgIndex, kitNo, $image, view_index) {
        var image_load = $("<img />").attr('src', svgText.layerKitObjects[cView][currentImgIndex].image_url).on('load', function () {
            if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                alert('broken image!');
            } else {

                var aspect_ratio = 100 / this.naturalWidth;
                var this_nat_width = this.naturalWidth * aspect_ratio;
                var this_nat_height = this.naturalHeight * aspect_ratio;
                //alert(svgText.currentView);
                var kitCount = cView.split("_").length - 1
                if (kitCount < 2) {
                    cView = cView + "_" + kitNo;
                }
                console.log('svgText.currentView', svgText.currentView);
                console.log('currentTextIndex', currentImgIndex);
                console.log('svgText.currentLayer', svgText.currentLayer);
                console.log('svgText.layerKitObjects', svgText.layerKitObjects);
                if (svgText.layerKitObjects[cView][currentImgIndex].width == -1 || svgText.layerKitObjects[cView][currentImgIndex].height == -1) {
                    var this_width = this_nat_width;
                    var this_height = this_nat_height;

                    svgText.layerKitObjects[cView][currentImgIndex].width = this_nat_width;
                    svgText.layerKitObjects[cView][currentImgIndex].height = this_nat_height;
                }
                else {
                    var this_width = svgText.layerKitObjects[cView][currentImgIndex].width;
                    var this_height = svgText.layerKitObjects[cView][currentImgIndex].height;
                }
                var svg = $(".kits.kit_" + kitNo + " .canvas-wrapper.active .svg svg g[id^='BODY']");

                var this_image = $image;
                $("#paletteLayer" + cView + currentImgIndex + ", #layer_svg" + cView + currentImgIndex).click(function (e) {
                    Builder.doubleKit = kitNo;
                    if (kitNo == 2 || kitNo == 4) {
                        //  var view = svgText.currentView;

                        var view = $('.preview-nav.kit_' + kitNo + ' a.active').attr('data-view');
                        var currentView = view.split('_');
                        cView = '_' + currentView[1] + '_' + kitNo;
                        svgText.currentView = cView;
                        // svgText.currentView = '_Front_' + kitNo;
                    }
                    var thisTextIndex = $(this).attr("data-index");
                    svgText.setKitActiveLayer(thisTextIndex, kitNo);
                });

                var image_inner = $('#loaded_image' + view_index);

                image_inner.attr('width', this_nat_width);
                image_inner.attr('height', this_nat_height);
                image_inner.attr("id", "");
                this_image.attr('viewBox', '0 0 ' + this_nat_width + ' ' + this_nat_height);
                this_image.attr('data-orig-w', this_nat_width);
                this_image.attr('data-orig-h', this_nat_height);
                var revScale = 1 / svgText.bbScale;//KitScale['kit_' + kitNo] //svgText.bbScale;

                this_image.attr('width', this_width * revScale);
                this_image.attr('height', this_height * revScale);
                this_image.attr('data-scale-x', 1);
                this_image.attr('data-scale-y', 1);
                var container = $(".kits.kit_" + kitNo + " .canvas-wrapper.active > .svg > svg ");
                if (svgText.layerKitObjects[cView][currentImgIndex].x == -1) {
                    this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
							.attr('y', ((container.height() * revScale - (this_height)) / 2))

                    svgText.layerKitObjects[cView][currentImgIndex].x = ((container.width() * revScale - (this_width)) / 2);
                    svgText.layerKitObjects[cView][currentImgIndex].y = ((container.height() * revScale - (this_height)) / 2);
                    // Important--Hide loader while uploading Browse image in Artwork
                    $(".lds-wrapper").hide();
                }
                else {
                    this_image.attr('x', svgText.layerKitObjects[cView][currentImgIndex].x)
                    this_image.attr('y', svgText.layerKitObjects[cView][currentImgIndex].y)
                }
                if (currentImgIndex == svgText.currentLayer)
                    svgText.currentView = cView;
                svgText.currentView = cView;
                svgText.setKitActiveLayer(currentImgIndex, kitNo);
                console.log('xy ', svgText.layerKitObjects[cView][currentImgIndex]);
            }
        });
    },

    addSVGLogo: function (svgObjectFromList, logoTitle) {
        //21/2/2019
        $('.share').hide();
        //25/4/2019
        //Apply art on shorts Sleeves for full size product
        //if (Product.ApplyArtOnShortsSleeves) {
        //    $("#boundingbox_holder").attr('style', 'max-width: 450px !important;width: 100% !important;');
        //}

        console.log('svg: addSVGLogo');
        var numColors = 1;
        if (logoTitle.match(/^2\//)) numColors = 2;
        if (logoTitle.match(/^3\//)) numColors = 3;
        //image creation is rolled into a single function because they don't need to be recreated on the fly like the text objects 
        console.log(svgText.layerObjects[svgText.currentView]);
        svgText.currentLayer = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'logoLayer',
            logo_id: logoTitle,
            x: -1,
            y: -1,
            width: -1,
            height: -1,
            rotation: 0,
            flip: false,
            opacity: 1,
            area1color: "#000000",
            area1code: "BK",
            area2color: numColors < 2 ? null : (Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff'),
            area2code: numColors < 2 ? null : (Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH'),
            area3color: numColors < 3 ? null : (Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff'),
            area3code: numColors < 3 ? null : (Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH'),
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });
        svgText.loadSVGLogo();
    },
    addKitSVGLogo: function (svgObjectFromList, logoTitle) {
        //21/2/2019
        $('.share').hide();
        //28/2/2019
        //IsImagePathGet = false

        var kitNo = $('.kit span.active').attr('data-count');
        if (Builder.doubleKit == 4) {
            kitNo = 4;
        }
        console.log('svg: addKitSVGLogo');
        var numColors = 1;
        if (logoTitle.match(/^2\//)) numColors = 2;
        if (logoTitle.match(/^3\//)) numColors = 3;

        //image creation is rolled into a single function because they don't need to be recreated on the fly like the text objects 

        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitNo;
        }

        svgText.currentLayer = svgText.layerKitObjects[svgText.currentView].length;
        svgText.layerKitObjects[svgText.currentView].push({
            type: 'logoLayer',
            logo_id: logoTitle,
            x: -1,
            y: -1,
            width: -1,
            height: -1,
            rotation: 0,
            flip: false,
            opacity: 1,
            area1color: "#000000",
            area1code: "BK",
            area2color: numColors < 2 ? null : (Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff'),
            area2code: numColors < 2 ? null : (Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH'),
            area3color: numColors < 3 ? null : (Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff'),
            area3code: numColors < 3 ? null : (Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH'),
            //mask: Product.masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length-2)][0].name
            mask: ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].name,
            mask_name: ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].display
        });
        svgText.loadKitSVGLogo(kitNo);
        if (kitNo === 4) {
            $('#boundingbox_holder_kit').css("display", "block");
        }
    },
    loadSVGLogo: function () {
        console.log('svg: loadSVGLogo');
        var currentTextIndex = svgText.currentLayer;
        var currentView = svgText.currentView;

        var logoTitle = svgText.layerObjects[currentView][currentTextIndex].logo_id;
        var logoSVG = $('.logos li[data-svg="' + logoTitle + '"] div').html();
        logoSVG = '<svg id="load_svg' + currentView + currentTextIndex + '" data-index="' + currentTextIndex + '" overflow="visible"></svg>';

        $("#CUSTOM" + currentView).append(logoSVG); //append placeholder, then load
        var this_loader = $("#load_svg" + currentView + currentTextIndex);

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById(this_loader.parent().attr('id')).appendChild(nn);
        this_loader.appendTo(nn);
        nn.id = 'layer_g' + currentView + currentTextIndex;

        var mask = svgText.layerObjects[currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
			"url(#mask-" + mask + currentView + ")");

        $.get("../svg/stock_logos/" + logoTitle + ".svg", function (data) {

            var svgClone = $($(data).children("svg")[0]).clone();
            var svgCloneChildren = svgClone.children().remove();
            var g = svgClone.append("<g data-type='flipgroup'></g>");
            svgClone.children('g:eq(0)').append(svgCloneChildren);
            var svg = $('<div>').append(svgClone).html();
            svg = svg.replace("<svg", '<svg id="layer_svg' + currentView + currentTextIndex + '" data-index="' + currentTextIndex + '" overflow="visible"');
            $('#load_svg' + currentView + currentTextIndex).after(svg);
            $('#load_svg' + currentView + currentTextIndex).remove();
            var this_image = $("#layer_svg" + currentView + currentTextIndex);
            var this_width = svgText.layerObjects[currentView][currentTextIndex].width;
            var this_height = svgText.layerObjects[currentView][currentTextIndex].height;
            var widthCheck = 0;
            if (this_width == -1) {
                widthCheck = -1;
                this_width = 100;
                this_height = 100;

                svgText.layerObjects[currentView][currentTextIndex].width = this_width;
                svgText.layerObjects[currentView][currentTextIndex].height = this_height;
            }
            var revScale = 1 / svgText.bbScale;
            this_image.attr('data-orig-w', 100);//always 100? 
            this_image.attr('data-orig-h', 100);//always 100? 
            if (widthCheck == -1) {
                this_image.attr('width', this_width * revScale);
                this_image.attr('height', this_height * revScale);
            }
            else {
                this_image.attr('width', this_width);
                this_image.attr('height', this_height);
            }
            this_image.attr('data-scale-x', 1);
            this_image.attr('data-scale-y', 1);
            var container = $(".canvas-wrapper.active > .svg > svg ");
            if (svgText.layerObjects[currentView][currentTextIndex].x == -1) {
                this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
						.attr('y', ((container.height() * revScale - (this_height)) / 2))

                svgText.layerObjects[currentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                svgText.layerObjects[currentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
            }
            else {
                this_image.attr('x', svgText.layerObjects[currentView][currentTextIndex].x)
                this_image.attr('y', svgText.layerObjects[currentView][currentTextIndex].y)
            }
            $("#layer_svg" + currentView + currentTextIndex).click(function (e) {
                var thisTextIndex = $(this).attr("data-index");
                svgText.setActiveLayer(thisTextIndex);
            });
            if (currentTextIndex == svgText.currentLayer)
                svgText.setActiveLayer(currentTextIndex);

            //console.log('svg: logoSVG', $("#layer_svg"+currentView + currentTextIndex ));
            if ($("#AREA_1", $("#layer_svg" + currentView + currentTextIndex)).length <= 0) {
                newLayer.find("div.background").hide();
            } else {
                // apply area1 color svgText.layerObjects[currentView][currentTextIndex]
                $("#layer_svg" + currentView + currentTextIndex).find('*[id="AREA_1"] path').each(function () {
                    $(this)[0].style.fill = svgText.layerObjects[currentView][currentTextIndex].area1color;
                    $(this)[0].style.stroke = svgText.layerObjects[currentView][currentTextIndex].area1color;

                })
            }
            if ($("#AREA_2", $("#layer_svg" + currentView + currentTextIndex)).length <= 0) {
                newLayer.find("div.detail").hide();
            } else {
                // apply area2 color
                $("#layer_svg" + currentView + currentTextIndex).find('*[id="AREA_2"] path').each(function () {
                    $(this)[0].style.fill = svgText.layerObjects[currentView][currentTextIndex].area2color;
                    $(this)[0].style.stroke = svgText.layerObjects[currentView][currentTextIndex].area2color;

                })
            }
            if ($("#AREA_3", $("#layer_svg" + currentView + currentTextIndex)).length <= 0) {
                newLayer.find("div.outline").hide();
            } else {
                //apply area3 color

                $("#layer_svg" + currentView + currentTextIndex).find('*[id="AREA_3"] path').each(function () {

                    //console.log('svg: svg stuff', svgText.layerObjects[currentView][currentTextIndex].area3color);

                    $(this)[0].style.fill = svgText.layerObjects[currentView][currentTextIndex].area3color;
                    $(this)[0].style.stroke = svgText.layerObjects[currentView][currentTextIndex].area3color;

                })
            }

            $("#layer_svg" + currentView + currentTextIndex).css({ 'opacity': svgText.layerObjects[currentView][currentTextIndex].opacity });

            if (svgText.layerObjects[currentView][currentTextIndex].rotation != 0) {
                var r = svgText.layerObjects[currentView][currentTextIndex].rotation;
                svgText.offset_logox_change = localStorage.getItem("offset_logox_change");
                svgText.offset_logoy_change = localStorage.getItem("offset_logoy_change");
                if (svgText.offset_logox_change != null && svgText.offset_logox_change != "") {
                    $("#layer_svg" + currentView + currentTextIndex + " >g>g").attr('transform', 'rotate(' + r + ' ' + svgText.offset_logox_change + ' ' + svgText.offset_logoy_change + ')');

                }
            }
            else {
                var offset_x = $("#layer_svg" + currentView + currentTextIndex).attr('data-orig-w') / 2;
                var offset_y = $("#layer_svg" + currentView + currentTextIndex).attr('data-orig-h') / 2;
                $("#layer_svg" + currentView + currentTextIndex + " >g>g").attr('transform', 'rotate(' + svgText.layerObjects[currentView][currentTextIndex].rotation + ' ' + offset_x + ' ' + offset_y + ')');
            }
            if (svgText.layerObjects[currentView][currentTextIndex].flip) {
                $("#layer_svg" + currentView + currentTextIndex + " >g").attr('transform', 'translate(168, 0) scale(-1, 1)');
            }
            //  new logic added to show stock logo inside boundary box	
            var thisTextIndex = svgText.currentLayer;
            if (thisTextIndex >= 0 && thisTextIndex != "undefined") {
                //var selectedpanel = $(".mask-panel option:selected").val();
                var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
                console.log(this_text);
                //svgText.layerObjects[currentView][thisTextIndex].mask = selectedpanel;
                $('#layer_g' + currentView + thisTextIndex).attr('clip-path',
		            "url(#mask-" + svgText.layerObjects[currentView][thisTextIndex].mask + currentView + ")");
                //recenter here		    	
                svgText.placeTextCentered();
                svgText.setActiveLayer(thisTextIndex);

                svgText.pricing.getCustomPanels();
                Builder.hasChanged("mask panel changed");
            }
            ///

        });

        //palette layer, build immediately
        $("#text_palette" + currentView).prepend($("#logoLayerTemplate").html().replace(/paletteLayerLogoIndex/g, "paletteLayer" + currentView + currentTextIndex));
        var newLayer = $("#paletteLayer" + currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Logo: <strong><i>" + logoTitle + "</i></strong>");

        $("#paletteLayer" + currentView + currentTextIndex).click(function (e) {
            var thisTextIndex = $(this).attr("data-index");
            svgText.setActiveLayer(thisTextIndex);
        });

        //layer buttons
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.flipArtButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);

        svgText.makeSwatches(newLayer.find(".area1-color"), currentTextIndex);
        svgText.makeSwatches(newLayer.find(".area2-color"), currentTextIndex);
        svgText.makeSwatches(newLayer.find(".area3-color"), currentTextIndex);

        var mask = svgText.layerObjects[currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[currentView.substr(1)][0].name;
        var newLogoOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newLogoOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newLogoOptionsMaskSelect.change(function (e) {
            //console.log('svg: newLogoOptionsMaskSelect');			
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[currentView][thisTextIndex].mask = $(this).val();
            svgText.layerObjects[currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerObjects[currentView][thisTextIndex].mask + currentView + ")");

            //recenter here
            svgText.placeTextCentered();
            svgText.setActiveLayer(thisTextIndex);

            svgText.pricing.getCustomPanels();
            Builder.hasChanged("mask panel changed");
        });
        newLayer.find(".area1-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[currentView][currentTextIndex].area1color) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[currentView][thisTextIndex].area1color = newcolor;
                        $("#layer_svg" + currentView + thisTextIndex).find('*[id="AREA_1"] path').each(function () {
                            $(this)[0].style.fill = newcolor;
                            $(this)[0].style.stroke = newcolor;
                            svgText.layerObjects[currentView][currentTextIndex].area1color = newcolor;
                            svgText.layerObjects[currentView][currentTextIndex].area1code = newcode;

                        })
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("area1 color changed");
                });
            });
        });
        newLayer.find(".area2-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[currentView][currentTextIndex].area2color) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[currentView][thisTextIndex].area2color = newcolor;
                        $("#layer_svg" + currentView + thisTextIndex).find('*[id="AREA_2"] path').each(function () {
                            $(this)[0].style.fill = newcolor;
                            $(this)[0].style.stroke = newcolor;
                            svgText.layerObjects[currentView][currentTextIndex].area2color = newcolor;
                            svgText.layerObjects[currentView][currentTextIndex].area2code = newcode;
                        })
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("area2 color changed");
                });
            });
        });
        newLayer.find(".area3-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[currentView][currentTextIndex].area3color) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[currentView][thisTextIndex].area3color = newcolor;
                        $("#layer_svg" + currentView + thisTextIndex).find('*[id="AREA_3"] path').each(function () {
                            $(this)[0].style.fill = newcolor;
                            $(this)[0].style.stroke = newcolor;
                            svgText.layerObjects[currentView][currentTextIndex].area3color = newcolor;
                            svgText.layerObjects[currentView][currentTextIndex].area3code = newcode;
                        })
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("area 3 color changed");
                });
            });
        });
        svgText.pricing.getCustomPanels();
        svgText.setActiveLayer(currentTextIndex);
        Builder.hasChanged("logo added");
    },
    loadKitSVGLogo: function (kitNo) {
        console.log('svg: loadKitSVGLogo');
        var currentTextIndex = svgText.currentLayer;
        var currentView = svgText.currentView;

        var kitCount1 = currentView.split("_").length - 1
        if (kitCount1 < 2) {
            currentView = currentView + "_" + kitNo;
            svgText.currentView = currentView;
        }


        var logoTitle = svgText.layerKitObjects[currentView][currentTextIndex].logo_id;
        var logoSVG = $('.logos li[data-svg="' + logoTitle + '"] div').html();
        logoSVG = '<svg id="load_svg' + currentView + currentTextIndex + '" data-index="' + currentTextIndex + '" overflow="visible"></svg>';

        $("#CUSTOM" + currentView).append(logoSVG); //append placeholder, then load
        var this_loader = $("#load_svg" + currentView + currentTextIndex);

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById(this_loader.parent().attr('id')).appendChild(nn);
        this_loader.appendTo(nn);
        nn.id = 'layer_g' + currentView + currentTextIndex;

        var mask = svgText.layerKitObjects[currentView][currentTextIndex].mask;
        if (!mask) mask = ProductKit['kit_' + kitNo].masks[currentView.substr(1)][0].name;
        $('#' + nn.id).attr('clip-path',
			"url(#mask-" + mask + currentView + ")");

        $.get("../svg/stock_logos/" + logoTitle + ".svg", function (data) {

            var svgClone = $($(data).children("svg")[0]).clone();
            var svgCloneChildren = svgClone.children().remove();
            var g = svgClone.append("<g data-type='flipgroup'></g>");
            svgClone.children('g:eq(0)').append(svgCloneChildren);

            var svg = $('<div>').append(svgClone).html();
            svg = svg.replace("<svg", '<svg id="layer_svg' + currentView + currentTextIndex + '" data-index="' + currentTextIndex + '" overflow="visible"');
            $('#load_svg' + currentView + currentTextIndex).after(svg);
            $('#load_svg' + currentView + currentTextIndex).remove();
            var this_image = $("#layer_svg" + currentView + currentTextIndex);
            var this_width = svgText.layerKitObjects[currentView][currentTextIndex].width;
            var this_height = svgText.layerKitObjects[currentView][currentTextIndex].height;
            var widthCheck = 0;
            if (this_width == -1) {
                widthCheck = -1;
                this_width = 100;
                this_height = 100;

                svgText.layerKitObjects[currentView][currentTextIndex].width = this_width;
                svgText.layerKitObjects[currentView][currentTextIndex].height = this_height;
            }

            if (kitNo == 4) {
                // Commented Code
                //  var revScale = 1 / KitScale['kit_' + kitNo];

                // Important---KitScale for Kit 0 is Returnig Some values in any case,But KitScale for kit 1,2,3,4 Returing 0 on some case
                // Important--- KitScale for kit 2,3,4 returing 0,then use KitScale 0 to for KitCase 1,2 And 3

                var revScale = 0;
                if (KitScale['kit_' + kitNo] == 0) {
                    revScale = KitScale['kit_0'];
                    revScale = 1 / revScale;
                }
                else {
                    var revScale = 1 / KitScale['kit_' + kitNo];
                }
            }
            else {
                var revScale = 1 / svgText.bbScale;
            }

            this_image.attr('data-orig-w', 100);//always 100? 
            this_image.attr('data-orig-h', 100);//always 100? 
            if (widthCheck == -1) {
                this_image.attr('width', this_width * revScale);
                this_image.attr('height', this_height * revScale);
            }
            else {
                this_image.attr('width', this_width);
                this_image.attr('height', this_height);
            }
            this_image.attr('data-scale-x', 1);
            this_image.attr('data-scale-y', 1);
            var container = $(".kits.kit_" + kitNo + " .canvas-wrapper.active > .svg > svg ");
            if (svgText.layerKitObjects[currentView][currentTextIndex].x == -1) {
                this_image.attr('x', ((container.width() * revScale - (this_width)) / 2))
						.attr('y', ((container.height() * revScale - (this_height)) / 2))

                svgText.layerKitObjects[currentView][currentTextIndex].x = ((container.width() * revScale - (this_width)) / 2);
                svgText.layerKitObjects[currentView][currentTextIndex].y = ((container.height() * revScale - (this_height)) / 2);
            }
            else {
                this_image.attr('x', svgText.layerKitObjects[currentView][currentTextIndex].x)
                this_image.attr('y', svgText.layerKitObjects[currentView][currentTextIndex].y)
            }
            $("#layer_svg" + currentView + currentTextIndex).click(function (e) {

                var thisTextIndex = $(this).attr("data-index");
                Builder.doubleKit = kitNo;
                if (kitNo == 2 || kitNo == 4) {
                    //  var view = svgText.currentView;
                    var view = $('.preview-nav.kit_' + kitNo + ' a.active').attr('data-view');
                    var currentView = view.split('_');
                    svgText.currentView = '_' + currentView[1] + '_' + kitNo;
                    svgText.setKitView(view, kitNo);
                }
                svgText.setKitActiveLayer(thisTextIndex, kitNo);
            });
            if (currentTextIndex == svgText.currentLayer)
                svgText.setKitActiveLayer(currentTextIndex, kitNo);

            //console.log('svg: logoSVG', $("#layer_svg"+currentView + currentTextIndex ));
            if ($("#AREA_1", $("#layer_svg" + currentView + currentTextIndex)).length <= 0) {
                newLayer.find("div.background").hide();
            } else {
                // apply area1 color svgText.layerObjects[currentView][currentTextIndex]
                $("#layer_svg" + currentView + currentTextIndex).find('*[id="AREA_1"] path').each(function () {
                    $(this)[0].style.fill = svgText.layerKitObjects[currentView][currentTextIndex].area1color;
                    $(this)[0].style.stroke = svgText.layerKitObjects[currentView][currentTextIndex].area1color;

                })
            }
            if ($("#AREA_2", $("#layer_svg" + currentView + currentTextIndex)).length <= 0) {
                newLayer.find("div.detail").hide();
            } else {
                // apply area2 color
                $("#layer_svg" + currentView + currentTextIndex).find('*[id="AREA_2"] path').each(function () {
                    $(this)[0].style.fill = svgText.layerKitObjects[currentView][currentTextIndex].area2color;
                    $(this)[0].style.stroke = svgText.layerKitObjects[currentView][currentTextIndex].area2color;

                })
            }
            if ($("#AREA_3", $("#layer_svg" + currentView + currentTextIndex)).length <= 0) {
                newLayer.find("div.outline").hide();
            } else {
                //apply area3 color

                $("#layer_svg" + currentView + currentTextIndex).find('*[id="AREA_3"] path').each(function () {

                    //console.log('svg: svg stuff', svgText.layerObjects[currentView][currentTextIndex].area3color);

                    $(this)[0].style.fill = svgText.layerKitObjects[currentView][currentTextIndex].area3color;
                    $(this)[0].style.stroke = svgText.layerKitObjects[currentView][currentTextIndex].area3color;

                })
            }

            $("#layer_svg" + currentView + currentTextIndex).css({ 'opacity': svgText.layerKitObjects[currentView][currentTextIndex].opacity });

            if (svgText.layerKitObjects[currentView][currentTextIndex].rotation != 0) {
                var r = svgText.layerKitObjects[currentView][currentTextIndex].rotation;
                svgText.offset_logox_change_kit = localStorage.getItem("offset_logox_change_kit");
                svgText.offset_logoy_change_kit = localStorage.getItem("offset_logoy_change_kit");
                if (svgText.offset_logox_change_kit != null && svgText.offset_logox_change_kit != "") {
                    $("#layer_svg" + currentView + currentTextIndex + " >g>g").attr('transform', 'rotate(' + r + ' ' + svgText.offset_logox_change_kit + ' ' + svgText.offset_logoy_change_kit + ')');
                }
            }
            else {
                var offset_x = $("#layer_svg" + currentView + currentTextIndex).attr('data-orig-w') / 2;
                var offset_y = $("#layer_svg" + currentView + currentTextIndex).attr('data-orig-h') / 2;
                $("#layer_svg" + currentView + currentTextIndex + " >g>g").attr('transform', 'rotate(' + svgText.layerKitObjects[currentView][currentTextIndex].rotation + ' ' + offset_x + ' ' + offset_y + ')');
            }

            if (svgText.layerKitObjects[currentView][currentTextIndex].flip) {
                $("#layer_svg" + currentView + currentTextIndex + " >g").attr('transform', 'translate(168, 0) scale(-1, 1)');
            }
            //  new logic added to show stock logo inside boundary box	
            var thisTextIndex = svgText.currentLayer;
            if (thisTextIndex >= 0 && thisTextIndex != "undefined") {
                //var selectedpanel = $(".mask-panel option:selected").val();
                var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
                console.log(this_text);
                console.log('currentView ', currentView, ' thisTextIndex ', thisTextIndex);
                console.log('svgText.layerKitObjects ', svgText.layerKitObjects);
                //svgText.layerKitObjects[currentView][thisTextIndex].mask = selectedpanel;
                $('#layer_g' + currentView + thisTextIndex).attr('clip-path',
		            "url(#mask-" + svgText.layerKitObjects[currentView][thisTextIndex].mask + currentView + ")");
                //recenter here		    	
                svgText.placeKitTextCentered(kitNo);
                svgText.setKitActiveLayer(thisTextIndex, kitNo);

                svgText.pricing.getCustomKitPanels(kitNo);
                Builder.hasChanged("mask panel changed");
            }
            ///

        });

        //palette layer, build immediately
        $("#text_palette_" + kitNo + currentView).prepend($("#logoLayerTemplate").html().replace(/paletteLayerLogoIndex/g, "paletteLayer" + currentView + currentTextIndex));
        var newLayer = $("#paletteLayer" + currentView + currentTextIndex);
        // var newLayer = $("#paletteLayer" + "_Front" + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex);
        newLayer.find(".text").html("Logo: <strong><i>" + logoTitle + "</i></strong>");


        $("#paletteLayer" + currentView + currentTextIndex).click(function (e) {

            var thisTextIndex = $(this).attr("data-index");
            console.log('current kit clicked ', kitNo);
            Builder.doubleKit = kitNo;
            if (kitNo == 2 || kitNo == 4) {
                // var view = svgText.currentView;
                var view = $('.preview-nav.kit_' + kitNo + ' a.active').attr('data-view');
                var currentView = view.split('_');
                svgText.currentView = '_' + currentView[1] + '_' + kitNo;
                svgText.setKitView(view, kitNo);
            }
            svgText.setKitActiveLayer(thisTextIndex, kitNo);
        });


        //layer buttons
        svgText.layerComponents.KitdeleteButton(newLayer, kitNo);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitNo);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitNo);
        svgText.layerComponents.KitflipArtButton(newLayer);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        svgText.makeKitSwatches(newLayer.find(".area1-color"), currentTextIndex, kitNo);
        svgText.makeKitSwatches(newLayer.find(".area2-color"), currentTextIndex, kitNo);
        svgText.makeKitSwatches(newLayer.find(".area3-color"), currentTextIndex, kitNo);

        var mask = svgText.layerKitObjects[currentView][currentTextIndex].mask;
        if (!mask) mask = ProductKit['kit_' + kitNo].masks[currentView.substr(1)][0].name;

        var newLogoOptionsMaskSelect = newLayer.find('.mask-panel');
        $(ProductKit['kit_' + kitNo].masks[(currentView.substr(1)).substr(0, currentView.substr(1).length - 2)]).each(function () {
            console.log(this);

            $(newLogoOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newLogoOptionsMaskSelect.change(function (e) {
            //console.log('svg: newLogoOptionsMaskSelect');			
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerKitObjects[currentView][thisTextIndex].mask + currentView + ")");

            //recenter here
            svgText.placeKitTextCentered(kitNo);
            svgText.setKitActiveLayer(thisTextIndex, kitNo);

            svgText.pricing.getCustomKitPanels(kitNo);
            Builder.hasChanged("mask panel changed");
        });
        newLayer.find(".area1-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[currentView][currentTextIndex].area1color) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[currentView][thisTextIndex].area1color = newcolor;
                        $("#layer_svg" + currentView + thisTextIndex).find('*[id="AREA_1"] path').each(function () {
                            $(this)[0].style.fill = newcolor;
                            $(this)[0].style.stroke = newcolor;
                            svgText.layerKitObjects[currentView][currentTextIndex].area1color = newcolor;
                            svgText.layerKitObjects[currentView][currentTextIndex].area1code = newcode;

                        })
                    }
                    svgText.pricing.getCustomKitPanels(kitNo);
                    Builder.hasChanged("Kit area1 color changed");
                });
            });
        });
        newLayer.find(".area2-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[currentView][currentTextIndex].area2color) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[currentView][thisTextIndex].area2color = newcolor;
                        $("#layer_svg" + currentView + thisTextIndex).find('*[id="AREA_2"] path').each(function () {
                            $(this)[0].style.fill = newcolor;
                            $(this)[0].style.stroke = newcolor;
                            svgText.layerKitObjects[currentView][currentTextIndex].area2color = newcolor;
                            svgText.layerKitObjects[currentView][currentTextIndex].area2code = newcode;
                        })
                    }
                    svgText.pricing.getCustomKitPanels(kitNo);
                    Builder.hasChanged("area2 color changed");
                });
            });
        });
        newLayer.find(".area3-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[currentView][currentTextIndex].area3color) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[currentView][thisTextIndex].area3color = newcolor;
                        $("#layer_svg" + currentView + thisTextIndex).find('*[id="AREA_3"] path').each(function () {
                            $(this)[0].style.fill = newcolor;
                            $(this)[0].style.stroke = newcolor;
                            svgText.layerKitObjects[currentView][currentTextIndex].area3color = newcolor;
                            svgText.layerKitObjects[currentView][currentTextIndex].area3code = newcode;
                        })
                    }
                    svgText.pricing.getCustomKitPanels(kitNo);
                    Builder.hasChanged("Kit area 3 color changed");
                });
            });
        });
        svgText.pricing.getCustomKitPanels(kitNo);
        svgText.setKitActiveLayer(currentTextIndex, kitNo);
        Builder.hasChanged("Kit " + kitNo + " logo added");
    },
    makeNewText: function (thetext) {
        //21/2/2019
        $('.share').hide();

        //28/2/2019
        //IsImagePathGet = false

        console.log('svg: makeNewText');
        //ok add some text
        svgText.currentLayer = svgText.layerObjects[svgText.currentView].length;
        svgText.layerObjects[svgText.currentView].push({
            type: 'textLayer',
            text: thetext,
            layout: "straight",
            x: -1,
            y: -1,
            width: -1,
            height: -1,
            rotation: 0,
            radius: 200, //default 200?
            opacity: 1,
            spacing: 0,
            fontfamily: 'athletic',
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: Product.masks[svgText.currentView.substr(1)][0].name
        });
        svgText.loadTextOnButtonClick();
        svgText.placeTextCentered();
    },
    loadTextOnButtonClick: function (fromLoad) {
        //28/5/2019
        if (Product.IncreaseArtworkSizeForLargeSizeproduct == true) {
            $('#boundingbox_holder').attr('style', 'width: 100% !important');
        }
        svgText.ImageHeight = 0;
        svgText.ImageWidth = 0;
        console.log('svg: loadText');
        if (!fromLoad) fromLoad = false;
        var currentTextIndex = svgText.currentLayer;
        var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
        console.log(currentTextIndex, layout);
        console.log(svgText.layerObjects[svgText.currentView][currentTextIndex].width);
        svgText.currentLayer = currentTextIndex;
        $("#text_palette" + svgText.currentView).prepend($("#textLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex)//.attr("data-view", $(".canvas-wrapper.active").data('view'));
        newLayer.find(".text").html("Text: <strong>" + svgText.layerObjects[svgText.currentView][currentTextIndex].text + "</strong>");
        newLayer.find(".panel").click(function (e) {
            e.stopPropagation();
        });
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newTextOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
            // Important--Implement panel Fuctionality of "Panel" in Artwork Section while placing text and change "Shapes" dring masking(LW79OKC)
            // Important-- Resolve the Masking issue in different panels (LW79OKC),By Calling Following 4 line of code.
            svgText.makeSvgFrom(thisTextIndex);
            console.log('calling resizeSvgText');
            svgText.resizeSvgText(thisTextIndex);
            svgText.setActiveLayer(thisTextIndex);
            //recenter here
            svgText.placeTextCentered();
            //svgText.setActiveLayer(thisTextIndex);
            svgText.pricing.getCustomPanels();

            Builder.hasChanged("mask panel changed");
        });
        if (svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily == "100px impact") {

            svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = "impact";
        }
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
            svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
            svgText.makeSvgFrom(thisTextIndex);
            console.log('calling resizeSvgText');
            svgText.resizeSvgText(thisTextIndex);
            svgText.setActiveLayer(thisTextIndex);
            Builder.hasChanged("font family changed");
        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    console.log('calling resizeSvgText');
                    break;
            }
            //End
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);
        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="filltxt"]')[0].style.fill = newcolor;
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.stroke = newcolor;
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 6) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
            }
            svgText.pricing.getCustomPanels();
            Builder.hasChanged("stroke increased");
        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
            }
            svgText.pricing.getCustomPanels();
            Builder.hasChanged("stroke decreased");
        });

        noUiSlider.create(newLayer.find(".spacing-slider")[0], {
            start: svgText.layerObjects[svgText.currentView][currentTextIndex].spacing, connect: "lower", step: 0.5,
            range: {
                'min': -2,
                'max': 5
            }
        });
        newLayer.find(".spacing-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                svgText.layerObjects[svgText.currentView][thisTextIndex].spacing = parseFloat(values[0]);
                svgText.makeSvgFrom(thisTextIndex);
                console.log('calling resizeSvgText');
                svgText.resizeSvgText(thisTextIndex);
                svgText.setActiveLayer(thisTextIndex);
            }
            Builder.hasChanged("spacing updated");
        });
        newLayer.find(".spacing-slider")[0].ondblclick = function () {
            this.noUiSlider.set(0);
        }

        noUiSlider.create(newLayer.find(".radius-slider")[0], {
            start: Math.sqrt(svgText.layerObjects[svgText.currentView][currentTextIndex].radius), connect: "lower", range: {
                'min': 5,
                'max': 20
            }
        });
        newLayer.find(".radius-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                var radius_sq = parseFloat(values[0]) * parseFloat(values[0]);
                svgText.layerObjects[svgText.currentView][thisTextIndex].radius = radius_sq;
                svgText.makeSvgFrom(thisTextIndex);
                console.log('calling resizeSvgText');
                svgText.resizeSvgText(thisTextIndex);
                svgText.setActiveLayer(thisTextIndex);
            }
            Builder.hasChanged("radius updated");
        });
        newLayer.find(".radius-slider")[0].ondblclick = function () {
            this.noUiSlider.set(Math.sqrt(200));
        }
        svgText.makeSvgFrom(currentTextIndex);
        console.log('calling resizeSvgText');
        svgText.resizeSvgText(currentTextIndex, fromLoad);
        svgText.pricing.getCustomPanels();
        $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
        $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
            var thisTextIndex = $(this).attr("data-index");
            svgText.setActiveLayer(thisTextIndex);
            Builder.hasChanged("reindex?");
        });
    },
    loadText: function (fromLoad) {
        //25/4/2019
        //Apply art on shorts Sleeves for full size product
        //if (Product.ApplyArtOnShortsSleeves) {
        //    $("#boundingbox_holder").attr('style', 'max-width: 450px !important;width: 100% !important;');
        //}
        console.log('svg: loadText');
        if (!fromLoad) fromLoad = false;
        var currentTextIndex = svgText.currentLayer;

        var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
        console.log(currentTextIndex, layout);
        console.log(svgText.layerObjects[svgText.currentView][currentTextIndex].width);
        $('#text_palette' + svgText.currentView + currentTextIndex).remove();
        svgText.currentLayer = currentTextIndex;
        $("#text_palette" + svgText.currentView).prepend($("#textLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex)//.attr("data-view", $(".canvas-wrapper.active").data('view'));
        newLayer.find(".text").html("Text: <strong>" + svgText.layerObjects[svgText.currentView][currentTextIndex].text + "</strong>");
        newLayer.find(".panel").click(function (e) {
            e.stopPropagation();
        });
        svgText.layerComponents.deleteButton(newLayer);
        svgText.layerComponents.moveUpButton(newLayer);
        svgText.layerComponents.moveDownButton(newLayer);
        svgText.layerComponents.rotationSlider(newLayer);
        svgText.layerComponents.opacitySlider(newLayer);
        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
        $(Product.masks[svgText.currentView.substr(1)]).each(function () {
            //console.log(this);
            $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
        });
        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newTextOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;

            svgText.layerObjects[svgText.currentView][thisTextIndex].mask = $(this).val();

            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            // Important--Implement panel Fuctionality of "Panel" in Artwork Section while placing text and change "Shapes" dring masking(LW79OKC)
            // Important-- Resolve the Masking issue in different panels (LW79OKC),By Calling Following 4 line of code.
            svgText.makeSvgFrom(thisTextIndex);
            console.log('calling resizeSvgText');
            svgText.resizeSvgText(thisTextIndex);
            svgText.setActiveLayer(thisTextIndex);

            //recenter here
            svgText.placeTextCentered();
            //svgText.setActiveLayer(thisTextIndex);
            svgText.pricing.getCustomPanels();

            Builder.hasChanged("mask panel changed");
        });
        if (svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily == "100px impact") {

            svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily = "impact";
        }
        newLayer.find("select.font-fam").val(svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
            svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
            svgText.makeSvgFrom(thisTextIndex);
            console.log('calling resizeSvgText');
            svgText.resizeSvgText(thisTextIndex);
            svgText.setActiveLayer(thisTextIndex);
            Builder.hasChanged("font family changed");
        });
        newLayer.find("select.layout-change").val(svgText.layerObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date07/12/2018
            var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    if (ActiveText.length >= 15) {
                        svgText.GetCanvasVerticalTextforlargetext(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    else {
                        svgText.GetCanvasVerticalText(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily);
                    }
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    var view_index = svgText.currentView + currentTextIndex;
                    var this_text = $('#layer_svg' + view_index);
                    var textcolor = $('.palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('.palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('.palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('.palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = "";
                    svgText.CanvasfontFmaily = svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily;
                    svgText.makeSvgFrom(thisTextIndex);
                    svgText.resizeSvgText(thisTextIndex);
                    svgText.setActiveLayer(thisTextIndex);
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('.palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('.palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    console.log('calling resizeSvgText');
                    break;
            }
            //End
        });
        svgText.makeSwatches(newLayer.find(".text-color"), currentTextIndex);
        svgText.makeSwatches(newLayer.find(".stroke-color"), currentTextIndex);

        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="filltxt"]')[0].style.fill = newcolor;
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("text color changed");
                });
            });
        });
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecolor = newcolor;
                        svgText.layerObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.stroke = newcolor;
                    }
                    svgText.pricing.getCustomPanels();
                    Builder.hasChanged("stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth < 6) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
            }
            svgText.pricing.getCustomPanels();
            Builder.hasChanged("stroke increased");
        });
        newLayer.find(".stroke-down").click(function (e) {
            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
            }
            svgText.pricing.getCustomPanels();
            Builder.hasChanged("stroke decreased");
        });

        noUiSlider.create(newLayer.find(".spacing-slider")[0], {
            start: svgText.layerObjects[svgText.currentView][currentTextIndex].spacing, connect: "lower", step: 0.5,
            range: {
                'min': -2,
                'max': 5
            }
        });
        newLayer.find(".spacing-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                svgText.layerObjects[svgText.currentView][thisTextIndex].spacing = parseFloat(values[0]);
                svgText.makeSvgFrom(thisTextIndex);
                console.log('calling resizeSvgText');
                svgText.resizeSvgText(thisTextIndex);
                svgText.setActiveLayer(thisTextIndex);
            }
            Builder.hasChanged("spacing updated");
        });
        newLayer.find(".spacing-slider")[0].ondblclick = function () {
            this.noUiSlider.set(0);
        }

        noUiSlider.create(newLayer.find(".radius-slider")[0], {
            start: Math.sqrt(svgText.layerObjects[svgText.currentView][currentTextIndex].radius), connect: "lower", range: {
                'min': 5,
                'max': 20
            }
        });
        newLayer.find(".radius-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                var radius_sq = parseFloat(values[0]) * parseFloat(values[0]);
                svgText.layerObjects[svgText.currentView][thisTextIndex].radius = radius_sq;
                svgText.makeSvgFrom(thisTextIndex);
                console.log('calling resizeSvgText');
                svgText.resizeSvgText(thisTextIndex);
                svgText.setActiveLayer(thisTextIndex);
            }
            Builder.hasChanged("radius updated");
        });
        newLayer.find(".radius-slider")[0].ondblclick = function () {
            this.noUiSlider.set(Math.sqrt(200));
        }
        svgText.makeSvgFrom(currentTextIndex);
        console.log('calling resizeSvgText');
        svgText.resizeSvgText(currentTextIndex, fromLoad);
        svgText.pricing.getCustomPanels();
        $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
        $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
            var thisTextIndex = $(this).attr("data-index");
            svgText.setActiveLayer(thisTextIndex);
            Builder.hasChanged("reindex?");
        });
    },

    //Kit Code using canvas...
    makeNewKitText: function (thetext, kitNo) {
        //21/2/2019
        $('.share').hide();

        //28/2/2019
        // IsImagePathGet = false

        console.log('svg:kit makeNewText');
        //ok add some text
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitNo;
        }
        svgText.currentLayer = svgText.layerKitObjects[svgText.currentView].length;
        svgText.layerKitObjects[svgText.currentView].push({
            type: 'textLayer',
            text: thetext,
            layout: "straight",
            x: -1,
            y: -1,
            width: -1,
            height: -1,
            rotation: 0,
            radius: 200, //default 200?
            opacity: 1,
            spacing: 0,
            fontfamily: 'athletic',
            fillcolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            fillcode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokecolor: Product.hasOwnProperty('blackOnly') ? '#000000' : '#ffffff',
            strokecode: Product.hasOwnProperty('blackOnly') ? '#BK' : 'WH',
            strokewidth: 0,
            mask: ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].name,
            mask_name: ProductKit['kit_' + kitNo].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)][0].display
            //Product.masks[svgText.currentView.substr(1)][0].name
        });
        svgText.loadKitTextOnButtonClick(null, kitNo);
        svgText.placeKitTextCentered(kitNo);
    },
    loadKitTextOnButtonClick: function (fromLoad, kitIndex) {
        console.log('svg: loadKitText');
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }

        if (!fromLoad) fromLoad = false;

        var currentTextIndex = svgText.currentLayer;
        var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;

        console.log(currentTextIndex, layout);
        console.log(svgText.layerKitObjects[svgText.currentView][currentTextIndex].width);

        svgText.currentLayer = currentTextIndex;
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#textLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex)//.attr("data-view", $(".canvas-wrapper.active").data('view'));
        newLayer.find(".text").html("Text: <strong>" + svgText.layerKitObjects[svgText.currentView][currentTextIndex].text + "</strong>");
        newLayer.find(".panel").click(function (e) {
            e.stopPropagation();
        });

        //layer buttons

        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);
        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }


        //newTextOptionsMaskSelect.change(function (e) {
        //    //console.log('svg: newTextOptionsMaskSelect');
        //    var thisTextIndex = svgText.currentLayer;
        //    svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
        //    $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
        //		"url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

        //    //recenter here
        //    svgText.placeKitTextCentered(kitIndex);
        //    //svgText.setActiveLayer(thisTextIndex);
        //    svgText.pricing.getCustomKitPanels(kitIndex);

        //    Builder.hasChanged("kit mask panel changed");
        //});

        //18-8-19
        //Important
        //(Shirt and Shorts Masking in OpTION 2 and 4 in kit not working when we change text type to vetical arch and after then click on shirt and shorts panel)
        //The above situation solved for following code
        //Start
        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newTextOptionsMaskSelect');

            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
				"url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");

            // Important--Implement panel Fuctionality of "Panel" in Artwork Section while placing text and change "Shapes" dring masking(LW79OKC)
            // Important-- Resolve the Masking issue in different panels (LW79OKC),By Calling Following 4 line of code.
            //svgText.makeSvgFrom(thisTextIndex);
            svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            console.log('calling resizeSvgText');
            svgText.resizeKitSvgText(thisTextIndex);
            svgText.setKitActiveLayer(thisTextIndex);
            svgText.placeKitTextCentered(kitIndex);
            //svgText.setActiveLayer(thisTextIndex);
            svgText.pricing.getCustomKitPanels(kitIndex);

            Builder.hasChanged("mask panel changed");
        });
        //end
        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            $(".lds-wrapper-canvas").show();
            var thisTextIndex = svgText.currentLayer;
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
            svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            console.log('Kit calling resizeSvgText 1');
            svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            Builder.hasChanged("kit font family changed");
            $(".lds-wrapper-canvas").hide();
        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date24/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();

            //123456789
            //Important- Ger Height ,width and x and value of svg the we pass these value to cnvas
            //Start 
            var width = $("#layer_g" + svgText.currentView + currentTextIndex + " svg").attr("width");
            var height = $("#layer_g" + svgText.currentView + currentTextIndex + " svg").attr("height");
            var x = $("#layer_g" + svgText.currentView + currentTextIndex + " svg").attr("x");
            var y = $("#layer_g" + svgText.currentView + currentTextIndex + " svg").attr("y");
            //End

            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var thisTextIndex = svgText.currentLayer;
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1);
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    //123456789
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, width, height, x, y, "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    svgText.CanvasfontFmaily = "";
                    var this_text = $('#layer_svg' + view_index);
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();

            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);

        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="filltxt"]')[0].style.fill = newcolor;
                    }
                    svgText.pricing.getCustomKitPanels(kitIndex);
                    Builder.hasChanged("kit text color changed");
                });
            });
        });
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.stroke = newcolor;
                    }
                    svgText.pricing.getCustomKitPanels(kitIndex);
                    Builder.hasChanged("kit stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {

            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 6) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
            }
            svgText.pricing.getCustomKitPanels(kitIndex);
            Builder.hasChanged("kit stroke increased");
        });
        newLayer.find(".stroke-down").click(function (e) {

            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
            }
            svgText.pricing.getCustomKitPanels(kitIndex);
            Builder.hasChanged("kit stroke decreased");
        });

        noUiSlider.create(newLayer.find(".spacing-slider")[0], {
            start: svgText.layerKitObjects[svgText.currentView][currentTextIndex].spacing, connect: "lower", step: 0.5,
            range: {
                'min': -2,
                'max': 5
            }
        });
        newLayer.find(".spacing-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].spacing = parseFloat(values[0]);
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('calling resizeSvgText');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            }
            Builder.hasChanged("spacing updated");
        });
        newLayer.find(".spacing-slider")[0].ondblclick = function () {
            this.noUiSlider.set(0);
        }

        noUiSlider.create(newLayer.find(".radius-slider")[0], {
            start: Math.sqrt(svgText.layerKitObjects[svgText.currentView][currentTextIndex].radius), connect: "lower", range: {
                'min': 5,
                'max': 20
            }
        });
        newLayer.find(".radius-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                var radius_sq = parseFloat(values[0]) * parseFloat(values[0]);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].radius = radius_sq;
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('kit calling resizeSvgText 3');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            }
            Builder.hasChanged("radius updated");
        });
        newLayer.find(".radius-slider")[0].ondblclick = function () {
            this.noUiSlider.set(Math.sqrt(200));
        }
        svgText.makeKitSvgFrom(currentTextIndex, kitIndex);
        console.log('kit calling resizeSvgText 4');
        svgText.resizeKitSvgText(currentTextIndex, fromLoad, kitIndex);
        svgText.pricing.getCustomKitPanels(kitIndex);
        $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
        $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
            var thisTextIndex = $(this).attr("data-index");
            console.log('current kit clicked ', kitIndex);
            Builder.doubleKit = kitIndex;
            if (kitIndex == 2 || kitIndex == 4) {

                // var view = svgText.currentView;
                var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                var currentView = view.split('_');
                svgText.currentView = '_' + currentView[1] + '_' + kitIndex;
                svgText.setKitView(view, kitIndex);
            }
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            Builder.hasChanged("kit reindex?");
        });
    },
    loadKitText: function (fromLoad, kitIndex) {
        console.log('svg: loadKitText');

        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }

        if (!fromLoad) fromLoad = false;

        var currentTextIndex = svgText.currentLayer;
        var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;

        console.log(currentTextIndex, layout);
        console.log(svgText.layerKitObjects[svgText.currentView][currentTextIndex].width);

        svgText.currentLayer = currentTextIndex;
        $("#text_palette_" + kitIndex + svgText.currentView + currentTextIndex).remove();
        $("#text_palette_" + kitIndex + svgText.currentView).prepend($("#textLayerTemplate").html().replace(/paletteLayerTextIndex/g, "paletteLayer" + svgText.currentView + currentTextIndex));
        var newLayer = $("#paletteLayer" + svgText.currentView + currentTextIndex);
        newLayer.attr("data-index", currentTextIndex)//.attr("data-view", $(".canvas-wrapper.active").data('view'));
        newLayer.find(".text").html("Text: <strong>" + svgText.layerKitObjects[svgText.currentView][currentTextIndex].text + "</strong>");
        newLayer.find(".panel").click(function (e) {
            e.stopPropagation();
        });

        //layer buttons

        svgText.layerComponents.KitdeleteButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveUpButton(newLayer, kitIndex);
        svgText.layerComponents.KitmoveDownButton(newLayer, kitIndex);
        svgText.layerComponents.KitrotationSlider(newLayer);
        svgText.layerComponents.KitopacitySlider(newLayer);

        var SelectedMask = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").text();
        var selectedMaskVal = $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + ".text_layer.palette_active select.mask-panel option:selected").val();
        if (SelectedMask != "") {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
            $("#text_palette_" + kitIndex + " #paletteLayer" + svgText.currentView + currentTextIndex + '.text_layer.palette_active select.mask-panel [value=' + selectedMaskVal + ']').attr('selected', 'selected');
        }
        else {
            var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
            if (!mask) mask = ProductKit['kit_' + kitIndex].masks[svgText.currentView.substr(1)][0].name;// Product.masks[svgText.currentView.substr(1)][0].name;
            var newTextOptionsMaskSelect = newLayer.find('.mask-panel');
            $(ProductKit['kit_' + kitIndex].masks[(svgText.currentView.substr(1)).substr(0, svgText.currentView.substr(1).length - 2)]).each(function () {
                //console.log(this);
                $(newTextOptionsMaskSelect).append($('<option ' + (mask == this.name ? 'selected' : '') + ' value="' + this.name + '">' + this.display + '</option>'));
            });
        }
        newTextOptionsMaskSelect.change(function (e) {
            //console.log('svg: newTextOptionsMaskSelect');
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask = $(this).val();
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask_name = $(this).find('option:selected').text();
            $('#layer_g' + svgText.currentView + thisTextIndex).attr('clip-path',
               "url(#mask-" + svgText.layerKitObjects[svgText.currentView][thisTextIndex].mask + svgText.currentView + ")");
            //recenter here
            svgText.placeKitTextCentered(kitIndex);
            //svgText.setKitActiveLayer(thisTextIndex,kitIndex);
            svgText.pricing.getCustomKitPanels(kitIndex);

            Builder.hasChanged("kit mask panel changed");
        });

        newLayer.find("select.font-fam").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily)
        newLayer.find("select.font-fam").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="filltxt"]').css({ 'font-family': $(this).val() });
            $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-type="stroketxt"]').css({ 'font-family': $(this).val() });
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = $(this).val();
            svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
            console.log('Kit calling resizeSvgText 1');
            svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            Builder.hasChanged("kit font family changed");
        });
        newLayer.find("select.layout-change").val(svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout)
        newLayer.find("select.layout-change").change(function (e) {
            var thisTextIndex = svgText.currentLayer;
            svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
            //Changes for Canvas integration with Javascript for shapes..Date24/12/2018
            var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
            var ActiveText = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
            ActiveText = ActiveText.toUpperCase();
            switch (layout) {
                case 'bridge':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var thisTextIndex = svgText.currentLayer;
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBridgeTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'bowtie':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasBowtieTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                case 'verticalarch':
                    svgText.CanvasfontFmaily = "";
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView].splice(thisTextIndex, 1)
                    $("#layer_g" + svgText.currentView + thisTextIndex).remove();
                    svgText.reIndexLayers();
                    svgText.GetCanvasVerticalTextonKit(ActiveText, layout, textcolor, "", "", "", "", "", "", svgText.CanvasfontFmaily, kitIndex);
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    Builder.hasChanged("layout changed");
                    break;
                default:
                    $(".resize-handle").css({ 'opacity': '0' });
                    $(".bbhandles").css({ 'opacity': '0' });
                    $(".bblines ").css({ 'opacity': '0' });
                    $(".resize-handle_kit").css({ 'opacity': '0' });
                    $(".bbhandles_kit").css({ 'opacity': '0' });
                    $(".bblines_kit ").css({ 'opacity': '0' });
                    $(".lds-wrapper-canvas").show();
                    var view_index = svgText.currentView + currentTextIndex;
                    svgText.CanvasfontFmaily = "";
                    var this_text = $('#layer_svg' + view_index);
                    var newcode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('code');
                    var textcolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch.selected').data('color');
                    var strokecolor = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('color');
                    var strokecode = $('#text_palette_' + kitIndex + ' .palette_view .palette_active .stroke-color .swatch.selected').data('code');
                    svgText.CanvasfontFmaily = svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily;
                    var thisTextIndex = svgText.currentLayer;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = $(this).val();
                    svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                    console.log('kit calling resizeSvgText 2');
                    svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                    svgText.setKitActiveLayer(thisTextIndex, kitIndex);
                    Builder.hasChanged("kit layout changed");
                    this_text.find('*[data-style="filltxt"]')[0].style.fill = textcolor;
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch').removeClass("selected");
                    $('#text_palette_' + kitIndex + ' .palette_view .palette_active .text-color .swatch' + "[data-code=" + newcode + "]").addClass("selected");
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fontfamily = svgText.CanvasfontFmaily;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = textcolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = strokecode;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = strokecolor;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].layout = layout;
                    svgText.layerKitObjects[svgText.currentView][thisTextIndex].type = "textLayer";
                    svgText.pricing.getCustomPanelsForCanvasSvg();
                    console.log('calling resizeSvgText');
                    $(".resize-handle").css({ 'opacity': '1' });
                    $(".bbhandles").css({ 'opacity': '1' });
                    $(".bblines ").css({ 'opacity': '1' });
                    $(".resize-handle_kit").css({ 'opacity': '1' });
                    $(".bbhandles_kit").css({ 'opacity': '1' });
                    $(".bblines_kit ").css({ 'opacity': '1' });
                    $(".lds-wrapper-canvas").hide();

            }
        });
        svgText.makeKitSwatches(newLayer.find(".text-color"), currentTextIndex, kitIndex);
        svgText.makeKitSwatches(newLayer.find(".stroke-color"), currentTextIndex, kitIndex);

        newLayer.find(".text-color").each(function () {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].fillcode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="filltxt"]')[0].style.fill = newcolor;
                    }
                    svgText.pricing.getCustomKitPanels(kitIndex);
                    Builder.hasChanged("kit text color changed");
                });
            });
        });
        newLayer.find(".stroke-color").each(function (e) {
            var palette_holder = $(this);
            palette_holder.find(".swatch").each(function (index) {
                if ($(this).attr("data-color") == svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor) $(this).addClass("selected");
                $(this).click(function (e) {
                    if (!palette_holder.hasClass("swatches-active")) {
                        palette_holder.addClass("swatches-active");
                    }
                    else {
                        palette_holder.removeClass("swatches-active");
                        palette_holder.find(".selected").removeClass("selected");
                        $(this).addClass("selected");
                        var thisTextIndex = svgText.currentLayer;
                        var newcolor = $(this).attr("data-color");
                        var newcode = $(this).attr("data-code");
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecolor = newcolor;
                        svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokecode = newcode;
                        $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.stroke = newcolor;
                    }
                    svgText.pricing.getCustomKitPanels(kitIndex);
                    Builder.hasChanged("kit stroke color changed");
                });
            });
        });
        newLayer.find(".stroke-up").click(function (e) {

            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth < 6) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth + 1;
            }
            svgText.pricing.getCustomKitPanels(kitIndex);
            Builder.hasChanged("kit stroke increased");
        });
        newLayer.find(".stroke-down").click(function (e) {

            var thisTextIndex = svgText.currentLayer;
            if (svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth > 0) {
                $("#layer_svg" + svgText.currentView + thisTextIndex).find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth = svgText.layerKitObjects[svgText.currentView][thisTextIndex].strokewidth - 1;
            }
            svgText.pricing.getCustomKitPanels(kitIndex);
            Builder.hasChanged("kit stroke decreased");
        });

        noUiSlider.create(newLayer.find(".spacing-slider")[0], {
            start: svgText.layerKitObjects[svgText.currentView][currentTextIndex].spacing, connect: "lower", step: 0.5,
            range: {
                'min': -2,
                'max': 5
            }
        });
        newLayer.find(".spacing-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].spacing = parseFloat(values[0]);
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('calling resizeSvgText');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            }
            Builder.hasChanged("spacing updated");
        });
        newLayer.find(".spacing-slider")[0].ondblclick = function () {
            this.noUiSlider.set(0);
        }

        noUiSlider.create(newLayer.find(".radius-slider")[0], {
            start: Math.sqrt(svgText.layerKitObjects[svgText.currentView][currentTextIndex].radius), connect: "lower", range: {
                'min': 5,
                'max': 20
            }
        });
        newLayer.find(".radius-slider")[0].noUiSlider.on('update', function (values) {
            var thisTextIndex = svgText.currentLayer;
            if ($("#layer_svg" + svgText.currentView + thisTextIndex).length > 0) {
                var radius_sq = parseFloat(values[0]) * parseFloat(values[0]);
                svgText.layerKitObjects[svgText.currentView][thisTextIndex].radius = radius_sq;
                svgText.makeKitSvgFrom(thisTextIndex, kitIndex);
                console.log('kit calling resizeSvgText 3');
                svgText.resizeKitSvgText(thisTextIndex, null, kitIndex);
                svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            }
            Builder.hasChanged("radius updated");
        });
        newLayer.find(".radius-slider")[0].ondblclick = function () {
            this.noUiSlider.set(Math.sqrt(200));
        }
        svgText.makeKitSvgFrom(currentTextIndex, kitIndex);
        console.log('kit calling resizeSvgText 4');
        svgText.resizeKitSvgText(currentTextIndex, fromLoad, kitIndex);
        svgText.pricing.getCustomKitPanels(kitIndex);
        $("#layer_svg" + svgText.currentView + currentTextIndex).attr("data-index", currentTextIndex);
        $("#paletteLayer" + svgText.currentView + currentTextIndex + ", #layer_svg" + svgText.currentView + currentTextIndex).click(function (e) {
            var thisTextIndex = $(this).attr("data-index");
            console.log('current kit clicked ', kitIndex);
            Builder.doubleKit = kitIndex;
            if (kitIndex == 2 || kitIndex == 4) {

                // var view = svgText.currentView;
                var view = $('.preview-nav.kit_' + kitIndex + ' a.active').attr('data-view');
                var currentView = view.split('_');
                svgText.currentView = '_' + currentView[1] + '_' + kitIndex;
                svgText.setKitView(view, kitIndex);
            }
            svgText.setKitActiveLayer(thisTextIndex, kitIndex);
            Builder.hasChanged("kit reindex?");
        });
    },
    ////////End////////////////////////////
    choptspans: function (displaystring) {//console.log('svg: chop', displaystring);
        var result = "<tspan>" + displaystring.split("").join("</tspan><tspan>") + "</tspan>";
        return result;
    },
    makeSvgFrom: function (currentTextIndex) {
        console.log('svg: makeSvgFrom');

        var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
        var svg_holder = "#svg_nopath";
        var view_index = svgText.currentView + currentTextIndex;

        if ($('#layer_svg' + view_index).length > 0) {//console.log('svg: a');
            var this_text = $('#layer_svg' + view_index);
            this_text.html($(svg_holder).find("svg").html().replace(/myTextPath/g, "myTextPath" + view_index).replace(/textPathGroup/g, "textPathGroup" + view_index).replace('tempId', 'layer_svg' + view_index));
        }
        else {//console.log('svg: b');
            $("#CUSTOM" + svgText.currentView).append($(svg_holder).html().replace(/myTextPath/g, "myTextPath" + view_index).replace(/textPathGroup/g, "textPathGroup" + view_index).replace('tempId', 'layer_svg' + view_index));
            var this_text = $('#layer_svg' + view_index);
            this_text.attr('data-scale-x', 1)
            this_text.attr('data-scale-y', 1)
        }
        this_text.attr('class', layout + " resize-drag svgEmbedded svgEmbeddedText");

        //console.log('svg: INIT', this_text.find('g[data-type="textbounds"]')[0], this_text.find('g[data-type="textbounds"]')[0].outerHTML);
        svgText.styleSvgText(currentTextIndex);
        //svgText.resizeSvgText( currentTextIndex );

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById(this_text.parent().attr('id')).appendChild(nn);
        this_text.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        var mask = svgText.layerObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = Product.masks[svgText.currentView.substr(1)][0].name;
        $('#layer_svg' + view_index).parent().attr('clip-path',
			"url(#mask-" + mask + svgText.currentView + ")");

        //console.log('svg: INIT', this_text.find('g[data-type="textbounds"]')[0], this_text.find('g[data-type="textbounds"]')[0].outerHTML);
        Builder.hasChanged("make svg from");
    },
    makeKitSvgFrom: function (currentTextIndex, kitNo) {
        console.log('svg: makeKitSvgFrom');

        var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
        var svg_holder = "#svg_nopath";
        var view_index = svgText.currentView + currentTextIndex;

        if ($('#layer_svg' + view_index).length > 0) {//console.log('svg: a');
            var this_text = $('#layer_svg' + view_index);
            this_text.html($(svg_holder).find("svg").html().replace(/myTextPath/g, "myTextPath" + view_index).replace(/textPathGroup/g, "textPathGroup" + view_index).replace('tempId', 'layer_svg' + view_index));
        }
        else {//console.log('svg: b');
            $("#CUSTOM" + svgText.currentView).append($(svg_holder).html().replace(/myTextPath/g, "myTextPath" + view_index).replace(/textPathGroup/g, "textPathGroup" + view_index).replace('tempId', 'layer_svg' + view_index));
            var this_text = $('#layer_svg' + view_index);
            this_text.attr('data-scale-x', 1)
            this_text.attr('data-scale-y', 1)
        }
        this_text.attr('class', layout + " resize-drag svgEmbedded svgEmbeddedText");

        //console.log('svg: INIT', this_text.find('g[data-type="textbounds"]')[0], this_text.find('g[data-type="textbounds"]')[0].outerHTML);
        svgText.styleKitSvgText(currentTextIndex);
        //svgText.resizeSvgText( currentTextIndex );

        var nn = document.createElementNS('http://www.w3.org/2000/svg', "g");
        document.getElementById(this_text.parent().attr('id')).appendChild(nn);
        this_text.appendTo(nn);
        nn.id = 'layer_g' + view_index;

        var mask = svgText.layerKitObjects[svgText.currentView][currentTextIndex].mask;
        if (!mask) mask = ProductKit['kit_' + kitNo].masks[svgText.currentView.substr(1)][0].name; //Product.masks[svgText.currentView.substr(1)][0].name;
        $('#layer_svg' + view_index).parent().attr('clip-path',
			"url(#mask-" + mask + svgText.currentView + ")");

        //console.log('svg: INIT', this_text.find('g[data-type="textbounds"]')[0], this_text.find('g[data-type="textbounds"]')[0].outerHTML);
        Builder.hasChanged("kit make svg from");
    },
    styleSvgText: function (currentTextIndex) {
        console.log('svg: styleSvgText');

        console.log(currentTextIndex, svgText.layerObjects[svgText.currentView][currentTextIndex].width);

        var thetext = svgText.layerObjects[svgText.currentView][currentTextIndex].text;
        var ctl = thetext.length;
        var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
        var view_index = svgText.currentView + currentTextIndex;
        var this_text = $('#layer_svg' + view_index);

        //console.log('svg: #layer_svg'+ view_index, layout);
        //console.log(this_text.length);

        if (layout == "stdarc" || layout == "revarc" || layout == "reversearch") {
            //$("#paletteLayer" + svgText.currentView + currentTextIndex + " .curveradius").removeClass("not-applicable");
        }
        else {
            $("#paletteLayer" + svgText.currentView + currentTextIndex + " .curveradius").addClass("not-applicable");
        }

        //get previously set styles
        this_text.find('*[data-type="filltxt"]').css({ 'font-family': svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily });
        this_text.find('*[data-type="stroketxt"]').css({ 'font-family': svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily });
        this_text.find('*[data-style="filltxt"]')[0].style.fill = svgText.layerObjects[svgText.currentView][currentTextIndex].fillcolor;
        this_text.find('*[data-style="stroketxt"]')[0].style.stroke = svgText.layerObjects[svgText.currentView][currentTextIndex].strokecolor;
        this_text.find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerObjects[svgText.currentView][currentTextIndex].strokewidth;
        this_text.find('*[data-style="filltxt"]')[0].style.letterSpacing = svgText.layerObjects[svgText.currentView][currentTextIndex].spacing;
        this_text.find('*[data-style="stroketxt"]')[0].style.letterSpacing = svgText.layerObjects[svgText.currentView][currentTextIndex].spacing;
        this_text.attr('x', svgText.layerObjects[svgText.currentView][currentTextIndex].x)
        this_text.attr('y', svgText.layerObjects[svgText.currentView][currentTextIndex].y)
        //console.log(svgText.layerObjects[svgText.currentView][currentTextIndex].x, svgText.layerObjects[svgText.currentView][currentTextIndex].y, svgText.layerObjects[svgText.currentView][currentTextIndex]);
        var base_radius = svgText.layerObjects[svgText.currentView][currentTextIndex].radius;

        if (svgText.layerObjects[svgText.currentView][currentTextIndex].fontfamily == 'athletic')
            thetext = thetext.toUpperCase()
        this_text.find('*[data-type="filltxt"]').empty().html(svgText.choptspans(thetext));
        this_text.find('*[data-type="stroketxt"]').empty().html(svgText.choptspans(thetext));

        //base sizer
        var sizer = (190 - (ctl)) / (ctl + 1); //attempts to get a dynamic size based on a 200px wide space; only sort of works because fonts are sometimes wide or thin. 
        sizer = 14; //so nevermind that, we'll just use one size
        var spacing = svgText.layerObjects[svgText.currentView][currentTextIndex].spacing;

        if (layout == 'straight' || layout == "stdarc" || layout == "revarc" || layout == "diagonal") {

            this_text.find('tspan').attr('style', 'font-size:' + (sizer * 1.5) + 'px');
            if (layout == "straight")
                this_text.find('tspan:nth-child(1)').attr('dy', (sizer * 0.6) + 'px');
        }
        if (layout == 'staggered') {
            sizer = (150 - sizer * 1.2) / ctl;
            if (sizer > 10) sizer = 10;
            var x_adj = sizer * 0.6;
            var y_adj = (sizer * 1.3);
            var sizer_y = sizer;
            this_text.find('tspan').css({ 'font-size': (sizer * 1.2) + 'px' });
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var offset_x = (sizer * index) + x_adj;
                var offset_y = (y_adj + (sizer_y * index));
                $(this).attr('y', offset_y + 'px').attr('x', offset_x + 'px');
                this_text.find('*[data-type="stroketxt"] tspan:eq(' + index + ')').attr('y', offset_y + 'px').attr('x', offset_x + 'px');
            });
        }

            //ENLARGED ENDS
        else if (layout == 'bowtie' || layout == 'bridge') {

            var widths = [];
            var letterwidths = [];
            var total_width = 0;
            var spacing_adj = 0;

            if (layout == 'reversearch' && base_radius < 400) {
                spacing_adj = (400 - base_radius) * (400 - base_radius) / 50000;
            }
            spacing += spacing_adj;

            var track_width = 0;
            if (layout == 'bowtie' || layout == "bridge") {
                track_width = spacing / 2;
            }
            else {

            }

            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var size_track = (index - (ctl - 1) / 2) / (ctl * 0.5);
                var fattener = Math.abs(size_track);
                var enlarger = ((fattener * fattener * 5) + sizer * 0.9);
                this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('style', 'font-size:' + (enlarger) + 'px');;
                var this_width = $(this)[0].getComputedTextLength();
                letterwidths[index] = this_width;
                widths[index] = this_width + spacing;
                total_width += this_width + spacing;
                if (layout == 'bowtie') {
                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('y', sizer + (enlarger / 3));
                }
                //top
                if (layout == 'bridge') {
                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('y', (sizer * 0.2) + (enlarger / 1.5));
                }
            });

            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                track_width += widths[index] / 2;
                var size_track = (index - (ctl - 1) / 2) / (ctl * 0.5);
                var fattener = Math.abs(size_track);
                var enlarger = ((fattener * fattener * 8) + sizer * 0.9);
                var this_width = widths[index];
                var letter_width = letterwidths[index];
                track_width += widths[index] / 2;

            });
        }
        else if (layout == 'stdarc' || layout == 'revarc' || layout == 'reversearch') {

            var widths = [];
            var letterwidths = [];
            var total_width = 0;
            var spacing_adj = 0;
            if (layout == 'revarc' || layout == 'reversearch' && base_radius < 400) {
                spacing_adj = (400 - base_radius) * (400 - base_radius) / 40000;
            }
            spacing += spacing_adj;

            var track_width = spacing / 2;
            track_width = 0;

            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                //console.log(this);
                //console.log('svg: computed', $(this)[0].getComputedTextLength());
                var this_width = $(this)[0].getComputedTextLength();
                $(this).attr("width", this_width)
                widths[index] = this_width + spacing;
                letterwidths[index] = this_width;
                total_width += this_width + spacing;
            });
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var this_width = widths[index];
                var letter_width = letterwidths[index];
                track_width += widths[index] / 2;
                if (layout == 'stdarc') {
                    var radius = base_radius;
                    var circumference = (radius * 2 * Math.PI);
                    var progress = -2 * Math.PI * ((track_width - total_width / 2) + circumference / 4);
                    var progress2 = -2 * Math.PI * ((track_width + letter_width / 2 - total_width / 2) + circumference / 4);
                    var progress3 = -2 * Math.PI * ((track_width - total_width / 2 - spacing_adj / 2) + circumference / 4);
                    var x = radius * -Math.cos(progress / circumference);
                    var y = radius * Math.sin(progress / circumference);
                    //rotation of the letter
                    var r = -90 + -57.295779513 * progress / circumference;
                    var x_adj = (letter_width * Math.sin(progress / circumference)) / 2;
                    var y_adj = (letter_width * Math.cos(progress / circumference)) / 2;

                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
                    .attr('y', y + y_adj + base_radius + sizer * 2)
                    .attr("rotate", r.toFixed(2));

                }
                if (layout == 'revarc' || layout == 'reversearch') {
                    var radius = base_radius + sizer;
                    var circumference = (radius * 2 * Math.PI);
                    var progress = 2 * Math.PI * (track_width - total_width / 2 + circumference / 4);
                    var progress2 = 2 * Math.PI * ((track_width + letter_width / 2 - total_width / 2) + circumference / 4);
                    var progress3 = 2 * Math.PI * ((track_width - total_width / 2 - spacing_adj / 2) + circumference / 4);
                    var x = radius * -Math.cos(progress / circumference);
                    var y = radius * Math.sin(progress / circumference);
                    //rotation of the letter
                    var r = 90 + -57.295779513 * progress / circumference;
                    var x_adj = -(letter_width * Math.sin(progress2 / circumference)) / 2
                    var y_adj = -(letter_width * Math.cos(progress2 / circumference)) / 2

                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
					.attr('y', y + y_adj + base_radius + sizer * 2)
					.attr("rotate", r.toFixed(2));
                }
                track_width += widths[index] / 2;

            });
        }
        else if (layout == 'vertical') {
            sizer = (150 - sizer * 1.2) / ctl;
            var y_adj = (sizer * 1);
            var sizer_y = sizer;
            this_text.find('tspan').css({ 'font-size': (sizer * 1) + 'px' });
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var offset_x = sizer * 1.5;
                var offset_y = (y_adj + (sizer_y * index));
                $(this).attr('y', offset_y + 'px').attr('x', offset_x + 'px');
                this_text.find('*[data-type="stroketxt"] tspan:eq(' + index + ')').attr('y', offset_y + 'px').attr('x', offset_x + 'px');
            });
        }
            //bookend
        else if (layout == 'bookends') {
            this_text.find('tspan').attr('style', 'font-size:' + (sizer * 1.2) + 'px');
            this_text.find('tspan:first-child, tspan:last-child').attr('style', 'font-size:' + (sizer * 2) + 'px');
            if (ctl >= 3) {
                this_text.find('tspan:nth-child(2)').attr("dy", sizer * -0.25 + 'px');
                this_text.find('tspan:nth-child(' + (ctl) + ')').attr("dy", sizer * 0.25 + 'px');
            }
            this_text.find('tspan:nth-child(1)').attr('dy', (sizer * 0.8) + 'px');
        }
        else if (layout == 'pennant') {

            var size_mod = (sizer * 1.7) / ctl;
            var size_track = (sizer * 1.7) + (size_mod * (ctl / 2));
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {

                size_track -= size_mod;
                $(this).attr('style', 'font-size:' + size_track + 'px').attr("dy", -size_mod / 4 + 'px');
                this_text.find('*[data-type="stroketxt"] tspan:eq(' + index + ')').attr('style', 'font-size:' + size_track + 'px').attr("dy", -size_mod / 4 + 'px');
            });

            this_text.find('tspan:nth-child(1)').attr('dy', (sizer * 0.8) + 'px');
        }
        else if (layout == 'verticalarch') {
            var widths = [];
            var letterwidths = [];
            var total_width = 0;
            var spacing_adj = 0;
            spacing += spacing_adj;
            var track_width = 0;
            track_width = spacing / 2;
            //var r = -90 + -57.295779513 * progress / circumference;
            //var x_adj = (letter_width * Math.sin(progress / circumference)) / 2;
            //var y_adj = (letter_width * Math.cos(progress / circumference)) / 2;

            //this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
            //.attr('y', y + y_adj + base_radius + sizer * 2)
            //.attr("rotate", r.toFixed(2));
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var size_track = (index - (ctl - 1) / 2) / (ctl * 0.5);
                var fattener = Math.abs(size_track);
                var enlarger = ((fattener * fattener * 2));
                var this_width = $(this)[0].getComputedTextLength();
                letterwidths[index] = this_width;
                widths[index] = this_width + spacing;
                total_width += this_width + spacing;
                this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('y', (sizer * 0.6) + (enlarger));
            });
        }
        Builder.hasChanged("text style changed");

    },
    styleKitSvgText: function (currentTextIndex) {
        console.log('svg: KitstyleSvgText');

        console.log(currentTextIndex, svgText.layerKitObjects[svgText.currentView][currentTextIndex].width);

        var thetext = svgText.layerKitObjects[svgText.currentView][currentTextIndex].text;
        var ctl = thetext.length;
        var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
        var view_index = svgText.currentView + currentTextIndex;
        var this_text = $('#layer_svg' + view_index);

        //console.log('svg: #layer_svg'+ view_index, layout);
        //console.log(this_text.length);

        if (layout == "stdarc" || layout == "revarc" || layout == "reversearch") {
            //$("#paletteLayer" + svgText.currentView + currentTextIndex + " .curveradius").removeClass("not-applicable");
        }
        else {
            $("#paletteLayer" + svgText.currentView + currentTextIndex + " .curveradius").addClass("not-applicable");
        }

        //get previously set styles
        this_text.find('*[data-type="filltxt"]').css({ 'font-family': svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily });
        this_text.find('*[data-type="stroketxt"]').css({ 'font-family': svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily });
        this_text.find('*[data-style="filltxt"]')[0].style.fill = svgText.layerKitObjects[svgText.currentView][currentTextIndex].fillcolor;
        this_text.find('*[data-style="stroketxt"]')[0].style.stroke = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokecolor;
        this_text.find('*[data-style="stroketxt"]')[0].style.strokeWidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].strokewidth;
        this_text.find('*[data-style="filltxt"]')[0].style.letterSpacing = svgText.layerKitObjects[svgText.currentView][currentTextIndex].spacing;
        this_text.find('*[data-style="stroketxt"]')[0].style.letterSpacing = svgText.layerKitObjects[svgText.currentView][currentTextIndex].spacing;
        this_text.attr('x', svgText.layerKitObjects[svgText.currentView][currentTextIndex].x)
        this_text.attr('y', svgText.layerKitObjects[svgText.currentView][currentTextIndex].y)
        //console.log(svgText.layerObjects[svgText.currentView][currentTextIndex].x, svgText.layerObjects[svgText.currentView][currentTextIndex].y, svgText.layerObjects[svgText.currentView][currentTextIndex]);
        var base_radius = svgText.layerKitObjects[svgText.currentView][currentTextIndex].radius;

        if (svgText.layerKitObjects[svgText.currentView][currentTextIndex].fontfamily == 'athletic')
            thetext = thetext.toUpperCase()
        this_text.find('*[data-type="filltxt"]').empty().html(svgText.choptspans(thetext));
        this_text.find('*[data-type="stroketxt"]').empty().html(svgText.choptspans(thetext));

        //base sizer
        var sizer = (190 - (ctl)) / (ctl + 1); //attempts to get a dynamic size based on a 200px wide space; only sort of works because fonts are sometimes wide or thin. 
        sizer = 12; //so nevermind that, we'll just use one size
        var spacing = svgText.layerKitObjects[svgText.currentView][currentTextIndex].spacing;

        if (layout == 'straight' || layout == "stdarc" || layout == "revarc" || layout == "diagonal") {

            this_text.find('tspan').attr('style', 'font-size:' + (sizer * 1.5) + 'px');
            if (layout == "straight")
                this_text.find('tspan:nth-child(1)').attr('dy', (sizer * 0.6) + 'px');
        }
        if (layout == 'staggered') {
            sizer = (150 - sizer * 1.2) / ctl;
            if (sizer > 10) sizer = 10;
            var x_adj = sizer * 0.6;
            var y_adj = (sizer * 1.3);
            var sizer_y = sizer;
            this_text.find('tspan').css({ 'font-size': (sizer * 1.2) + 'px' });
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var offset_x = (sizer * index) + x_adj;
                var offset_y = (y_adj + (sizer_y * index));
                $(this).attr('y', offset_y + 'px').attr('x', offset_x + 'px');
                this_text.find('*[data-type="stroketxt"] tspan:eq(' + index + ')').attr('y', offset_y + 'px').attr('x', offset_x + 'px');
            });
        }

            //ENLARGED ENDS
        else if (layout == 'bowtie' || layout == 'reversearch' || layout == 'bridge') {
            var widths = [];
            var letterwidths = [];
            var total_width = 0;
            var spacing_adj = 0;

            if (layout == 'reversearch' && base_radius < 400) {
                spacing_adj = (400 - base_radius) * (400 - base_radius) / 50000;
            }
            spacing += spacing_adj;

            var track_width = 0;
            if (layout == 'bowtie' || layout == "bridge") {
                track_width = spacing / 2;
            }
            else {

            }

            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var size_track = (index - (ctl - 1) / 2) / (ctl * 0.5);
                var fattener = Math.abs(size_track);
                var enlarger = ((fattener * fattener * 8) + sizer * 0.9);
                this_text.find('tspan:nth-child(' + (index + 1) + ')');
                var this_width = $(this)[0].getComputedTextLength();
                letterwidths[index] = this_width;
                widths[index] = this_width + spacing;
                total_width += this_width + spacing;
                if (layout == 'bowtie') {
                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('y', sizer + (enlarger / 3));
                }
                //top
                if (layout == 'bridge') {
                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('y', (sizer * 0.2) + (enlarger / 1.5));
                }
            });

            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                track_width += widths[index] / 2;
                var size_track = (index - (ctl - 1) / 2) / (ctl * 0.5);
                var fattener = Math.abs(size_track);
                var enlarger = ((fattener * fattener * 8) + sizer * 0.9);
                var this_width = widths[index];
                var letter_width = letterwidths[index];

                //if (layout == 'verticalarch') {
                //    var radius = base_radius + (sizer - enlarger) * 0.9;
                //    var circumference = (radius * 2 * Math.PI);
                //    var base_circumference = (base_radius * 2 * Math.PI);
                //    var diff_offset = (circumference / base_circumference);
                //    //diff_offset = 1;
                //    var progress = -2 * Math.PI * ((track_width - total_width / 2) * diff_offset + circumference / 4);
                //    var progress2 = 2 * Math.PI * ((track_width + this_width / 2 - total_width / 2) + circumference / 4);
                //    var x = radius * -Math.cos(progress / circumference);
                //    var y = radius * Math.sin(progress / circumference);
                //    //rotation of the letter
                //    var r = -90 + -57.295779513 * progress / circumference;
                //    var x_adj = (letter_width * Math.sin(progress / circumference)) / 2;
                //    var y_adj = (letter_width * Math.cos(progress / circumference)) / 2;

                //    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
                //	.attr('y', y + y_adj + base_radius + sizer * 2)
                //	.attr("rotate", r.toFixed(2));
                //}
                if (layout == 'reversearch') {

                    var radius = base_radius;
                    var circumference = (radius * 2 * Math.PI);
                    var base_circumference = (base_radius * 2 * Math.PI);
                    var diff_offset = (base_circumference / circumference);
                    diff_offset = 1;
                    var progress = 2 * Math.PI * ((track_width - total_width / 2) + circumference / 4);
                    var progress2 = 2 * Math.PI * ((track_width + this_width / 2 - total_width / 2) + circumference / 4);
                    var progress3 = 2 * Math.PI * ((track_width - total_width / 2 - spacing_adj / 2) + circumference / 4);
                    var x = radius * -Math.cos(progress / circumference);
                    var y = radius * Math.sin(progress / circumference);
                    //rotation of the letter
                    var r = 90 + -57.295779513 * progress3 / circumference;
                    var x_adj = -(letter_width * Math.sin(progress2 / circumference)) / 2
                    var y_adj = -(letter_width * Math.cos(progress2 / circumference)) / 2
                    //x_adj = y_adj = 0;

                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
					.attr('y', y + y_adj + base_radius + sizer * 2)
					.attr("rotate", r.toFixed(2));
                    //$("#dots").append('<circle cx="'+(x+ 100)+'" cy="'+(y + sizer + 100 - base_radius)+'" r="1" fill="blue" />\r\n');

                }
                track_width += widths[index] / 2;

            });
        }
        else if (layout == 'stdarc' || layout == 'revarc') {

            var widths = [];
            var letterwidths = [];
            var total_width = 0;
            var spacing_adj = 0;
            if (layout == 'revarc' && base_radius < 400) {
                spacing_adj = (400 - base_radius) * (400 - base_radius) / 40000;
            }
            spacing += spacing_adj;

            var track_width = spacing / 2;
            track_width = 0;

            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                //console.log(this);
                //console.log('svg: computed', $(this)[0].getComputedTextLength());
                var this_width = $(this)[0].getComputedTextLength();
                $(this).attr("width", this_width)
                widths[index] = this_width + spacing;
                letterwidths[index] = this_width;
                total_width += this_width + spacing;
            });
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var this_width = widths[index];
                var letter_width = letterwidths[index];
                track_width += widths[index] / 2;
                if (layout == 'stdarc') {

                    var radius = base_radius;
                    var circumference = (radius * 2 * Math.PI);
                    var progress = -2 * Math.PI * ((track_width - total_width / 2) + circumference / 4);
                    var progress2 = -2 * Math.PI * ((track_width + letter_width / 2 - total_width / 2) + circumference / 4);
                    var progress3 = -2 * Math.PI * ((track_width - total_width / 2 - spacing_adj / 2) + circumference / 4);
                    var x = radius * -Math.cos(progress / circumference);
                    var y = radius * Math.sin(progress / circumference);
                    //rotation of the letter
                    var r = -90 + -57.295779513 * progress / circumference;
                    var x_adj = (letter_width * Math.sin(progress / circumference)) / 2;
                    var y_adj = (letter_width * Math.cos(progress / circumference)) / 2;

                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
					.attr('y', y + y_adj + base_radius + sizer * 2)
					.attr("rotate", r.toFixed(2));
                }
                if (layout == 'revarc') {
                    var radius = base_radius + sizer;
                    var circumference = (radius * 2 * Math.PI);
                    var progress = 2 * Math.PI * (track_width - total_width / 2 + circumference / 4);
                    var progress2 = 2 * Math.PI * ((track_width + letter_width / 2 - total_width / 2) + circumference / 4);
                    var progress3 = 2 * Math.PI * ((track_width - total_width / 2 - spacing_adj / 2) + circumference / 4);
                    var x = radius * -Math.cos(progress / circumference);
                    var y = radius * Math.sin(progress / circumference);
                    //rotation of the letter
                    var r = 90 + -57.295779513 * progress / circumference;
                    var x_adj = -(letter_width * Math.sin(progress2 / circumference)) / 2
                    var y_adj = -(letter_width * Math.cos(progress2 / circumference)) / 2

                    this_text.find('tspan:nth-child(' + (index + 1) + ')').attr('x', x + x_adj + (total_width) / 2)
					.attr('y', y + y_adj + base_radius + sizer * 2)
					.attr("rotate", r.toFixed(2));
                }
                track_width += widths[index] / 2;

            });
        }
        else if (layout == 'vertical') {
            sizer = (150 - sizer * 1.2) / ctl;
            var y_adj = (sizer * 1);
            var sizer_y = sizer;
            this_text.find('tspan').css({ 'font-size': (sizer * 1) + 'px' });
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                var offset_x = sizer * 1.5;
                var offset_y = (y_adj + (sizer_y * index));
                $(this).attr('y', offset_y + 'px').attr('x', offset_x + 'px');
                this_text.find('*[data-type="stroketxt"] tspan:eq(' + index + ')').attr('y', offset_y + 'px').attr('x', offset_x + 'px');
            });
        }
            //bookend
        else if (layout == 'bookends') {
            this_text.find('tspan').attr('style', 'font-size:' + (sizer * 1.2) + 'px');
            this_text.find('tspan:first-child, tspan:last-child').attr('style', 'font-size:' + (sizer * 2) + 'px');
            if (ctl >= 3) {
                this_text.find('tspan:nth-child(2)').attr("dy", sizer * -0.25 + 'px');
                this_text.find('tspan:nth-child(' + (ctl) + ')').attr("dy", sizer * 0.25 + 'px');
            }
            this_text.find('tspan:nth-child(1)').attr('dy', (sizer * 0.8) + 'px');
        }
        else if (layout == 'pennant') {
            var size_mod = (sizer * 1.7) / ctl;
            var size_track = (sizer * 1.7) + (size_mod * (ctl / 2));
            this_text.find('*[data-type="filltxt"] tspan').each(function (index) {
                size_track -= size_mod;
                $(this).attr('style', 'font-size:' + size_track + 'px').attr("dy", -size_mod / 4 + 'px');
                this_text.find('*[data-type="stroketxt"] tspan:eq(' + index + ')').attr('style', 'font-size:' + size_track + 'px').attr("dy", -size_mod / 4 + 'px');
            });

            this_text.find('tspan:nth-child(1)').attr('dy', (sizer * 0.8) + 'px');
        }

        Builder.hasChanged("Kit text style changed");

    },
    resizeSvgText: function (currentTextIndex, fromLoadText) {

        console.log('svg: resizeSvgText', currentTextIndex);
        console.log('svg: fromLoadText?', fromLoadText);

        console.log(currentTextIndex, svgText.layerObjects[svgText.currentView][currentTextIndex].width);
        console.log('before', svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);


        console.log(1, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);

        var this_text = $('#layer_svg' + svgText.currentView + currentTextIndex);
        //console.log(this_text);
        var layout = svgText.layerObjects[svgText.currentView][currentTextIndex].layout;
        var scaleX = parseFloat(this_text.attr('data-scale-x'));
        var scaleY = parseFloat(this_text.attr('data-scale-y'));
        //console.log(scaleX, scaleY);

        console.log(2, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);

        //if ( layout == 'vertical' || layout == 'diagonal' )	scaleX = scaleY = 1;

        //final sizing 
        var bbox = this_text.find('g[data-type="textbounds"]')[0].getBBox();
        //console.log(this_text.find('g[data-type="textbounds"]')[0]);
        //console.log(bbox);
        var this_width = bbox.width + 10;
        var this_height = bbox.height + 10;

        console.log(3, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        if (layout == 'vertical' ||
			layout == 'reversearch' ||
			layout == 'stdarc' ||
			layout == 'revarc') {
            this_text.find('g[data-type="textbounds"]').attr("transform", "translate(" + (5 - bbox.x) + "," + (5 - bbox.y) + ")");
        }

        if (layout == 'verticalarch') {
            this_text.find('g[data-type="textbounds"]').attr("transform", "translate(" + (-bbox.width / 2) + "," + (5 - bbox.y) + ")");
        }
        if (layout == 'bowtie' || layout == 'bridge') {
            this_text.find('g[data-type="textbounds"]').attr("transform", "translate(" + (-bbox.width / 2) + "," + (5 - bbox.y) + ")");
        }
        if (layout == "diagonal") {

            var angle = Product.hasOwnProperty('customAngle') ? Product.customAngle : 34.5;
            console.log('DIAG', angle);
            var direction = "-";
            if (svgText.currentView == "_Front") {
                angle = -angle;
                direction = "";
            }
            this_text.find('text').attr('transform', 'skewY(' + angle + ')');
            this_height = this_text.find('g[data-type="textbounds"]')[0].getBBox().height + 10;
            this_text.find('text').attr('transform', 'translate(0 ' + direction + (this_height - 12) / 2.3 + ') skewY(' + angle + ')');
        }
        this_text.attr('data-orig-w', this_width)
				.attr('data-orig-h', this_height)

        console.log(4, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        var size_limit = 300;
        if (svgText.loadFlag == true) {
            size_limit = 99999;
            //console.log("disable max size for loaded text items")
        }
        if (this_width * scaleX > size_limit) {
            var newscale = size_limit / (this_width * scaleX);
            scaleX = scaleX * newscale;
            scaleY = scaleY * newscale;
        }
        if (this_height * scaleY > size_limit) {
            var newscale = size_limit / (this_height * scaleY);
            scaleX = scaleX * newscale;
            scaleY = scaleY * newscale;
        }

        console.log(5, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        this_text.attr('viewBox', '0 0 ' + this_width + ' ' + this_height);

        if (fromLoadText) {
            var loadHeight = svgText.layerObjects[svgText.currentView][currentTextIndex].height;
            //Large text size 
            var loadWidth = svgText.layerObjects[svgText.currentView][currentTextIndex].width;
            scaleX = loadWidth / this_width;
            scaleY = loadWidth / this_height;

            this_width = svgText.layerObjects[svgText.currentView][currentTextIndex].width;
            this_height = svgText.layerObjects[svgText.currentView][currentTextIndex].height;
        }

        this_text.attr('width', this_width * scaleX)
				.attr('height', this_height * scaleY);

        console.log(6, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);
        var r = svgText.layerObjects[svgText.currentView][currentTextIndex].rotation;
        $("#layer_svg" + svgText.currentView + currentTextIndex + " g[data-type='rotategroup']").attr('transform', 'rotate(' + r + ' ' + this_width / 2 + ' ' + this_height / 2 + ')');

        console.log(7, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = this_width;
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = this_height

        console.log(8, svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        svgText.setActiveLayer(currentTextIndex);

        console.log('after', svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);

        Builder.hasChanged("text svg resized");
    },
    resizeKitSvgText: function (currentTextIndex, fromLoadText, kitNo) {

        console.log('svg:Kit resizeSvgText', currentTextIndex, kitNo);
        console.log('svg:Kit fromLoadText?', fromLoadText);

        console.log(currentTextIndex, svgText.layerKitObjects[svgText.currentView][currentTextIndex].width);
        console.log('before', svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);


        console.log(1, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);

        var this_text = $('#layer_svg' + svgText.currentView + currentTextIndex);
        console.log(this_text);
        var layout = svgText.layerKitObjects[svgText.currentView][currentTextIndex].layout;
        var scaleX = parseFloat(this_text.attr('data-scale-x'));
        var scaleY = parseFloat(this_text.attr('data-scale-y'));
        //console.log(scaleX, scaleY);

        console.log(2, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);

        //if ( layout == 'vertical' || layout == 'diagonal' )	scaleX = scaleY = 1;

        //final sizing 
        var kb = this_text.find('g[data-type="textbounds"]')[0];
        console.log('kb ', kitNo, kb);
        var bbox = this_text.find('g[data-type="textbounds"]')[0].getBBox();

        console.log('kit text_' + kitNo);
        //console.log(this_text.find('g[data-type="textbounds"]')[0]);
        //console.log(bbox);
        var this_width = bbox.width + 10;
        var this_height = bbox.height + 10;

        //if (kitNo == 0) {
        //    var this_width = bbox.width + 10;
        //    var this_height = bbox.height + 10;
        //}
        //else {
        //    var this_width = 70.125 + 10;
        //    var this_height = 28.265625 + 10;
        //}

        console.log(3, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        if (layout == 'vertical' ||

			layout == 'reversearch' ||
			layout == 'stdarc' ||
			layout == 'revarc') {
            this_text.find('g[data-type="textbounds"]').attr("transform", "translate(" + (5 - bbox.x) + "," + (5 - bbox.y) + ")");
        }
        if (layout == 'verticalarch') {
            this_text.find('g[data-type="textbounds"]').attr("transform", "translate(" + (-bbox.width / 2) + "," + (5 - bbox.y) + ")");
        }

        if (layout == 'bowtie' || layout == 'bridge') {
            this_text.find('g[data-type="textbounds"]').attr("transform", "translate(" + (-bbox.width / 2) + "," + (5 - bbox.y) + ")");
        }
        if (layout == "diagonal") {

            var angle = Product.hasOwnProperty('customAngle') ? Product.customAngle : 34.5;
            console.log('DIAG', angle);
            var direction = "-";
            if (svgText.currentView == "_Front") {
                angle = -angle;
                direction = "";
            }
            this_text.find('text').attr('transform', 'skewY(' + angle + ')');
            this_height = this_text.find('g[data-type="textbounds"]')[0].getBBox().height + 10;
            this_text.find('text').attr('transform', 'translate(0 ' + direction + (this_height - 12) / 2.3 + ') skewY(' + angle + ')');
        }
        this_text.attr('data-orig-w', this_width)
				.attr('data-orig-h', this_height)

        console.log(4, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        var size_limit = 300;
        if (svgText.loadFlag == true) {
            size_limit = 99999;
            //console.log("disable max size for loaded text items")
        }
        if (this_width * scaleX > size_limit) {
            var newscale = size_limit / (this_width * scaleX);
            scaleX = scaleX * newscale;
            scaleY = scaleY * newscale;
        }
        if (this_height * scaleY > size_limit) {
            var newscale = size_limit / (this_height * scaleY);
            scaleX = scaleX * newscale;
            scaleY = scaleY * newscale;
        }

        console.log(5, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        this_text.attr('viewBox', '0 0 ' + this_width + ' ' + this_height);

        if (fromLoadText) {
            var loadWidth = svgText.layerKitObjects[svgText.currentView][currentTextIndex].width;
            var loadHeight = svgText.layerKitObjects[svgText.currentView][currentTextIndex].height;
            scaleX = loadWidth / this_width;
            scaleY = loadWidth / this_height;

            this_width = svgText.layerKitObjects[svgText.currentView][currentTextIndex].width;
            this_height = svgText.layerKitObjects[svgText.currentView][currentTextIndex].height;
        }

        this_text.attr('width', this_width * scaleX)
				.attr('height', this_height * scaleY);

        //8-9-2019
        //Important--saved Text Size will be larger when reload the page or when redirecting login fom cliffkeen site.
        //Start
        //if (kitNo === 0) {
        //   this_text.attr('viewBox', '0 0 ' + this_width + ' ' + this_height); //Override ViewBox
        //}
        //End

        console.log(6, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        var r = svgText.layerKitObjects[svgText.currentView][currentTextIndex].rotation;
        $("#layer_svg" + svgText.currentView + currentTextIndex + " g[data-type='rotategroup']").attr('transform', 'rotate(' + r + ' ' + this_width / 2 + ' ' + this_height / 2 + ')');

        console.log(7, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = this_width;
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = this_height

        console.log(8, svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);
        console.log('this_width', this_width);

        svgText.setKitActiveLayer(currentTextIndex, kitNo);

        console.log('after', svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);

        Builder.hasChanged("Kit text svg resized");

    },
    placeTextCentered: function () {
        console.log('svg: placeTextCentered');
        var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
        var scaleX = parseFloat(this_text.attr('data-scale-x'));
        var scaleY = parseFloat(this_text.attr('data-scale-y'));
        var revScale = 1 / svgText.bbScale;
        var this_width = parseFloat(this_text.attr("width"));
        var this_height = parseFloat(this_text.attr("height"));
        var container = $(".canvas-wrapper.active > .svg > svg ");
        var containerBox = {};
        if (svgText.layerObjects[svgText.currentView][svgText.currentLayer].mask != undefined) {
            container = $("#" + svgText.layerObjects[svgText.currentView][svgText.currentLayer].mask + svgText.currentView);
            containerBox = container[0].getBBox();
            var ratio_adj = 1;
            if (this_width > containerBox.width) {
                var ratio_adj = containerBox.width / this_width;
            }
            if (this_height * ratio_adj > containerBox.height) {
                ratio_adj = containerBox.height / (this_height * ratio_adj);
            }
            if (ratio_adj != 1) {
                this_width = this_width * ratio_adj;
                this_height = this_height * ratio_adj;
                svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = this_width;
                svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = this_height;
                this_text.attr("width", this_width)
                this_text.attr("height", this_height)
            }
            var x_pos = containerBox.x + ((containerBox.width - (this_width)) / 2);
            var y_pos = containerBox.y + ((containerBox.height - (this_height)) / 2);
        }
        else {
            var x_pos = ((container.width() * revScale - (this_width)) / 2);
            var y_pos = ((container.height() * revScale - (this_height)) / 2);
        }
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].x = x_pos;
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].y = y_pos;

        svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = this_width;
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = this_height

        this_text.attr('x', x_pos)
				.attr('y', y_pos)
        svgText.setActiveLayer(svgText.currentLayer);
        //4/3/2019
        //sessionStorage.setItem("CurrentPathOfImage", Builder.svgtopng);
        Builder.hasChanged("place new svg text");
    },
    placeImageCentered: function (imgheight, imgwidth) {
        console.log('svg: placeImageCentered');
        var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
        var scaleX = parseFloat(1);
        var scaleY = parseFloat(1);
        var revScale = 1 / svgText.bbScale;
        var this_width = parseFloat(imgwidth);
        var this_height = parseFloat(imgheight);
        var container = $(".canvas-wrapper.active > .svg > svg ");
        var containerBox = {};
        if (svgText.layerObjects[svgText.currentView][svgText.currentLayer].mask != undefined) {
            container = $("#" + svgText.layerObjects[svgText.currentView][svgText.currentLayer].mask + svgText.currentView);
            containerBox = container[0].getBBox();
            var ratio_adj = 1;
            if (this_width > containerBox.width) {
                var ratio_adj = containerBox.width / this_width;
            }
            if (this_height * ratio_adj > containerBox.height) {
                ratio_adj = containerBox.height / (this_height * ratio_adj);
            }
            if (ratio_adj != 1) {
                this_width = this_width * ratio_adj;
                this_height = this_height * ratio_adj;
                svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = this_width;
                svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = this_height;
                this_text.attr("width", this_width)
                this_text.attr("height", this_height)
            }
            var x_pos = containerBox.x + ((containerBox.width - (this_width)) / 2);
            var y_pos = containerBox.y + ((containerBox.height - (this_height)) / 2);
        }
        else {
            var x_pos = ((container.width() * revScale - (this_width)) / 2);
            var y_pos = ((container.height() * revScale - (this_height)) / 2);
        }
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].x = x_pos;
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].y = y_pos;

        svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = this_width;
        svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = this_height

        this_text.attr('x', x_pos)
				.attr('y', y_pos)
        svgText.setActiveLayer(svgText.currentLayer);
        Builder.hasChanged("place new svg text");
    },
    placeKitImageCentered: function (imgheight, imgwidth, kitIndex) {
        console.log('svg: placeImageCentered');
        var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
        var scaleX = parseFloat(1);
        var scaleY = parseFloat(1);
        var revScale = 1 / svgText.bbScale;
        var this_width = parseFloat(imgwidth);
        var this_height = parseFloat(imgheight);
        var container = $(".canvas-wrapper.active > .svg > svg ");
        var containerBox = {};

        if (svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].mask != undefined) {
            container = $("#" + svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].mask + svgText.currentView);
            containerBox = container[0].getBBox();
            var ratio_adj = 1;
            if (this_width > containerBox.width) {
                var ratio_adj = containerBox.width / this_width;
            }
            if (this_height * ratio_adj > containerBox.height) {
                ratio_adj = containerBox.height / (this_height * ratio_adj);
            }
            if (ratio_adj != 1) {
                this_width = this_width * ratio_adj;
                this_height = this_height * ratio_adj;
                svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = this_width;
                svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = this_height;
                this_text.attr("width", this_width)
                this_text.attr("height", this_height)
            }
            var x_pos = containerBox.x + ((containerBox.width - (this_width)) / 2);
            var y_pos = containerBox.y + ((containerBox.height - (this_height)) / 2);
        }
        else {
            var x_pos = ((container.width() * revScale - (this_width)) / 2);
            var y_pos = ((container.height() * revScale - (this_height)) / 2);
        }
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].x = x_pos;
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].y = y_pos;

        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = this_width;
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = this_height

        this_text.attr('x', x_pos)
				.attr('y', y_pos)
        svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
        Builder.hasChanged("place new svg text");
    },
    placeKitTextCentered: function (kitNo) {
        console.log('svg: placeKitTextCentered');

        var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
        var scaleX = parseFloat(this_text.attr('data-scale-x'));
        var scaleY = parseFloat(this_text.attr('data-scale-y'));
        var revScale = 1 / svgText.bbScale;
        var this_width = parseFloat(this_text.attr("width"));
        var this_height = parseFloat(this_text.attr("height"));
        var container = $(".kits.kit_" + kitNo + " .canvas-wrapper.active > .svg > svg ");
        var containerBox = {};
        if (svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].mask != undefined) {
            container = $("#" + svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].mask + svgText.currentView);
            containerBox = container[0].getBBox();
            var ratio_adj = 1;
            if (this_width > containerBox.width) {
                var ratio_adj = containerBox.width / this_width;
            }
            if (this_height * ratio_adj > containerBox.height) {
                ratio_adj = containerBox.height / (this_height * ratio_adj);
            }
            if (ratio_adj != 1) {
                this_width = this_width * ratio_adj;
                this_height = this_height * ratio_adj;
                svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = this_width;
                svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = this_height;
                this_text.attr("width", this_width)
                this_text.attr("height", this_height)
            }
            var x_pos = containerBox.x + ((containerBox.width - (this_width)) / 2);
            var y_pos = containerBox.y + ((containerBox.height - (this_height)) / 2);
        }
        else {
            var x_pos = ((container.width() * revScale - (this_width)) / 2);
            var y_pos = ((container.height() * revScale - (this_height)) / 2);
        }
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].x = x_pos;
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].y = y_pos;

        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = this_width;
        svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = this_height

        this_text.attr('x', x_pos)
				.attr('y', y_pos)

        //Important--When we click directly click on OPTION 1 ,OPTION 2 ,OPTION 3 directly The boundray box is not center position of Text
        // the following condition resolve the above situation
        //2/2/2019
        //var view = $('.preview-nav.kit_' + kitNo + ' a.active').attr('data-view');
        //if (view = "_Front") {
        //    var ActiveKit = $('.kit.active span.active').attr('data-count');
        //    svgText.setKitView(view, ActiveKit);
        //}
        svgText.setKitActiveLayer(svgText.currentLayer, kitNo);
        if (kitNo === 4) {
            $('body').addClass('content');
        }
        else {
            $('body').removeClass('content');
        }
        Builder.hasChanged(" place new kit svg text");
    },
    placeLoadedSvgText: function () {
        console.log('svg: placeLoadedSvgText');

        console.log(svgText.layerObjects[svgText.currentView][svgText.currentLayer].width);

        var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
        var revScale = 1 / svgText.bbScale;
        //var this_width = svgText.layerObjects[svgText.currentView][svgText.currentLayer].width*revScale;
        //var this_height = svgText.layerObjects[svgText.currentView][svgText.currentLayer].height*revScale;
        var this_width = svgText.layerObjects[svgText.currentView][svgText.currentLayer].width;
        var this_height = svgText.layerObjects[svgText.currentView][svgText.currentLayer].height;
        this_text.attr('data-scale-x', parseFloat(this_width / this_text.attr("data-orig-w")));
        this_text.attr('data-scale-y', parseFloat(this_height / this_text.attr("data-orig-h")));
        this_text.attr("width", this_width);
        this_text.attr("height", this_height);
        //$('#layer_svg' + svgText.currentView + svgText.currentLayer + 'g[data-type=rotategroup]').attr("transform", "rotate(-90 49.0703125 15.3984375)");
        //$("#layer_g_Front0 g[data-type='rotategroup']").attr("transform", "rotate(-90 49.0703125 15.3984375)");
        var r = svgText.layerObjects[svgText.currentView][svgText.currentLayer].rotation;
        if (r != 0) {
            svgText.offset_x_change = localStorage.getItem("offset_x_change");
            svgText.offset_y_change = localStorage.getItem("offset_y_change");

            if (svgText.offset_x_change != null && svgText.offset_x_change != "") {
                var thisViewBox = $("#layer_svg" + svgText.currentView + svgText.currentLayer)[0].getAttribute("viewBox").split(' ');
                $("#layer_svg" + svgText.currentView + svgText.currentLayer + " g[data-type='rotategroup']").attr('transform', 'rotate(' + r + ' ' + svgText.offset_x_change + ' ' + svgText.offset_y_change + ')');

            }



        }


        svgText.setActiveLayer(svgText.currentLayer);
        Builder.hasChanged("place loaded svg text");
    },
    placeLoadedKitSvgText: function (kitIndex) {

        console.log('svg:kit placeLoadedSvgText');

        console.log(svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width);

        var this_text = $('#layer_svg' + svgText.currentView + svgText.currentLayer);
        var revScale = 1 / svgText.bbScale;
        //var this_width = svgText.layerObjects[svgText.currentView][svgText.currentLayer].width*revScale;
        //var this_height = svgText.layerObjects[svgText.currentView][svgText.currentLayer].height*revScale;
        var this_width = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width;
        var this_height = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height;
        this_text.attr('data-scale-x', parseFloat(this_width / this_text.attr("data-orig-w")));
        this_text.attr('data-scale-y', parseFloat(this_height / this_text.attr("data-orig-h")));
        this_text.attr("width", this_width);
        this_text.attr("height", this_height);
        var r = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].rotation;
        if (r != 0) {
            svgText.offset_x_change_kit = localStorage.getItem("offset_x_change_kit");
            svgText.offset_y_change_kit = localStorage.getItem("offset_y_change_kit");
            if (svgText.offset_x_change_kit != null && svgText.offset_x_change_kit != "") {
                var thisViewBox = $("#layer_svg" + svgText.currentView + svgText.currentLayer)[0].getAttribute("viewBox").split(' ');
                $("#layer_svg" + svgText.currentView + svgText.currentLayer + " g[data-type='rotategroup']").attr('transform', 'rotate(' + r + ' ' + svgText.offset_x_change_kit + ' ' + svgText.offset_y_change_kit + ')');

            }
        }
        svgText.setKitActiveLayer(svgText.currentLayer, kitIndex);
        Builder.hasChanged("place loaded svg text");
    },
    currentLayer: -1,
    setActiveLayer: function (currentTextIndex) {
        console.log('svg: setActiveLayer', currentTextIndex);
        svgText.currentLayer = currentTextIndex;
        $("#text_palette .palette_active").removeClass("palette_active");
        $("#paletteLayer" + svgText.currentView + currentTextIndex).addClass("palette_active");
        var currentType = svgText.layerObjects[svgText.currentView][svgText.currentLayer].type;
        if (currentType == "imageLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "logoLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "canvaslayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        //Commented code
        //  $("#boundingbox_holder").addClass("bbactive");

        //18/1/2019 (Remove Boundary Box Before loading Image,logo etc)
        if (svg_target.attr('width') === undefined || svg_target.attr('height') === undefined) {
            $("#boundingbox_holder").removeClass("bbactive");
        }
        else {
            $("#boundingbox_holder").addClass("bbactive");
        }
        $("#boundingbox").attr('style', '').css({ 'width': svg_target.attr('width') * svgText.bbScale + 'px', 'height': svg_target.attr('height') * svgText.bbScale + 'px' }).attr('data-x', svg_target.attr('x') * svgText.bbScale).attr('data-y', svg_target.attr('y') * svgText.bbScale);
        //$("#boundingbox")[0].style.webkitTransform =
        //$("#boundingbox")[0].style.transform =
        //'translate3d(' + svg_target.attr('x') * svgText.bbScale + 'px, ' + svg_target.attr('y') * svgText.bbScale + 'px,0)';
        //'left':svg_target.attr('x')+'px', 'top':svg_target.attr('y')+'px',  });
        $("#boundingbox").css({ 'top': svg_target.attr('y') * svgText.bbScale, 'left': svg_target.attr('x') * svgText.bbScale });
        //$("#boundingbox")[0].style.webkitTransform =
        //$("#boundingbox")[0].style.transform = 'rotate(' + svgText.layerObjects[svgText.currentView][svgText.currentLayer].rotation + 'deg)';

        //15/1/2019
        //Important---Show Only Boundary Box, In Step 2 While Use Click on Artwork Otherwise Hide Boundary Box

        //Start         
        var stepNo = $('.row.steps span.active').attr('data-nav');
        if (stepNo != 2) {
            $("#boundingbox").css("display", "none");
        }
        else {
            $("#boundingbox").css("display", "block");
        }
        //End

    },
    setKitActiveLayer: function (currentTextIndex, kitIndex) {
        $('.mask-panel').click(function (event) {
            event.stopPropagation();
            $('#mask-panel').toggle();
        });
        console.log('svg: setKitActiveLayer', currentTextIndex);
        console.log('current view ', svgText.currentView);
        svgText.currentLayer = currentTextIndex;
        var kitCount = svgText.currentView.split("_").length - 1
        if (kitCount < 2) {
            svgText.currentView = svgText.currentView + "_" + kitIndex;
        }
        $("#text_palette_" + kitIndex + " .palette_active").removeClass("palette_active");
        $("#paletteLayer" + svgText.currentView + currentTextIndex).addClass("palette_active");
        var currentType = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].type;
        if (currentType == "imageLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "logoLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "canvaslayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);


        // $("#text_palette_2 .palette_active").removeClass("palette_active");  // Comment 22 Aug 2019

        if (kitIndex == 4) {
            $("#boundingbox_holder").removeClass("bbactive");
            $("#boundingbox").attr('style', '');
            // $("#text_palette_4 .palette_active").removeClass("palette_active");

            $("#boundingbox_holder_kit").addClass("bbactive");
            $("#boundingbox_kit").attr('style', '').css({ 'width': svg_target.attr('width') * KitScale['kit_4'] + 'px', 'height': svg_target.attr('height') * KitScale['kit_4'] + 'px' }).attr('data-x', svg_target.attr('x') * KitScale['kit_4']).attr('data-y', svg_target.attr('y') * KitScale['kit_4']);
            $("#boundingbox_kit").css({ 'top': svg_target.attr('y') * KitScale['kit_4'] + 650, 'left': svg_target.attr('x') * KitScale['kit_4'] });


        }
        else {
            if (kitIndex == 2) {
                $("#boundingbox_holder_kit").removeClass("bbactive");
                $("#boundingbox").attr('style', '');
                // $("#text_palette_2 .palette_active").removeClass("palette_active");
                $("#boundingbox_holder_kit").addClass("bbactive");
                $("#boundingbox").attr('style', '').css({ 'width': svg_target.attr('width') * svgText.bbScale + 'px', 'height': svg_target.attr('height') * svgText.bbScale + 'px' }).attr('data-x', svg_target.attr('x') * svgText.bbScale).attr('data-y', svg_target.attr('y') * svgText.bbScale);
                $("#boundingbox").css({ 'top': svg_target.attr('y') * svgText.bbScale, 'left': svg_target.attr('x') * svgText.bbScale });

            }
            //Commented Code
            // $("#boundingbox_holder").addClass("bbactive");
            //18/1/2019 (Remove Boundary Box Before loading Image,logo etc)
            if (svg_target.attr('width') === undefined || svg_target.attr('height') === undefined) {
                $("#boundingbox_holder").removeClass("bbactive");
            }
            else {
                $("#boundingbox_holder").addClass("bbactive");
            }
            $("#boundingbox").attr('style', '').css({ 'width': svg_target.attr('width') * svgText.bbScale + 'px', 'height': svg_target.attr('height') * svgText.bbScale + 'px' }).attr('data-x', svg_target.attr('x') * svgText.bbScale).attr('data-y', svg_target.attr('y') * svgText.bbScale);
            $("#boundingbox").css({ 'top': svg_target.attr('y') * svgText.bbScale, 'left': svg_target.attr('x') * svgText.bbScale });
        }
        //1/1/2019
        //Important---Show Only Boundary Box, In Step 2 While Use Click on Artwork Otherwise Hide Boundary Box

        //Start         
        var stepNo = $('.row.steps span.active').attr('data-nav');
        if (stepNo != 2) {
            $("#boundingbox").css("display", "none");
        }
        else {
            $("#boundingbox").css("display", "block");
        }
        //End

    },
    showAllArt: function () {
        $(Product.views).each(function (i, e) {
            if (e != false)
                svgText.setView(Builder.VIEWS[i]);
        });
        svgText.setView(Builder.VIEWS[0]);
    },
    clearActiveLayer: function () {
        console.log('svg: clearActiveLayer');
        svgText.currentLayer = -1;
        $("#boundingbox_holder").removeClass("bbactive");
        $("#boundingbox").attr('style', '');
        $("#text_palette .palette_active").removeClass("palette_active");
    },
    pricing: {
        //console.log('svg: pricing');


        pricingCodes: { //for testing only please remove when the api query is added
        },
        loadCountMultiplier: {},
        pricingTotal: 0,

        getPricingCodes: function (colors, job_key, display_name) {
            var this_pricing_code = colors + 'CLTR';
            var display_colors = ' <b>(' + colors + ' color)</b>'
            //Important
            //Add Printing Fee if condition is true 
            //15/5/2019        
            //if (Product.PrintingFeeDisplay != true) {
            if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing") {
                this_pricing_code = 'SUBLTR';
                display_colors = ' ';
            }
            //}            
            console.log(this_pricing_code);
            if (typeof svgText.pricing.pricingCodes[this_pricing_code] != 'undefined' && svgText.pricing.pricingCodes[this_pricing_code] != 'loading') {

                //console.log(this_pricing_code + ' not undefined, returning');
                svgText.pricing.pricingTotal += parseFloat(svgText.pricing.pricingCodes[this_pricing_code].TotalPrice);
                $("#pricing_chart_total").html("Total:$" + svgText.pricing.pricingTotal);
                Builder.updatePricing(null, true);
                return '<div id="row_' + job_key + '" class="job-price-' + this_pricing_code + '">' + display_name + '<span class="price">' + svgText.pricing.pricingCodes[this_pricing_code].TotalPrice + display_colors + '</span></div>';
            }
            else if (svgText.pricing.pricingCodes[this_pricing_code] == 'loading') {
                var hasBeenCountedInLoadMultiplier = false;
                $(svgText.pricing.loadCountMultiplier[this_pricing_code].jobsCounted).each(function () {
                    if (this == job_key) hasBeenCountedInLoadMultiplier = true;
                });
                if (!hasBeenCountedInLoadMultiplier) {
                    svgText.pricing.loadCountMultiplier[this_pricing_code].multiplier++;
                    svgText.pricing.loadCountMultiplier[this_pricing_code].jobsCounted.push(job_key);
                }
                return '<div id="row_' + job_key + '" class="job-price-' + this_pricing_code + '">' + display_name + '<span class="price loading">...</span></div>';
            }
            else {

                //console.log(this_pricing_code + ' is undefined, returning string and queuing price load');
                svgText.pricing.pricingCodes[this_pricing_code] = 'loading';
                svgText.pricing.loadCountMultiplier[this_pricing_code] = {
                    multiplier: 1,
                    jobsCounted: [job_key]
                }
                Api.call(Api.endpoints.getPricing, JSON.stringify({
                    productID: this_pricing_code
                }), function (data) {
                    //on load pricing for this code                   
                    console.log(data);
                    console.log(this_pricing_code);
                    svgText.pricing.pricingCodes[this_pricing_code] = data;
                    svgText.pricing.pricingTotal += svgText.pricing.loadCountMultiplier[this_pricing_code].multiplier * parseFloat(svgText.pricing.pricingCodes[this_pricing_code].TotalPrice);
                    $("#pricing_chart .job-price-" + this_pricing_code + ' .price').removeClass("loading").html(data.TotalPrice + display_colors + '</b>');
                    $("#pricing_chart_total").html("Total:$" + svgText.pricing.pricingTotal);
                    Builder.updatePricing(null, true);
                });
                return '<div id="row_' + job_key + '" class="job-price-' + this_pricing_code + '">' + display_name + '<span class="price loading">...</span></div>';
            }
        },
        getKitPricingCodes: function (colors, job_key, display_name, kitNo) {
            var this_pricing_code = colors + 'CLTR';
            var display_colors = ' <b>(' + colors + ' color)</b>'
            if (CustKit['kit_' + kitNo].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing") {
                this_pricing_code = 'SUBLTR';
                display_colors = ' ';
            }
            console.log(this_pricing_code);
            if (typeof svgText.pricing.pricingCodes[this_pricing_code] != 'undefined' && svgText.pricing.pricingCodes[this_pricing_code] != 'loading') {

                //console.log(this_pricing_code + ' not undefined, returning');
                svgText.pricing.pricingTotal += parseFloat(svgText.pricing.pricingCodes[this_pricing_code].TotalPrice);
                $("#pricing_chart_total_" + kitNo).html("Total:$" + svgText.pricing.pricingTotal);
                Builder.updateKitPricing(null, true, kitNo);
                if (display_name != "") {
                    return '<div id="row_' + job_key + '" class="job-price-' + this_pricing_code + '">' + display_name + '<span class="price">' + svgText.pricing.pricingCodes[this_pricing_code].TotalPrice + display_colors + '</span></div>';
                }

            }
            else if (svgText.pricing.pricingCodes[this_pricing_code] == 'loading') {
                var hasBeenCountedInLoadMultiplier = false;
                $(svgText.pricing.loadCountMultiplier[this_pricing_code].jobsCounted).each(function () {
                    if (this == job_key) hasBeenCountedInLoadMultiplier = true;
                });
                if (!hasBeenCountedInLoadMultiplier) {
                    svgText.pricing.loadCountMultiplier[this_pricing_code].multiplier++;
                    svgText.pricing.loadCountMultiplier[this_pricing_code].jobsCounted.push(job_key);
                }
                return '<div id="row_' + job_key + '" class="job-price-' + this_pricing_code + '">' + display_name + '<span class="price loading">...</span></div>';
            }
            else {
                console.log(' svgText.pricing.pricingCodes ', svgText.pricing.pricingCodes);
                //console.log(this_pricing_code + ' is undefined, returning string and queuing price load');
                svgText.pricing.pricingCodes[this_pricing_code] = 'loading';
                svgText.pricing.loadCountMultiplier[this_pricing_code] = {
                    multiplier: 1,
                    jobsCounted: [job_key]
                }
                console.log('code ', this_pricing_code);
                Api.call(Api.endpoints.getPricing, JSON.stringify({
                    productID: this_pricing_code
                }), function (data) {
                    //on load pricing for this code
                    console.log('kit logo pricing ', data);
                    console.log(this_pricing_code);
                    svgText.pricing.pricingCodes[this_pricing_code] = data;


                    var singlePrice = svgText.pricing.loadCountMultiplier[this_pricing_code].multiplier * parseFloat(svgText.pricing.pricingCodes[this_pricing_code].TotalPrice);
                    svgText.pricing.pricingTotal += svgText.pricing.loadCountMultiplier[this_pricing_code].multiplier * parseFloat(svgText.pricing.pricingCodes[this_pricing_code].TotalPrice);

                    $("#pricing_chart_" + kitNo + " .job-price-" + this_pricing_code + ' .price').removeClass("loading").html(data.TotalPrice + display_colors + '</b>');
                    $("#pricing_chart_total_" + kitNo).html("Total:$" + svgText.pricing.pricingTotal);
                    Builder.updateKitPricing(null, true, kitNo);
                });
                return '<div id="row_' + job_key + '" class="job-price-' + this_pricing_code + '">' + display_name + '<span class="price loading">...</span></div>';
            }
        },
        getCustomPanelsForCanvasSvg: function () {
            console.log('svg: pricing.getCustomPanels');
            console.log('back length:');
            console.log(svgText.layerObjects['_Back'].length);
            var panels = [];
            var allJobs = {};
            svgText.pricing.pricingTotal = 0;
            $.each(svgText.layerObjects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    console.log(job_key);
                    console.log(panels.indexOf('' + job_key) < 0);
                    console.log(svgLayers[i].type);

                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    } else if (svgLayers[i].type == "textLayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    }
                    else if (svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors:", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });

            $("#pricing_chart").addClass("disabled");
            if (panels.length > 0) $("#pricing_chart").removeClass("disabled");
            $("#pricing_chart_content").html('');

            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;
                var view = allJobs[job_key].maskview;
                var display_name = '';
                job_colors = allJobs[job_key].colors.length;
                for (var j = 0; j < Product.masks[view].length; j++) {
                    if (Product.masks[view][j].name + '_' + view == job_key) display_name = view + ' ' + Product.masks[view][j].display;
                }
                console.log('pricing.getPricingCodes');
                $("#pricing_chart_content").append(svgText.pricing.getPricingCodes(job_colors, job_key, display_name));
            }
        },
        getCustomPanels: function () {

            console.log('svg: pricing.getCustomPanels');
            console.log('back length:');
            console.log(svgText.layerObjects['_Back'].length);

            var panels = [];
            var allJobs = {};
            svgText.pricing.pricingTotal = 0;

            $.each(svgText.layerObjects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {

                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    console.log(job_key);
                    console.log(panels.indexOf('' + job_key) < 0);
                    console.log(svgLayers[i].type);

                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    } else if (svgLayers[i].type == "textLayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors:", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });

            $("#pricing_chart").addClass("disabled");
            if (panels.length > 0) $("#pricing_chart").removeClass("disabled");
            $("#pricing_chart_content").html('');

            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;
                var view = allJobs[job_key].maskview;
                var display_name = '';
                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;
                for (var j = 0; j < Product.masks[view].length; j++) {
                    if (Product.masks[view][j].name + '_' + view == job_key) display_name = view + ' ' + Product.masks[view][j].display;
                }
                console.log('pricing.getPricingCodes');
                $("#pricing_chart_content").append(svgText.pricing.getPricingCodes(job_colors, job_key, display_name));
            }
        },
        getCustomKitPanels: function (kitNo) {
            console.log('svg: pricing.getCustomKitPanels');

            var panels = [];
            var allJobs = {};
            svgText.pricing.pricingTotal = 0;
            //Pass Only Current View here 

            // var CurrentView = "_Front"+'_'+ kitNo;
            $.each(svgText.layerKitObjects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;


                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    } else if (svgLayers[i].type == "textLayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors:", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });

            $("#pricing_chart_" + kitNo).addClass("disabled");
            if (panels.length > 0) $("#pricing_chart_" + kitNo).removeClass("disabled");
            $("#pricing_chart_content_" + kitNo).html('');
            //var realArray = $.makeArray(panels)

            // Now it can be used reliably with $.map()


            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;
                var view = allJobs[job_key].maskview;
                view = view.substr(0, view.length - 2);
                var display_name = '';
                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;
                for (var j = 0; j < ProductKit['kit_' + kitNo].masks[view].length; j++) {
                    if (ProductKit['kit_' + kitNo].masks[view][j].name + '_' + view + '_' + kitNo == job_key) display_name = view + ' ' + ProductKit['kit_' + kitNo].masks[view][j].display;
                }
                console.log('pricing.Kit getPricingCodes');
                $("#pricing_chart_content_" + kitNo).append(svgText.pricing.getKitPricingCodes(job_colors, job_key, display_name, kitNo));

            }
        },
        getCustomKitPanelsForSvgKit: function (kitNo) {
            console.log('svg: pricing.getCustomKitPanels');
            var panels = [];
            var allJobs = {};
            svgText.pricing.pricingTotal = 0;
            //Pass Only Current View here 

            // var CurrentView = "_Front"+'_'+ kitNo;
            $.each(svgText.layerKitObjects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;


                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    } else if (svgLayers[i].type == "textLayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    }
                    else if (svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors:", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });

            $("#pricing_chart_" + kitNo).addClass("disabled");
            if (panels.length > 0) $("#pricing_chart_" + kitNo).removeClass("disabled");
            $("#pricing_chart_content_" + kitNo).html('');
            //var realArray = $.makeArray(panels)

            // Now it can be used reliably with $.map()

            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;
                var view = allJobs[job_key].maskview;
                view = view.substr(0, view.length - 2);
                var display_name = '';
                job_colors = allJobs[job_key].colors.length;
                for (var j = 0; j < ProductKit['kit_' + kitNo].masks[view].length; j++) {
                    if (ProductKit['kit_' + kitNo].masks[view][j].name + '_' + view + '_' + kitNo == job_key) display_name = view + ' ' + ProductKit['kit_' + kitNo].masks[view][j].display;
                }
                console.log('pricing.Kit getPricingCodes');
                $("#pricing_chart_content_" + kitNo).append(svgText.pricing.getKitPricingCodes(job_colors, job_key, display_name, kitNo));

            }

        },
        //getSkuCount: function () {          
        //    var retObject = {};
        //    var panels = [];
        //    var allJobs = {};
        //    $.each(svgText.layerObjects, function (view, svgLayers) {
        //        for (var i = 0; i < svgLayers.length; i++) {
        //            //add Unique entry for this job key if needed
        //            var job_key = svgLayers[i].mask + view;
        //            if (panels.indexOf('' + job_key) < 0) {
        //                panels.push('' + job_key);
        //                allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
        //            }
        //            if (svgLayers[i].type == "imageLayer") {
        //                allJobs[job_key].isImage = true;
        //            }
        //                //add to cart issue on text in Vertical arch so add canvaslayer
        //            else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
        //                if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
        //                if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
        //            } else if (svgLayers[i].type == "logoLayer") {
        //                //push logo colors son
        //                //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
        //                if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
        //                if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
        //                if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
        //            }
        //        }
        //    });
        //    for (var i = 0; i < panels.length; i++) {               
        //        var job_key = panels[i];
        //        var job_colors = 0;

        //        if (allJobs[job_key].isImage == true) job_colors = 6;
        //        else job_colors = allJobs[job_key].colors.length;
        //        //var res = "_" + job_key.split("_")[2];
        //        //if (res == "_undefined") {
        //        //    res = "_" + job_key.split("_")[1];
        //        //}  
        //        //17/5/2019
        //        //Get last split string               
        //        res =job_key.substring(job_key.lastIndexOf('_'));
        //        console.log(res);

        //        console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')

        //        //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
        //        //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));           
        //        svgText.currentLayer = svgText.layerObjects[svgText.currentView].length;
        //        var ActiveLayer = svgText.layerObjects[svgText.currentView].length;

        //        //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

        //        var ActiveLayerInFront = svgText.layerObjects["_Front"].length;
        //        var ActiveLayerInBack = svgText.layerObjects["_Back"].length;
        //        var ActiveLayerInLeft = svgText.layerObjects["_Left"].length;
        //        var ActiveLayerInRight = svgText.layerObjects["_Right"].length;

        //        // Important--Verify Indext Of Text,Logo and  Image Index is correct or not 

        //        //alert("ActiveLayerInFront" + ActiveLayerInFront, "ActiveLayerInBack" + ActiveLayerInBack, "ActiveLayerInLeft" + ActiveLayerInLeft, "ActiveLayerInRight" + ActiveLayerInRight)
        //        //alert("In Front Svg=" + Cust.text["_Front"][0].type + "-0," + Cust.text["_Front"][1].type + "-1," + Cust.text["_Front"][2].type + "-2,")
        //        //alert("In Back Svg=" + Cust.text["_Back"][0].type + "-0," + Cust.text["_Back"][1].type + "-1," + Cust.text["_Back"][2].type + "-2,")
        //        //alert("In Left Svg=" + Cust.text["_Left"][0].type + "-0," + Cust.text["_Left"][1].type + "-1," + Cust.text["_Left"][2].type + "-2,")
        //        //alert("In Right Svg=" + Cust.text["_Right"][0].type + "-0," + Cust.text["_Right"][1].type + "-1," + Cust.text["_Right"][2].type + "-2,")          

        //        // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

        //        if (res == "_Front") {
        //            for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO
        //                if (Cust.text[res][j].type == "logoLayer") {
        //                    var this_pricing_code = job_colors + 'CLOGO';
        //                }
        //                else //(Cust.text[res][j].type == "textLayer") {
        //                    var this_pricing_code = job_colors + 'CLTR';
        //                //}
        //                //if (Cust.text[res][j].type == "imageLayer") {
        //                //    var this_pricing_code = job_colors + 'CLTR';                        
        //                //}
        //                if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
        //                    this_pricing_code = 'SUBLTR';

        //                if (retObject.hasOwnProperty(this_pricing_code))
        //                    retObject[this_pricing_code]++;
        //                else
        //                    retObject[this_pricing_code] = 1;
        //            }
        //        }
        //        else if (res == "_Back") {
        //            for (var j = 0; j < ActiveLayerInBack; j++) {
        //                if (Cust.text[res][j].type == "logoLayer") {
        //                    var this_pricing_code = job_colors + 'CLOGO';
        //                }
        //                else //(Cust.text[res][j].type == "textLayer") {
        //                    var this_pricing_code = job_colors + 'CLTR';
        //                // }
        //                //if (Cust.text[res][j].type == "imageLayer") {
        //                //    var this_pricing_code = job_colors + 'CLTR';
        //                //}
        //                if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
        //                    this_pricing_code = 'SUBLTR';

        //                if (retObject.hasOwnProperty(this_pricing_code))
        //                    retObject[this_pricing_code]++;
        //                else
        //                    retObject[this_pricing_code] = 1;
        //            }
        //        }
        //        else if (res == "_Left") {
        //            for (var j = 0; j < ActiveLayerInLeft; j++) {
        //                if (Cust.text[res][j].type == "logoLayer") {
        //                    var this_pricing_code = job_colors + 'CLOGO';
        //                }
        //                else //(Cust.text[res][j].type == "textLayer") {
        //                    var this_pricing_code = job_colors + 'CLTR';
        //                //}
        //                //if (Cust.text[res][j].type == "imageLayer") {
        //                //    var this_pricing_code = job_colors + 'CLTR';
        //                //}
        //                if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
        //                    this_pricing_code = 'SUBLTR';

        //                if (retObject.hasOwnProperty(this_pricing_code))
        //                    retObject[this_pricing_code]++;
        //                else
        //                    retObject[this_pricing_code] = 1;
        //            }
        //        }
        //        else { //(res == "_Right")
        //            for (var j = 0; j < ActiveLayerInRight; j++) {
        //                if (Cust.text[res][j].type == "logoLayer") {
        //                    var this_pricing_code = job_colors + 'CLOGO';
        //                }
        //                else //(Cust.text[res][j].type == "textLayer") {
        //                    var this_pricing_code = job_colors + 'CLTR';
        //                // }
        //                //if (Cust.text[res][j].type == "imageLayer") {
        //                //    var this_pricing_code = job_colors + 'CLTR';
        //                //}
        //                if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
        //                    this_pricing_code = 'SUBLTR';

        //                if (retObject.hasOwnProperty(this_pricing_code))
        //                    retObject[this_pricing_code]++;
        //                else
        //                    retObject[this_pricing_code] = 1;
        //            }
        //        }
        //        //if (thisTextIndex >= 0) {
        //        //    //Important-- CLOGO  for Logo CLOGO   
        //        //    if (Cust.text[res][thisTextIndex].type == "logoLayer") {
        //        //        var this_pricing_code = job_colors + 'CLOGO';
        //        //    }
        //        //    else {
        //        //        var this_pricing_code = job_colors + 'CLTR';
        //        //    }
        //        //}                                                  
        //        //if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
        //        //    this_pricing_code = 'SUBLTR';

        //        //if (retObject.hasOwnProperty(this_pricing_code))
        //        //    retObject[this_pricing_code]++;
        //        //else
        //        //    retObject[this_pricing_code] = 1;
        //    }

        //    return retObject;
        //}
        getSkuCount: function () {
            var retObject = {};
            var panels = [];
            var allJobs = {};
            var Fcount = 0;
            var Bcount = 0;
            var Lcount = 0;
            var Rcount = 0;
            $.each(svgText.layerObjects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    if (panels.indexOf('' + job_key) < 0) {
                        //Commented Code
                       // panels.push('' + job_key);
                        //11-5-2019
                        //Important--panels.length was incresing(So SUBLTR Count was count is increasing for these product SBRDS52,SBRDSAC,SBRDSMB ) in case of seperately  "LEFT FRONT ART" and "RIGHT FRONT ART" in
                        //Start --
                        if (panels.length === 0) {
                            panels.push('' + job_key);
                        }
                        else {
                            var status = true;
                            for (var p = 0; p < panels.length; p++) {
                                var ProductView = panels[p].substring(panels[p].lastIndexOf('_')).toUpperCase();
                                var GetMaskProductView = job_key.substring(job_key.lastIndexOf('_')).toUpperCase();
                                if (GetMaskProductView === ProductView) {
                                    status = false;
                                }
                            }
                            if (status) {
                                panels.push('' + job_key);
                            }
                        }
                        //End
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    }
                    else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });
            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;

                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;
                //var res = "_" + job_key.split("_")[2];
                //if (res == "_undefined") {
                //    res = "_" + job_key.split("_")[1];
                //}
                //17/5/2019
                //Get Last Split String
                var res = job_key.substring(job_key.lastIndexOf('_'));
                console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')

                //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
                //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));           
                svgText.currentLayer = svgText.layerObjects[svgText.currentView].length;
                var ActiveLayer = svgText.layerObjects[svgText.currentView].length;

                //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

                var ActiveLayerInFront = svgText.layerObjects["_Front"].length;
                var ActiveLayerInBack = svgText.layerObjects["_Back"].length;
                var ActiveLayerInLeft = svgText.layerObjects["_Left"].length;
                var ActiveLayerInRight = svgText.layerObjects["_Right"].length;

                // Important--Verify Indext Of Text,Logo and  Image Index is correct or not 

                //alert("ActiveLayerInFront" + ActiveLayerInFront, "ActiveLayerInBack" + ActiveLayerInBack, "ActiveLayerInLeft" + ActiveLayerInLeft, "ActiveLayerInRight" + ActiveLayerInRight)
                //alert("In Front Svg=" + Cust.text["_Front"][0].type + "-0," + Cust.text["_Front"][1].type + "-1," + Cust.text["_Front"][2].type + "-2,")
                //alert("In Back Svg=" + Cust.text["_Back"][0].type + "-0," + Cust.text["_Back"][1].type + "-1," + Cust.text["_Back"][2].type + "-2,")
                //alert("In Left Svg=" + Cust.text["_Left"][0].type + "-0," + Cust.text["_Left"][1].type + "-1," + Cust.text["_Left"][2].type + "-2,")
                //alert("In Right Svg=" + Cust.text["_Right"][0].type + "-0," + Cust.text["_Right"][1].type + "-1," + Cust.text["_Right"][2].type + "-2,")          

                // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

                if (res == "_Front" && Fcount == 0) {
                    for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO
                        if (Cust.text[res][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';                        
                        //}
                        if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Fcount++;
                }
                else if (res == "_Back" && Bcount == 0) {
                    for (var j = 0; j < ActiveLayerInBack; j++) {
                        if (Cust.text[res][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        // }
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else

                            retObject[this_pricing_code] = 1;
                    }
                    Bcount++;
                }
                else if (res == "_Left") {
                    for (var j = 0; j < ActiveLayerInLeft; j++) {
                        if (Cust.text[res][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Lcount++;
                }
                else { //(res == "_Right")
                    for (var j = 0; j < ActiveLayerInRight; j++) {
                        if (Cust.text[res][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        // }
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Rcount++;
                }
                //if (thisTextIndex >= 0) {
                //    //Important-- CLOGO  for Logo CLOGO   
                //    if (Cust.text[res][thisTextIndex].type == "logoLayer") {
                //        var this_pricing_code = job_colors + 'CLOGO';
                //    }
                //    else {
                //        var this_pricing_code = job_colors + 'CLTR';
                //    }
                //}                                                  
                //if (Cust.printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                //    this_pricing_code = 'SUBLTR';

                //if (retObject.hasOwnProperty(this_pricing_code))
                //    retObject[this_pricing_code]++;
                //else
                //    retObject[this_pricing_code] = 1;
            }
            return retObject;
        },
        getKitSkuCount: function () {
            console.log(svgText.layerKitObjects);
            if (svgText.layerKitObjects) {
                svgText.layerKit_0_Objects._Back_0 = svgText.layerKitObjects._Back_0;
                svgText.layerKit_0_Objects._Front_0 = svgText.layerKitObjects._Front_0;
                svgText.layerKit_0_Objects._Left_0 = svgText.layerKitObjects._Left_0;
                svgText.layerKit_0_Objects._Right_0 = svgText.layerKitObjects._Right_0;

                svgText.layerKit_1_Objects._Front_1 = svgText.layerKitObjects._Front_1;
                svgText.layerKit_1_Objects._Back_1 = svgText.layerKitObjects._Back_1;
                svgText.layerKit_1_Objects._Left_1 = svgText.layerKitObjects._Left_1;
                svgText.layerKit_1_Objects._Right_1 = svgText.layerKitObjects._Right_1;

                svgText.layerKit_2_Objects._Front_2 = svgText.layerKitObjects._Front_2;
                svgText.layerKit_2_Objects._Back_2 = svgText.layerKitObjects._Back_2;
                svgText.layerKit_2_Objects._Left_2 = svgText.layerKitObjects._Left_2;
                svgText.layerKit_2_Objects._Right_2 = svgText.layerKitObjects._Right_2;

                svgText.layerKit_3_Objects._Front_3 = svgText.layerKitObjects._Front_3;
                svgText.layerKit_3_Objects._Back_3 = svgText.layerKitObjects._Back_3;
                svgText.layerKit_3_Objects._Left_3 = svgText.layerKitObjects._Left_3;
                svgText.layerKit_3_Objects._Right_3 = svgText.layerKitObjects._Right_3;

                svgText.layerKit_4_Objects._Front_4 = svgText.layerKitObjects._Front_4;
                svgText.layerKit_4_Objects._Back_4 = svgText.layerKitObjects._Back_4;
                svgText.layerKit_4_Objects._Left_4 = svgText.layerKitObjects._Left_4;
                svgText.layerKit_4_Objects._Right_4 = svgText.layerKitObjects._Right_4;
            }
            console.log(svgText.layerKit_0_Objects);
            console.log(svgText.layerKit_1_Objects);
            console.log(svgText.layerKit_2_Objects);
            console.log(svgText.layerKit_3_Objects);
            console.log(svgText.layerKit_4_Objects);
        },

        get_Kit0_SkuArtCount: function () {

            var retObject = {};
            var panels = [];
            var allJobs = {};
            var Fcount = 0;
            var Bcount = 0;
            var Lcount = 0;
            var Rcount = 0;
            $.each(svgText.layerKit_0_Objects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    }
                    else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });
            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;

                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;

                // var res = job_key.substring(job_key.lastIndexOf('_'));
                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));

                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));
                console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')

                //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
                //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));  
                CurrentView = svgText.currentView;
                switch (CurrentView) {
                    case "_Front":
                        svgText.currentView = "_Front_0";
                        break;
                    case "_Back":
                        svgText.currentView = "_Back_0";
                        break;
                    case "_Left":
                        svgText.currentView = "_Left_0";
                        break;
                    case "_Right":
                        svgText.currentView = "_Right_0";
                        break;
                    default:
                        console.log("Current View=" + CurrentView)
                }

                svgText.currentLayer = svgText.layerKit_0_Objects[svgText.currentView].length;

                var ActiveLayer = svgText.layerKit_0_Objects[svgText.currentView].length;

                //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

                var ActiveLayerInFront = svgText.layerKit_0_Objects["_Front_0"].length;
                var ActiveLayerInBack = svgText.layerKit_0_Objects["_Back_0"].length;
                var ActiveLayerInLeft = svgText.layerKit_0_Objects["_Left_0"].length;
                var ActiveLayerInRight = svgText.layerKit_0_Objects["_Right_0"].length;

                // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

                if (res == "_Front_0" && Fcount == 0) {
                    for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO
                        //if (Cust.text[res][j].type == "logoLayer") {
                        if (CustKit['kit_0'].text["_Front"][j].type == "logoLayer") {

                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';                        
                        //}
                        if (CustKit['kit_0'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Fcount++;
                }
                else if (res == "_Back_0" && Bcount == 0) {
                    for (var j = 0; j < ActiveLayerInBack; j++) {
                        if (CustKit['kit_0'].text["_Back"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';
                        if (CustKit['kit_0'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else

                            retObject[this_pricing_code] = 1;
                    }
                    Bcount++;
                }
                else if (res == "_Left_0") {
                    for (var j = 0; j < ActiveLayerInLeft; j++) {
                        if (CustKit['kit_0'].text["_Left"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_0'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Lcount++;
                }
                else { //(res == "_Right")
                    for (var j = 0; j < ActiveLayerInRight; j++) {
                        if (CustKit['kit_0'].text["_Right"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_0'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Rcount++;
                }

            }
            return retObject;
        },

        get_Kit1_SkuArtCount: function () {
            var objFinal = new Array();
            var retObject = {};
            var panels = [];
            var allJobs = {};
            var Fcount = 0;
            var Bcount = 0;
            var Lcount = 0;
            var Rcount = 0;
            var shirtArtCount = 0;
            var shortArtCount = 0;
            $.each(svgText.layerKit_1_Objects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    }
                    else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });
            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;

                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;

                // var res = job_key.substring(job_key.lastIndexOf('_'));
                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));

                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));
                console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')

                //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
                //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));           
                CurrentView = svgText.currentView;
                switch (CurrentView) {
                    case "_Front":
                        svgText.currentView = "_Front_1";
                        break;
                    case "_Back":
                        svgText.currentView = "_Back_1";
                        break;
                    case "_Left":
                        svgText.currentView = "_Left_1";
                        break;
                    case "_Right":
                        svgText.currentView = "_Right_1";
                        break;
                    default:
                        console.log("Current View=" + CurrentView)
                }
                svgText.currentLayer = svgText.layerKit_1_Objects[svgText.currentView].length;

                var ActiveLayer = svgText.layerKit_1_Objects[svgText.currentView].length;

                //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

                var ActiveLayerInFront = svgText.layerKit_1_Objects["_Front_1"].length;
                var ActiveLayerInBack = svgText.layerKit_1_Objects["_Back_1"].length;
                var ActiveLayerInLeft = svgText.layerKit_1_Objects["_Left_1"].length;
                var ActiveLayerInRight = svgText.layerKit_1_Objects["_Right_1"].length;

                // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

                if (res == "_Front_1" && Fcount == 0) {
                    for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO
                        //if (Cust.text[res][j].type == "logoLayer") {
                        if (CustKit['kit_1'].text["_Front"][j].type == "logoLayer") {

                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';                        
                        //}
                        if (CustKit['kit_1'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        //for define shirt and short
                        var maskName = CustKit['kit_1'].text["_Front"][j].mask_name;
                        maskName = maskName.toUpperCase();
                        if (maskName != "" || maskName != null) {
                            if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;

                    }
                    Fcount++;
                }
                else if (res == "_Back_1" && Bcount == 0) {
                    for (var j = 0; j < ActiveLayerInBack; j++) {
                        if (CustKit['kit_1'].text["_Back"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        // }
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (CustKit['kit_1'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        //for define shirt and short
                      var maskName = CustKit['kit_1'].text["_Back"][j].mask_name;
                      maskName = maskName.toUpperCase();
                      if (maskName != "" || maskName != null) {
                          if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else

                            retObject[this_pricing_code] = 1;
                    }
                    Bcount++;
                }
                else if (res == "_Left_1" && Lcount == 0) {
                    for (var j = 0; j < ActiveLayerInLeft; j++) {
                        if (CustKit['kit_1'].text["_Left"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (CustKit['kit_1'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        //for define shirt and short
                       var maskName = CustKit['kit_1'].text["_Left"][j].mask_name;
                       maskName = maskName.toUpperCase();
                       if (maskName != "" || maskName != null) {
                           if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Lcount++;
                }
                else if (res == "_Right_1" && Rcount == 0)
                    {
                    for (var j = 0; j < ActiveLayerInRight; j++) {
                        if (CustKit['kit_1'].text["_Right"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        // }
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (CustKit['kit_1'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        //for define shirt and short
                       var maskName = CustKit['kit_1'].text["_Right"][j].mask_name;
                       maskName = maskName.toUpperCase();
                       if (maskName != "" || maskName != null) {
                           if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Rcount++;
                }

            }            
            retObject["shirtArtCount"] = shirtArtCount;
            retObject["shortArtCount"] = shortArtCount;           
            return retObject;
        },

        get_Kit2_SkuArtCount: function () {

            var retObject = {};
            var panels = [];
            var allJobs = {};
            var Fcount = 0;
            var Bcount = 0;
            var Lcount = 0;
            var Rcount = 0;
            $.each(svgText.layerKit_2_Objects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    }
                    else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });
            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;

                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;

                // var res = job_key.substring(job_key.lastIndexOf('_'));
                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));

                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));
                console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')
                CurrentView = svgText.currentView;
                switch (CurrentView) {
                    case "_Front":
                        svgText.currentView = "_Front_2";
                        break;
                    case "_Back":
                        svgText.currentView = "_Back_2";
                        break;
                    case "_Left":
                        svgText.currentView = "_Left_2";
                        break;
                    case "_Right":
                        svgText.currentView = "_Right_2";
                        break;
                    case "_Front_4":
                        svgText.currentView = "_Front_2";
                        break;
                    case "_Back_4":
                        svgText.currentView = "_Back_2";
                        break;
                    case "_Left_4":
                        svgText.currentView = "_Left_2";
                        break;
                    case "_Right_4":
                        svgText.currentView = "_Right_2";
                        break;
                    default:
                        console.log("Current View=" + CurrentView)
                }
                //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
                //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));           
                svgText.currentLayer = svgText.layerKit_2_Objects[svgText.currentView].length;

                var ActiveLayer = svgText.layerKit_2_Objects[svgText.currentView].length;

                //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

                var ActiveLayerInFront = svgText.layerKit_2_Objects["_Front_2"].length;
                var ActiveLayerInBack = svgText.layerKit_2_Objects["_Back_2"].length;
                var ActiveLayerInLeft = svgText.layerKit_2_Objects["_Left_2"].length;
                var ActiveLayerInRight = svgText.layerKit_2_Objects["_Right_2"].length;

                // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

                if (res == "_Front_2" && Fcount == 0) {
                    for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO
                        //if (Cust.text[res][j].type == "logoLayer") {
                        if (CustKit['kit_2'].text["_Front"][j].type == "logoLayer") {

                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';                        
                        //}
                        if (CustKit['kit_2'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Fcount++;
                }
                else if (res == "_Back_2" && Bcount == 0) {
                    for (var j = 0; j < ActiveLayerInBack; j++) {
                        if (CustKit['kit_2'].text["_Back"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        // }
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (CustKit['kit_2'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else

                            retObject[this_pricing_code] = 1;
                    }
                    Bcount++;
                }
                else if (res == "_Left_2") {
                    for (var j = 0; j < ActiveLayerInLeft; j++) {
                        if (CustKit['kit_2'].text["_Left"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (CustKit['kit_2'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Lcount++;
                }
                else { //(res == "_Right")
                    for (var j = 0; j < ActiveLayerInRight; j++) {
                        if (CustKit['kit_2'].text["_Right"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        // }
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';
                        //}
                        if (CustKit['kit_2'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Rcount++;
                }

            }
            return retObject;
        },

        get_Kit3_SkuArtCount: function () {

            var retObject = {};
            var panels = [];
            var allJobs = {};
            var Fcount = 0;
            var Bcount = 0;
            var Lcount = 0;
            var Rcount = 0;
            var shirtArtCount = 0;
            var shortArtCount = 0;
            $.each(svgText.layerKit_3_Objects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    }
                    else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });
            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;

                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;

                // var res = job_key.substring(job_key.lastIndexOf('_'));
                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));

                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));
                console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')

                //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
                //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));           
                CurrentView = svgText.currentView;
                switch (CurrentView) {
                    case "_Front":
                        svgText.currentView = "_Front_3";
                        break;
                    case "_Back":
                        svgText.currentView = "_Back_3";
                        break;
                    case "_Left":
                        svgText.currentView = "_Left_3";
                        break;
                    case "_Right":
                        svgText.currentView = "_Right_3";
                        break;
                    default:
                        console.log("Current View=" + CurrentView)
                }
                svgText.currentLayer = svgText.layerKit_3_Objects[svgText.currentView].length;

                var ActiveLayer = svgText.layerKit_3_Objects[svgText.currentView].length;

                //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

                var ActiveLayerInFront = svgText.layerKit_3_Objects["_Front_3"].length;
                var ActiveLayerInBack = svgText.layerKit_3_Objects["_Back_3"].length;
                var ActiveLayerInLeft = svgText.layerKit_3_Objects["_Left_3"].length;
                var ActiveLayerInRight = svgText.layerKit_3_Objects["_Right_3"].length;

                // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

                if (res == "_Front_3" && Fcount == 0) {
                    for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO
                        //if (Cust.text[res][j].type == "logoLayer") {
                        if (CustKit['kit_3'].text["_Front"][j].type == "logoLayer") {

                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else //(Cust.text[res][j].type == "textLayer") {
                            var this_pricing_code = job_colors + 'CLTR';
                        //}
                        //if (Cust.text[res][j].type == "imageLayer") {
                        //    var this_pricing_code = job_colors + 'CLTR';                        
                        //}
                        if (CustKit['kit_3'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        var maskName = CustKit['kit_3'].text["_Front"][j].mask_name;
                        maskName = maskName.toUpperCase();
                        if (maskName != "" || maskName != null) {
                            if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Fcount++;
                }
                else if (res == "_Back_3" && Bcount == 0) {
                    for (var j = 0; j < ActiveLayerInBack; j++) {
                        if (CustKit['kit_3'].text["_Back"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';
                        if (CustKit['kit_3'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        var maskName = CustKit['kit_3'].text["_Back"][j].mask_name;
                        maskName = maskName.toUpperCase();
                        if (maskName != "" || maskName != null) {
                            if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else

                            retObject[this_pricing_code] = 1;
                    }
                    Bcount++;
                }
                else if (res == "_Left_3" && Lcount == 0) {
                    for (var j = 0; j < ActiveLayerInLeft; j++) {
                        if (CustKit['kit_3'].text["_Left"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_3'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        var maskName = CustKit['kit_3'].text["_Left"][j].mask_name;
                        maskName = maskName.toUpperCase();
                        if (maskName != "" || maskName != null) {
                            if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Lcount++;
                }
                else if (res == "_Right_3" && Rcount == 0)
        {
                    for (var j = 0; j < ActiveLayerInRight; j++) {
                        if (CustKit['kit_3'].text["_Right"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_3'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';
                        var maskName = CustKit['kit_3'].text["_Right"][j].mask_name;
                        maskName = maskName.toUpperCase();
                        if (maskName != "" || maskName != null) {
                            if (maskName == "SHIRT" || maskName == "SHIRT BODY") {
                                shirtArtCount++;
                            }
                            else {
                                shortArtCount++;
                            }
                        }
                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Rcount++;
                }

            }
            retObject["shirtArtCount"] = shirtArtCount;
            retObject["shortArtCount"] = shortArtCount;
            return retObject;
        },

        get_Kit4_SkuArtCount: function () {

            var retObject = {};
            var panels = [];
            var allJobs = {};
            var Fcount = 0;
            var Bcount = 0;
            var Lcount = 0;
            var Rcount = 0;
            $.each(svgText.layerKit_4_Objects, function (view, svgLayers) {
                for (var i = 0; i < svgLayers.length; i++) {
                    //add Unique entry for this job key if needed
                    var job_key = svgLayers[i].mask + view;
                    if (panels.indexOf('' + job_key) < 0) {
                        panels.push('' + job_key);
                        allJobs[job_key] = { isImage: false, colors: [], maskview: view.replace('_', '') };
                    }
                    if (svgLayers[i].type == "imageLayer") {
                        allJobs[job_key].isImage = true;
                    }
                    else if (svgLayers[i].type == "textLayer" || svgLayers[i].type == "canvaslayer") {
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].fillcolor) < 0) allJobs[job_key].colors.push(svgLayers[i].fillcolor);
                        if (allJobs[job_key].colors.indexOf(svgLayers[i].strokecolor) < 0 && svgLayers[i].strokewidth > 0) allJobs[job_key].colors.push(svgLayers[i].strokecolor);
                    } else if (svgLayers[i].type == "logoLayer") {
                        //push logo colors son
                        //console.log("Logo Layer Colors: ", svgLayers[i].area1color, svgLayers[i].area2color, svgLayers[i].area3color)
                        if (svgLayers[i].area1color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area1color) < 0) allJobs[job_key].colors.push(svgLayers[i].area1color);
                        if (svgLayers[i].area2code && svgLayers[i].area2color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area2color) < 0) allJobs[job_key].colors.push(svgLayers[i].area2color);
                        if (svgLayers[i].area3code && svgLayers[i].area3color != '' && allJobs[job_key].colors.indexOf(svgLayers[i].area3color) < 0) allJobs[job_key].colors.push(svgLayers[i].area3color);
                    }
                }
            });
            for (var i = 0; i < panels.length; i++) {
                var job_key = panels[i];
                var job_colors = 0;

                if (allJobs[job_key].isImage == true) job_colors = 6;
                else job_colors = allJobs[job_key].colors.length;

                // var res = job_key.substring(job_key.lastIndexOf('_'));
                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));

                var res = job_key.substr(job_key.lastIndexOf("_", job_key.lastIndexOf("_") - 1));
                console.log(' getSkuCount:Get Total No of CLTR and CLOGO In Ecah Kit and Pass to Ecommerce site')
                CurrentView = svgText.currentView;
                switch (CurrentView) {
                    case "_Front":
                        svgText.currentView = "_Front_4";
                        break;
                    case "_Back":
                        svgText.currentView = "_Back_4";
                        break;
                    case "_Left":
                        svgText.currentView = "_Left_4";
                        break;
                    case "_Right":
                        svgText.currentView = "_Right_4";
                        break;
                        break;
                    case "_Front_2":
                        svgText.currentView = "_Front_4";
                        break;
                    case "_Back_2":
                        svgText.currentView = "_Back_4";
                        break;
                    case "_Left_2":
                        svgText.currentView = "_Left_4";
                        break;
                    case "_Right_2":
                        svgText.currentView = "_Right_4";
                        break;
                    default:
                        console.log("Current View=" + CurrentView)
                }
                //Important---Use Local Storage for get currentLayer Othewise it will take -1 and ,we can not add this on "Add to Card"
                //thisTextIndex = parseInt(localStorage.getItem('keyCurrentLayer'));           
                svgText.currentLayer = svgText.layerKit_4_Objects[svgText.currentView].length;

                var ActiveLayer = svgText.layerKit_4_Objects[svgText.currentView].length;

                //Important--In artwork section ,Calculate How many Texts,Logos and Images are Uploaded in Each View (Front,Back, Left and Right)

                var ActiveLayerInFront = svgText.layerKit_4_Objects["_Front_4"].length;
                var ActiveLayerInBack = svgText.layerKit_4_Objects["_Back_4"].length;
                var ActiveLayerInLeft = svgText.layerKit_4_Objects["_Left_4"].length;
                var ActiveLayerInRight = svgText.layerKit_4_Objects["_Right_4"].length;

                // Important--- Set CLTR and CLOGO based on logoLayer,textLayera and imageLayer

                if (res == "_Front_4" && Fcount == 0) {
                    for (var j = 0; j < ActiveLayerInFront; j++) {     //Important-- CLOGO  for Logo CLOGO

                        if (CustKit['kit_4'].text["_Front"][j].type == "logoLayer") {

                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_4'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Fcount++;
                }
                else if (res == "_Back_4" && Bcount == 0) {
                    for (var j = 0; j < ActiveLayerInBack; j++) {
                        if (CustKit['kit_4'].text["_Back"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';
                        if (CustKit['kit_4'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else

                            retObject[this_pricing_code] = 1;
                    }
                    Bcount++;
                }
                else if (res == "_Left_4") {
                    for (var j = 0; j < ActiveLayerInLeft; j++) {
                        if (CustKit['kit_4'].text["_Left"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_4'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Lcount++;
                }
                else { //(res == "_Right")
                    for (var j = 0; j < ActiveLayerInRight; j++) {
                        if (CustKit['kit_4'].text["_Right"][j].type == "logoLayer") {
                            var this_pricing_code = job_colors + 'CLOGO';
                        }
                        else
                            var this_pricing_code = job_colors + 'CLTR';

                        if (CustKit['kit_4'].printingOption == "Sublimation Printing" || Product.printingOptions == "Sublimation Printing")
                            this_pricing_code = 'SUBLTR';

                        if (retObject.hasOwnProperty(this_pricing_code))
                            retObject[this_pricing_code]++;
                        else
                            retObject[this_pricing_code] = 1;
                    }
                    Rcount++;
                }

            }
            return retObject;
        }

    },
    initKit: function (kitNo) {

        console.log('svg:Kit init no ' + kitNo);
        for (var i in Product.textColors) {
            var title_str = Product.textColors[i]["name"];
            var color_str = Product.textColors[i]["hex"];
            var code_str = Product.textColors[i]["code"];
            var colorObj = { color: "#" + color_str, title: title_str, code: code_str };

            swatches.push(colorObj);
            KitSwatches['kit_' + kitNo].push(colorObj);
        }

        //interactive page elements

        $(".preview-nav.kit_" + kitNo + " a").each(function () {
            var view = $(this).attr("data-view");
            svgText.loadKitSavedToArray(view, CustKit['kit_' + kitNo].text[view], kitNo);
            $(this).click(function (e) {
                e.preventDefault();
                svgText.setKitView(view, kitNo);
                svgText.clearKitActiveLayer(kitNo);
            });
        });

        svgText.pricing.getCustomKitPanels(kitNo);

        setTimeout(function () {

            IsViewOnly = $("body").hasClass("view-only");
            if (IsViewOnly) {
                var kitNo = Builder.active_kit
            }
            else {
                var kitNo = $('.kit.active span.active').attr('data-count');
            }
            if (kitNo == null) {
                kitNo = 0;
            }
            loadView = kitView['kit_' + kitNo].viewsToLoadKit
            //switch (loadView) {
            //    case 0:
            //        $(".preview-nav.kit_0 a:eq(0)").trigger("click");
            //        break;
            //    //case 1:
            //    //    $(".preview-nav.kit_0 a:eq(0)").trigger("click");
            //    //    break;
            //    case 2:
            //        $(".preview-nav.kit_0 a:eq(1)").trigger("click");
            //        $(".preview-nav.kit_0 a:eq(0)").trigger("click");
            //        break;
            //    case 4:
            //        $(".preview-nav.kit_0 a:eq(3)").trigger("click");
            //        $(".preview-nav.kit_0 a:eq(2)").trigger("click");
            //        $(".preview-nav.kit_0 a:eq(1)").trigger("click");
            //        $(".preview-nav.kit_0 a:eq(0)").trigger("click");
            //        break;
            //    default:             
            //}
            switch (loadView) {
                case 0:
                    $(".preview-nav.kit_" + kitNo + " a:eq(0)").trigger("click");
                    break;
                case 1:
                    $(".preview-nav.kit_" + kitNo + " a:eq(0)").trigger("click");
                    break;
                case 2:
                    $(".preview-nav.kit_" + kitNo + " a:eq(1)").trigger("click");
                    $(".preview-nav.kit_" + kitNo + " a:eq(0)").trigger("click");
                    break;
                case 4:
                    $(".preview-nav.kit_" + kitNo + " a:eq(3)").trigger("click");
                    $(".preview-nav.kit_" + kitNo + " a:eq(2)").trigger("click");
                    $(".preview-nav.kit_" + kitNo + " a:eq(1)").trigger("click");
                    $(".preview-nav.kit_" + kitNo + " a:eq(0)").trigger("click");
                    break;
                default:
            }

            console.log('in kit' + kitNo + 'timeout');
            Builder.populateKitColorsWithCustomization(ProductKit['kit_' + kitNo], 0);
            // $(".preview-nav.kit_" + kitNo + " a:eq(0)").trigger("click");	        

            if (Builder.step == 4) {
                if (!$(".preview-nav.kit_0 a:eq(1)").hasClass('hide')) {
                    $(".preview-nav.kit_0 a:eq(1)").trigger("click");
                    Builder.populateKitColorsWithCustomization(ProductKit['kit_1'], 1);
                }
                if (!$(".preview-nav.kit_0 a:eq(2)").hasClass('hide')) {
                    $(".preview-nav.kit_0 a:eq(2)").trigger("click");
                    Builder.populateKitColorsWithCustomization(ProductKit['kit_2'], 2);
                }
                if (!$(".preview-nav.kit_0 a:eq(3)").hasClass('hide')) {
                    $(".preview-nav.kit_0 a:eq(3)").trigger("click");
                    Builder.populateKitColorsWithCustomization(ProductKit['kit_3'], 3);
                }
            }
        }, 50);




        $("#thebutton_" + kitNo).click(function (e) {

            e.preventDefault();

            var thetext = $('#thetext_' + kitNo).val();
            //validators!
            if (thetext.length < 1 || $.trim(thetext) == '') {
                //alert("Text must not be blank!")
                CK.alert(106)
            }
            else {

                Builder.doubleKit = kitNo;
                if (kitNo == 2 || kitNo == 4) {
                    // var view = svgText.currentView;
                    var view = $('.preview-nav.kit_' + kitNo + ' a.active').attr('data-view');
                    var currentView = view.split('_');
                    svgText.currentView = '_' + currentView[1] + '_' + kitNo;
                    //svgText.currentView = '_Front_' + kitNo;
                }
                svgText.makeNewKitText(thetext, kitNo)
                //Date 22 Aug 2019
                if (kitNo === 4) {
                    $('#boundingbox_holder_kit').css("display", "block");
                }
            }
        });
        $(".add-image_" + kitNo).click(function () {

            svgText.makeNewKitImage();
        });
        $("#boundingbox_deselect").click(function (e) {
            svgText.clearKitActiveLayer(kitNo);
        });
        $("#boundingbox_deselect_kit").click(function (e) {
            svgText.clearKitActiveLayer(kitNo);
        });
        svgText.shiftCheck();
    },
    loadKitSavedToArray: function (view, results, kitNo) {

        console.log('svg: loadKitSavedToArray', view, results);
        try {
            console.log(results[0].width);
        }
        catch (e) { }

        if (typeof results != 'undefined') {
            for (var i = 0; i < results.length; i++) {

                svgText.layerKitObjects[view + '_' + kitNo].push(results[i]);
            }
        }
    },
    setKitView: function (view, kitNo) {
        //21/2/2019
        $('.share').hide();

        //28/2/2019
        //IsImagePathGet = false

        console.log('svg: setKitView', view);
        console.log('KitNo-KitView', kitNo, view);
        $('.kits.kit_' + kitNo + ' .option-set.content').removeClass('no-zones');

        if (ProductKit['kit_' + kitNo].masks[view.substr(1)].length < 1)
            $('.kits.kit_' + kitNo + ' .option-set.content').addClass('no-zones');
        svgText.currentView = view;

        $(".kits.kit_" + kitNo + " .palette_view").removeClass("active");
        var editable_area = $("#CUSTOM" + view);

        var len = $(".kits.kit_" + kitNo + " .canvas-wrapper[data-view='" + view + "'] .svg > svg").length;
        if (len > 0) {

            var viewbox = $(".kits.kit_" + kitNo + " .canvas-wrapper[data-view='" + view + "'] .svg > svg")[0].getAttribute("viewBox").split(' ');

            svgText.bbScale = $("#boundingbox_holder").height() / viewbox[3];
            KitScale['kit_' + kitNo] = $("#boundingbox_holder").height() / viewbox[3];
            if (kitNo == 4) {

                KitScale['kit_' + kitNo] = $("#boundingbox_holder_kit").height() / viewbox[3];
                $(".kits.kit_" + kitNo + " .canvas-wrapper[data-view='" + view + "'] .svg > svg").attr("width", viewbox[2] * svgText.bbScale);
                var offset_y = (($("#boundingbox_holder_kit").height() - viewbox[3]) / 2);
                var offset_x = 0;
                $("#boundingbox_holder_kit").css({ 'margin': '0 0 0 ' + offset_x + 'px', 'width': viewbox[2] * KitScale['kit_' + kitNo], 'height': viewbox[3] * KitScale['kit_' + kitNo] });

            }
            else {
                $(".kits.kit_" + kitNo + " .canvas-wrapper[data-view='" + view + "'] .svg > svg").attr("width", viewbox[2] * svgText.bbScale);
                var offset_y = (($("#boundingbox_holder").height() - viewbox[3]) / 2);
                var offset_x = 0;//($(".canvas-wrapper[data-view='"+view+"'] .svg").width() - $(".canvas-wrapper[data-view='"+view+"'] .svg > svg").width())/2 ;
                $("#boundingbox_holder").css({ 'margin': '0 0 0 ' + offset_x + 'px', 'width': viewbox[2] * svgText.bbScale, 'height': viewbox[3] * svgText.bbScale });
            }

        }
        //load stuff after the bb + canvas is is prepared
        //Commented Code
        //if (!$("#text_palette_" + kitNo + view + '_' + kitNo).hasClass("loaded"))
        //   svgText.loadKitSavedData(view, svgText.layerKitObjects[view + "_" + kitNo], kitNo);

        // Important --When we Double Click on Uploaded Logo In Kit 4 ,So Logo is Automatically Zoom or Increase in size
        // Solve it on Case no 4 by Using Commenting,Also Use Specific kit condition
        if (kitNo == 0) {
            if (!$("#text_palette_" + kitNo + view + '_' + kitNo).hasClass("loaded"))
                svgText.loadKitSavedData(view, svgText.layerKitObjects[view + "_" + kitNo], kitNo);
        }
        else if (kitNo == 1) {
            if (!$("#text_palette_" + kitNo + view + '_' + kitNo).hasClass("loaded"))
                svgText.loadKitSavedData(view, svgText.layerKitObjects[view + "_" + kitNo], kitNo);
        }
        else if (kitNo == 2) {
            if (!$("#text_palette_" + kitNo + view + '_' + kitNo).hasClass("loaded"))
                svgText.loadKitSavedData(view, svgText.layerKitObjects[view + "_" + kitNo], kitNo);
        }
        else if (kitNo == 3) {
            if (!$("#text_palette_" + kitNo + view + '_' + kitNo).hasClass("loaded"))
                svgText.loadKitSavedData(view, svgText.layerKitObjects[view + "_" + kitNo], kitNo);
        }
        else if (kitNo == 4) {
            if (!$("#text_palette_" + kitNo + view + '_' + kitNo).hasClass("loaded")) {
                svgText.loadKitSavedData(view, svgText.layerKitObjects[view + "_" + kitNo], kitNo);
            }
        }
        $("#text_palette_" + kitNo + view + '_' + kitNo).addClass("active").addClass("loaded");
        $("#option1center .product-title").css("display", "block")
        $("#option1center .kits_2 .product-title").css("display", "block")
    },
    loadKitSavedData: function (view, results, kitIndex) {

        console.log('svg: loadKitSavedData', view, results);
        try {
            console.log(results[0].width);
        }
        catch (e) { }
        //var results = data
        for (var i = 0; i < results.length; i++) {
            svgText.loadFlag = true;
            svgText.currentLayer = i;
            if (results[i].type == "textLayer") {
                svgText.loadKitText(true, kitIndex);
                svgText.placeLoadedKitSvgText(kitIndex);
            }
            else if (results[i].type == "imageLayer") {
                svgText.loadKitImage(kitIndex);
            }
            else if (results[i].type == "canvaslayer") {
                $(".lds-wrapper-canvas").show();
                svgText.loadKitCanvasText(kitIndex);
                $(".lds-wrapper-canvas").hide();
            }
            else if (results[i].type == "logoLayer") {
                svgText.loadKitSVGLogo(kitIndex);
            }
            svgText.loadFlag = false;
        }
    },
    clearKitActiveLayer: function (kitIndex) {
        var kit_no = kitIndex;
        if (kit_no == "undefined") {
            kit_no = $('.kit span.active').attr('data-count');
        }
        console.log('svg: clearActiveKitLayer');
        svgText.currentLayer = -1;
        if (kit_no == 4) {
            $("#boundingbox_holder_kit").removeClass("bbactive");
           // $("#boundingbox_kit").attr('style', '');
            $('#boundingbox_kit').hide();
            $("#text_palette_" + kit_no + " .palette_active").removeClass("palette_active");
        } else {
            $("#boundingbox_holder").removeClass("bbactive");
            $("#boundingbox").attr('style', '');
            $("#text_palette_" + kit_no + " .palette_active").removeClass("palette_active");
        }


    }
}

interact('#boundingbox_kit')

.draggable({

    inertia: true,
    // keep the element within the area of it's parent
    restrict: {
        restriction: "self",
        endOnly: true,
        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    },
    onmove: function (event) {
        var topHeight = parseFloat($('#boundingbox_kit').css('top'));
        console.log('top ', topHeight);
        var target = event.target;
        var op3 = $('.kit_2').height();

        // var revScale = 1 / svgText.bbScale;
        var revScale = 1 / KitScale['kit_4'];
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        console.log('y ', y);
        console.log('y b', target.getAttribute('data-y'));
        console.log('ev ', event.dy);


        $("#boundingbox_kit").css({ 'top': y + op3, 'left': x });

        // update the position attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        var currentType = "";
        if (IsKit) {
            currentType = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].type;
        } else {
            var currentType = svgText.layerObjects[svgText.currentView][svgText.currentLayer].type;
        }

        if (currentType == "imageLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "logoLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);

        svg_target.attr('x', x * revScale);
        svg_target.attr('y', y * revScale);

        //store values
        if (IsKit) {
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].x = x * revScale;
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].y = y * revScale;
            Builder.hasChanged("something dragged in kit");

        } else {
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].x = x * revScale;
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].y = y * revScale;
            Builder.hasChanged("something dragged");

        }




    },

    onend: function (event) {
        //console.log(svgText.layerObjects[svgText.currentView]);
        //console.log(svgText.layerObjects[svgText.currentView][svgText.currentLayer])
    }

})
.resizable({
    edges: {
        top: false,       // Use pointer coords to check for resize.
        left: false,      // Disable resizing from left edge.
        bottom: '.resize-handle_kit',// Resize if pointer target matches selector
        right: '.resize-handle_kit' // Resize if pointer target is the given Element
    },

    // keep the element within the area of it's parent
    //restrict: {
    //    restriction: "self",
    //    elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    //},
    onmove: function (event) {

        var revScale = 1 / KitScale['kit_4'];
        var target = event.target; // bounding box
        console.log('ev y', event.dy);
        console.log('ev x', event.dx);
        var currentType = "";
        if (IsKit) {
            currentType = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].type;
        } else {
            var currentType = svgText.layerObjects[svgText.currentView][svgText.currentLayer].type;
        }

        if (currentType == "imageLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "logoLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        var w = parseFloat(target.style.width);
        var h = parseFloat(target.style.height);
        //relative x and y are based on the bounding box's offsets and the cursor position 
        var relative_x = event.clientX - event.target.getBoundingClientRect().left;
        var relative_y = event.clientY - event.target.getBoundingClientRect().top;

        var ratio = parseFloat(svg_target.attr("data-orig-w")) / parseFloat(svg_target.attr("data-orig-h"));

        if (svgText.shiftKey == false) {
            if (ratio > 2 || ratio > 0.5 && relative_x > relative_y) {
                var targ_w = Math.max(w + event.dx, 30);
                var targ_h = targ_w / ratio;
                target.style.width = ((targ_w < 300) ? targ_w : 300) + 'px';
                target.style.height = targ_h + 'px';

            }
            else {
                var targ_h = Math.max(h + event.dy, 30);
                var targ_w = targ_h * ratio;
                target.style.height = ((targ_h < 300) ? targ_h : 300) + 'px';
                target.style.width = targ_w + 'px';
            }
        }
        else {
            var targ_w = Math.max(w + event.dx, 10);
            var targ_h = Math.max(h + event.dy, 10);
            target.style.width = ((targ_w < 300) ? targ_w : 300) + 'px';
            target.style.height = ((targ_h < 300) ? targ_h : 300) + 'px';
        }

        svg_target.attr('width', targ_w * revScale);
        svg_target.attr('height', targ_h * revScale);
        svg_target.attr("data-scale-x", w * revScale / parseFloat(svg_target.attr("data-orig-w")));
        svg_target.attr("data-scale-y", h * revScale / parseFloat(svg_target.attr("data-orig-h")));


        //store values
        if (IsKit) {
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = targ_w * revScale;
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = targ_h * revScale;
            Builder.hasChanged("something resized in kit");
        } else {
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = targ_w * revScale;
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = targ_h * revScale;
            Builder.hasChanged("something resized");
        }

    }
});
interact.maxInteractions(Infinity);


interact('#boundingbox')
.draggable({
    inertia: true,
    // keep the element within the area of it's parent
    restrict: {
        restriction: "parent",
        endOnly: true,
        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    },
    onmove: function (event) {
        //25/4/2019
        //Apply art on shorts Sleeves for full size product
        if (Product.ApplyArtOnShortsSleeves) {
            $("#boundingbox_holder").attr('style', 'max-width: 450px !important;width: 100% !important;');
        }
        var topHeight = parseFloat($('#boundingbox').css('top'));
        console.log('top ', topHeight);
        var target = event.target;
        var op3 = $('.kit_2').height();

        var revScale = 1 / svgText.bbScale;
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        console.log('y ', y);
        console.log('y b', target.getAttribute('data-y'));
        console.log('ev ', event.dy);


        $("#boundingbox").css({ 'top': y, 'left': x });

        // update the position attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        var currentType = "";
        if (IsKit) {
            currentType = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].type;
        } else {
            var currentType = svgText.layerObjects[svgText.currentView][svgText.currentLayer].type;
        }

        if (currentType == "imageLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "logoLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);

        svg_target.attr('x', x * revScale);
        svg_target.attr('y', y * revScale);

        //store values
        if (IsKit) {
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].x = x * revScale;
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].y = y * revScale;
            Builder.hasChanged("something dragged in kit");

        } else {
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].x = x * revScale;
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].y = y * revScale;
            Builder.hasChanged("something dragged");

        }




    },

    onend: function (event) {
        //console.log(svgText.layerObjects[svgText.currentView]);
        //console.log(svgText.layerObjects[svgText.currentView][svgText.currentLayer])
    }

})
.resizable({
    edges: {
        top: false,       // Use pointer coords to check for resize.
        left: false,      // Disable resizing from left edge.
        bottom: '.resize-handle',// Resize if pointer target matches selector
        right: '.resize-handle' // Resize if pointer target is the given Element
    },

    // keep the element within the area of it's parent
    restrict: {
        restriction: "parent",
        elementRect: { top: 1, left: 1, bottom: 1, right: 1 }
    },
    onmove: function (event) {
        var revScale = 1 / svgText.bbScale;
        var target = event.target; // bounding box
        var currentType = "";
        if (IsKit) {
            currentType = svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].type;
        } else {
            var currentType = svgText.layerObjects[svgText.currentView][svgText.currentLayer].type;
        }

        if (currentType == "imageLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else if (currentType == "logoLayer")
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        else
            var svg_target = $("#layer_svg" + svgText.currentView + svgText.currentLayer);
        var w = parseFloat(target.style.width);
        var h = parseFloat(target.style.height);
        //relative x and y are based on the bounding box's offsets and the cursor position 
        var relative_x = event.clientX - event.target.getBoundingClientRect().left;
        var relative_y = event.clientY - event.target.getBoundingClientRect().top;

        var ratio = parseFloat(svg_target.attr("data-orig-w")) / parseFloat(svg_target.attr("data-orig-h"));

        if (svgText.shiftKey == false) {
            if (ratio > 2 || ratio > 0.5 && relative_x > relative_y) {
                var targ_w = Math.max(w + event.dx, 30);
                var targ_h = targ_w / ratio;
                target.style.width = ((targ_w < 300) ? targ_w : 300) + 'px';
                target.style.height = targ_h + 'px';
            }
            else {
                var targ_h = Math.max(h + event.dy, 30);
                var targ_w = targ_h * ratio;
                target.style.height = ((targ_h < 300) ? targ_h : 300) + 'px';
                target.style.width = targ_w + 'px';
            }
        }
        else {
            var targ_w = Math.max(w + event.dx, 10);
            var targ_h = Math.max(h + event.dy, 10);
            target.style.width = ((targ_w < 300) ? targ_w : 300) + 'px';
            target.style.height = ((targ_h < 300) ? targ_h : 300) + 'px';
        }
        svg_target.attr('width', targ_w * revScale);
        svg_target.attr('height', targ_h * revScale);
        svg_target.attr("data-scale-x", w * revScale / parseFloat(svg_target.attr("data-orig-w")));
        svg_target.attr("data-scale-y", h * revScale / parseFloat(svg_target.attr("data-orig-h")));

        console.log('is kit', IsKit);
        //store values
        if (IsKit) {
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].width = targ_w * revScale;
            svgText.layerKitObjects[svgText.currentView][svgText.currentLayer].height = targ_h * revScale;
            Builder.hasChanged("something resized in kit");
        } else {
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].width = targ_w * revScale;
            svgText.layerObjects[svgText.currentView][svgText.currentLayer].height = targ_h * revScale;
            Builder.hasChanged("something resized");
        }

    }
});
interact.maxInteractions(Infinity);



